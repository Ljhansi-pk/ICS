create or replace package           app_message_operations as 
  type retCursor is ref cursor;
  

  procedure GetAllExceptions(pc_RetCursor out retCursor); 
  Procedure App_Message_Insert(  as_Machineid    in app_message.machine_id%Type,
                                 ad_OperatorID   in app_message.operator_id%Type,
                                 ad_DateRecorded in app_message.date_recorded%Type,
                                 as_ProcessName  in app_message.process_name%Type,
                                 ax_RecordData   in app_message.recorded_data%Type,
                                 as_MessageCode  in app_message.message_code%Type,
                                 as_Message      in app_message.message%Type);                          
  end app_message_operations;
  /
  
  create or replace PACKAGE BODY app_message_operations as

		procedure GetAllExceptions(pc_RetCursor out retCursor) as 
		  begin
			Open pc_retCursor for
				SELECT 
						SEQ_NO,
						OPERATOR_ID,
						MACHINE_ID,
						TO_CHAR(DATE_RECORDED,'yyyy-MM-DD HH24:MI:SS'),
						PROCESS_NAME,
						RECORDED_DATA,
						MESSAGE_CODE,
						MESSAGE
				FROM APP_MESSAGE ;
		    
			EXCEPTION
			  when others then
				pc_retCursor:=null;
		        
		 end GetAllExceptions;
  
  
		    Procedure App_Message_Insert(    as_Machineid    in app_message.machine_id%Type,
											 ad_OperatorID   in app_message.operator_id%Type,
											 ad_DateRecorded in app_message.date_recorded%Type,
											 as_ProcessName  in app_message.process_name%Type,
											 ax_RecordData   in app_message.recorded_data%Type,
											 as_MessageCode  in app_message.message_code%Type,
											 as_Message      in app_message.message%Type) as
		  begin
				INSERT INTO APP_MESSAGE(
										seq_no,
										OPERATOR_ID,
										machine_id,
										date_recorded,
										process_name,
										recorded_data,
										message_code,      
										MESSAGE)
				VALUES( APP_MESSAGE_SEQ.NextVal,
						as_machineid,
						ad_OperatorID,
						ad_daterecorded,
						as_processname,
						ax_recorddata,
						as_messagecode,
						as_message);
		      
		   COMMIT;  
		   
		   Exception
			when others then
			  null;
		  end App_Message_Insert;


end app_message_operations;
/

create or replace PACKAGE           BOM_ATTRIBUTES AS
/******************************************************************************
   NAME:       BOM_ATTRIBUTES
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/17/2011      arsherri       1. Created this package.
   1.1        10/02/2012     Harini         1.Commented Get_Brand_desc function
                                            2. Replaced ps_SKU with ps_Matl_Num in
                                            Get_Load_Range,Get_Rim_Diameter,
                                            Get_Product_Type,Get_Ece_Tire_Class,
                                            Get_Imark_Family functions
******************************************************************************/

  FUNCTION Get_Product_Type (ps_Matl_Num IN VARCHAR2) RETURN NUMBER;

  FUNCTION Get_Load_Range   (ps_Matl_Num IN VARCHAR2) RETURN VARCHAR2;

  FUNCTION Get_Rim_Diameter (ps_Matl_Num IN VARCHAR2) RETURN NUMBER;

  --FUNCTION get_brand_desc (ps_brand_code IN VARCHAR2) RETURN VARCHAR2; -- As per PRJ 3617 commented

  FUNCTION get_aspect_ratio (ps_size_stamp IN VARCHAR2, pn_tire_type_id in NUMBER) RETURN VARCHAR2;

  FUNCTION Get_Imark_Family (ps_Matl_Num IN VARCHAR2, pn_certificateid IN NUMBER) RETURN VARCHAR2;

  FUNCTION Get_Ece_Tire_Class(ps_Matl_Num IN VARCHAR2) RETURN VARCHAR2;

END BOM_ATTRIBUTES;
/

create or replace PACKAGE BODY           BOM_ATTRIBUTES AS
/******************************************************************************
   NAME:       BOM_ATTRIBUTES
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/17/2011     arsherri       1. Created this package body.
   1.1        10/02/2012    Harini         1.Commented Get_Brand_desc function
                                           2. Replaced ps_SKU with ps_Matl_Num in
                                           Get_Load_Range,Get_Rim_Diameter,Get_Product_Type,
                                           Get_Ece_Tire_Class functions and
                                           modified their functionalities by retrieving the outputs
                                           from CMDR_DATA.Material_Attribute table
******************************************************************************/

FUNCTION Get_Product_Type (ps_Matl_Num IN VARCHAR2)
RETURN NUMBER
IS
/*******************************************************************************
  NAME       : Get_Product_Type
  PURPOSE    :Returns the value of Product type for the given material
  REVISIONS  :
  Ver        Date        Author           Description
  ---------  ----------  ---------------  ------------------------------------
  1.0
  1.1       10/02/2012    Harini        Replaced ps_SKU with ps_Matl_Num.
                                        Modified the logic by retrieving the
                                        Product_Type from CMDR_DATA.Material_Attribute
                                        table
*******************************************************************************/
      ln_ProductTypeCode   NUMBER(2) := 0;

  BEGIN
           SELECT CASE  WHEN  ma.Attrib_Value = 'LIGHT TRUCK TIRE' THEN 3
                        WHEN  ma.Attrib_Value = 'SPECIALTY TIRE'   THEN 4
                        WHEN  ma.Attrib_Value = 'PASSENGER TIRE'   THEN 1
                        WHEN  ma.Attrib_Value = 'CYCLE TIRE'       THEN 0
                        WHEN  ma.Attrib_Value = 'TRUCK & BUS TIRE' THEN 7
                   END
            INTO  ln_ProductTypeCode
            FROM  CMDR_DATA.Material_Attribute ma
            WHERE ma.Matl_Num    =  LPAD(ps_Matl_Num,18,0)
              AND ma.Attrib_Name =  'PRODUCT_TYPE';

        RETURN (ln_ProductTypeCode);

    EXCEPTION
        WHEN OTHERS THEN
            RETURN (0);
    END;

FUNCTION Get_Load_Range (ps_Matl_Num IN VARCHAR2)
RETURN VARCHAR2
IS
/*******************************************************************************
  NAME       : Get_Load_Range
  PURPOSE    :Returns the value of Load_Range for the given material
  REVISIONS  :
  Ver        Date        Author           Description
  ---------  ----------  ---------------  ------------------------------------
  1.0
  1.1       10/02/2012    Harini        Replaced ps_SKU with ps_Matl_Num.
                                        Modified the logic by retrieving the
                                        Load_Range from CMDR_DATA.Material_Attribute
                                        table
*******************************************************************************/
  ls_LoadRange  CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;

  BEGIN

      ls_LoadRange := '';

      SELECT ma.Attrib_Value
        INTO ls_LoadRange
        FROM CMDR_DATA.Material_Attribute ma
       WHERE ma.Matl_Num     =  LPAD(ps_Matl_Num,18,0)
         AND ma.Attrib_Name  =  'LOAD_RANGE';

      RETURN (ls_LoadRange);

  EXCEPTION
      WHEN OTHERS THEN
          RETURN(NULL);
  END;

 FUNCTION Get_Rim_Diameter (ps_Matl_Num IN VARCHAR2)
 RETURN NUMBER
 IS
/*******************************************************************************
  NAME       : Get_Rim_Diameter
  PURPOSE    :Returns the value of Rim_Diameter for the given material
  REVISIONS  :
  Ver        Date        Author           Description
  ---------  ----------  ---------------  ------------------------------------
  1.0
  1.1       10/02/2012    Harini        Replaced ps_SKU with ps_Matl_Num.
                                        Modified the logic by retrieving the
                                        Rim_Diameter from CMDR_DATA.Material_Attribute
                                        table
*******************************************************************************/
   ls_RimDiameter  CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;

    BEGIN

         ls_RimDiameter  := '';

         SELECT ma.Attrib_Value
          INTO ls_RimDiameter
          FROM CMDR_DATA.Material_Attribute ma
         WHERE ma.Matl_Num     =  LPAD(ps_Matl_Num,18,0)
           AND ma.Attrib_Name  =  'RIM_DIAMETER';

        RETURN (TO_NUMBER(ls_RimDiameter));

    EXCEPTION
        WHEN OTHERS THEN
            RETURN(NULL);
    END;

--    FUNCTION get_brand_desc (ps_brand_code IN VARCHAR2) RETURN VARCHAR2 IS
--
--        ls_BrandDesc    brand_details_mv.brand_desc%TYPE;
--
--    BEGIN
--
--        ls_BrandDesc := '';
--
--        SELECT brand_desc
--          INTO ls_BrandDesc
--          FROM brand_details_mv
--         WHERE brand_code = ps_brand_code;
--
--        RETURN (ls_BrandDesc);
--
--    EXCEPTION
--        WHEN OTHERS THEN
--            RETURN NULL;
--
--    END;

     FUNCTION get_aspect_ratio (ps_size_stamp IN VARCHAR2, pn_tire_type_id in NUMBER) RETURN VARCHAR2 IS
        ls_AspectRatio  VARCHAR2(4) := NULL;
        ln_AspectRatioChk       NUMBER;

     BEGIN

        IF INSTR(ps_size_stamp, '/', 1, 1) = 0 THEN
            ls_AspectRatio := NULL;
            IF pn_tire_type_id = 1 THEN
               ls_AspectRatio := 82;
            END IF;
        ELSE
            ls_AspectRatio := SUBSTR(ps_size_stamp,INSTR(ps_size_stamp,'/', 1, 1) + 1, 2);
            BEGIN
                ln_AspectRatioChk := TO_NUMBER(ls_AspectRatio);
                IF ln_AspectRatioChk < 16 THEN
                    ls_AspectRatio := NULL;
                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    ls_AspectRatio := NULL;
            END;
       END IF;

        RETURN (ls_AspectRatio);

     EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;

        END;


FUNCTION Get_Imark_Family (ps_Matl_Num IN VARCHAR2,  pn_certificateid IN NUMBER) RETURN VARCHAR2
IS
/*******************************************************************************
  NAME       : Get_Imark_Family
  PURPOSE    : Returns the value ofImark_Family for the given material
  REVISIONS  :
  Ver        Date        Author           Description
  ---------  ----------  ---------------  ------------------------------------
  1.0
  1.1       10/02/2012    Harini        Replaced ps_SKU with ps_Matl_Num.
*******************************************************************************/
ls_ImarkFamily      VARCHAR2(5);
ls_FamilyCode       VARCHAR2(10);
ln_ImarkFamily      NUMBER;
ln_ErrorNum         NUMBER(2);
ls_ErrorDesc        VARCHAR2(300);

BEGIN

        SIMILAR_TIRES.Get_Imark_Family (ps_Matl_Num, pn_certificateid ,ln_ImarkFamily, ls_FamilyCode, ln_ErrorNum, ls_ErrorDesc);

        IF ln_ErrorNum = 0 THEN
            ls_ImarkFamily := TO_CHAR(ln_ImarkFamily);
        ELSE
            ls_ImarkFamily :=0;
        END IF;

        RETURN ls_ImarkFamily;

EXCEPTION
    WHEN OTHERS THEN
        RETURN Null;
END;


FUNCTION Get_Ece_Tire_Class (ps_Matl_Num IN VARCHAR2) RETURN VARCHAR2
IS
/*******************************************************************************
  NAME       : Get_Ece_Tire_Class
  PURPOSE    : Returns the value of Ece_Tire_Class for the given material
  REVISIONS  :
  Ver        Date        Author           Description
  ---------  ----------  ---------------  ------------------------------------
  1.0
  1.1       10/02/2012    Harini        Replaced ps_SKU with ps_Matl_Num.
                                        Modified the logic by retrieving the
                                        Ece_Tire_Class from
                                        CMDR_DATA.Material_Attribute table
*******************************************************************************/
 ln_TireTypeID                product.tiretypeid%TYPE;
 ls_SpeedRating               Material_Attribute.Attrib_Value%TYPE;
 ln_SingLoadIndex             Material_Attribute.Attrib_Value%TYPE;
 ls_EceTireClass              VARCHAR2(10);
 ln_SRIndex                   qs_speed_rating.sr_index%TYPE;
 le_NoData                    Exception;

 BEGIN

      BEGIN
          SELECT ma1.Attrib_Value,
                 NVL(TO_NUMBER(ma2.Attrib_Value),0) sload_idx
            INTO ls_SpeedRating,
                 ln_SingLoadIndex
            FROM CMDR_DATA.Material_Attribute ma1,
                 CMDR_DATA.Material_Attribute ma2
           WHERE (ma1.Matl_Num  =  LPAD(ps_Matl_Num,18,0) AND ma1.Attrib_Name = 'SPEED_RATING')
             AND (ma2.Matl_Num  =  LPAD(ps_Matl_Num,18,0) AND ma2.Attrib_Name = 'STAMPED_SINGLE_LOAD_INDEX');

      EXCEPTION
           WHEN OTHERS THEN
                 RAISE  le_NoData;
      END;

      ln_TireTypeId := BOM_ATTRIBUTES.Get_Product_Type(ps_Matl_Num); -- As per PRJ3617,replaced SKU with Matl_Num

      IF ln_TireTypeId = 0 THEN
           RAISE le_NoData;
      END IF;

      IF ln_TireTypeID = 1 THEN
          ls_EceTireClass := 'C1';
      ELSIF ln_SingLoadIndex >= 122 THEN
          ls_EceTireClass := 'C3';
      ELSE

          SELECT sr_index
            INTO ln_SRIndex
            FROM qs_speed_rating
           WHERE product_type_code = 2
             AND speed_rating = ls_SpeedRating;

          IF (ln_SRIndex >= 1) AND (ln_SingLoadIndex <= 121) THEN
               ls_EceTireClass := 'C2';
          ELSE
              ls_EceTireClass := 'C3';
          END IF;

      END IF;

      RETURN ls_EceTireClass;

 EXCEPTION
      WHEN le_NoData THEN
              RETURN NULL;
      WHEN OTHERS THEN
              RETURN NULL;
 END;
END BOM_ATTRIBUTES;
/

create or replace PACKAGE           CERTIFICATION_CRUD AS
/******************************************************************************
   NAME:       CERTIFICATION_CRUD
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0
   1.1        10/02/2012    Harini         1.Replaced ps_SKU with ps_Matl_Num in
                                            GetSimilarCertificateInfo,Certificate_Save,
                                            CertificateBasicInfo_Save,CertificateSimTire_Save
                                            procedures
   1.2        10/08/2012    Harini         1. Added ps_BrandLine as input in
                                             GET_CERTIFICATIONSEARCHRESULT procedure
                                           2. Replaced ps_removeSKU with ps_Remove_Matl_Num
                                           in Certificate_Save procedure
   1.3         03/04/2013   Venkat         1.Added product discontinueddate and TPN
                                             to the output cursor of getCertificatesInfo procedure
                                           2.Modfied CertificateBasicInfo_Save to capture
                                           Certificate Extension.
   1.4         10/22/2013   Harini         1. Added GetSKUDescriptors procedure to eliminate
                                           Product data webservice from ICS application.
   1.5         10/24/2013   Harini         1. Modified Certificate_Save by adding new parameter
                                           ps_Family_Desc to update product table as suggested by Rajiv
   1.6         11/22/2013   Guru         1. Changed logic so that if extension entered to look for is *,
                                          it returns all skus on all extensions; if an extension is entered,
                                          only gets what was added on that extension. If ‘H’ is entered,
                                          only brings back skus on “highest” extension in GET_CERTIFICATIONSEARCHRESULT
                                          and GetCertificatesInfo procedures.
                                          2. Modified the logic of Certificate_Save procedrue such that onlyGSO types
                                          can modify the Cretificate numbers.
   1.7         11/27/2013   Harini         1. Added ps_InsertPC,pn_Error_Num, ps_ErrorMsg in CertificateBasicInfo_Save procedure
                                           and modified the speedrating and extensions logic.
                                           2.Modified the CertificateSimTirE_Save procedures as the paramters are added in
                                           ICS_Common_Functions pcakage.
   2.00        09/09/2014   Joe Hill       Added ps_MoldChangeRequest and pd_OperApprovalDate in Certificate_Save procedure
******************************************************************************/
  Type retCursor is ref cursor;
  --Creates the Log Entry on the Audit Log table
  PROCEDURE AUDITLOG_INSERT(
                            pd_ChangeDateTime in date ,
                            ps_ChangedBy      in VARCHAR2,
                            ps_Area           in VARCHAR2 ,
                            ps_ChangedFiled_Element in VARCHAR2 ,
                            ps_OLDValue      in VARCHAR2,
                            ps_NewValue      in VARCHAR2,
                            pi_ReasonID       in NUMBER,
                            ps_Note             in VARCHAR2);
  PROCEDURE  AUDITLOG_UpdateApprovalStatus(pi_ChangeLogId in number,pd_ChangeDateTime in date , ps_Status in varchar2,ps_Approver in varchar2);

  --Get the information from the   Audit Log table depending on the search criteria
  PROCEDURE GET_AUDITLOG(pc_retCursor out retCursor);

  PROCEDURE GET_AuditLogForDate(pc_retCursor out retCursor,pd_ChangeDateTime in date);

  PROCEDURE GET_AuditLogAfterDate(pc_retCursor out retCursor,pd_ChangeDateTime in date);

  PROCEDURE GET_AuditLogByUser(pc_retCursor out retCursor,ps_ChangedBy in varchar2);

  PROCEDURE GET_AuditLogByFieldChanged(pc_retCursor out retCursor,ps_ChangedFiled_Element in varchar2);

  PROCEDURE GET_AuditLogByArea(pc_retCursor out retCursor,ps_Area in varchar2);

  -- Get the change approval reasons
  PROCEDURE GET_APPROVALREASONS(pi_CertificationTypeId IN NUMBER, pc_retCursor OUT retCursor);

  PROCEDURE GETAPPROVEDSUBSTITUTION(pi_CertificationTypeId IN NUMBER, ps_Field IN VARCHAR2, pi_Value IN NUMBER, pi_SkuId IN NUMBER, pi_NewValue OUT NUMBER);

  PROCEDURE GET_CERTIFICATIONBYBRANDCODE(pc_retCursor out retCursor,ps_Brandcode in  varchar2);

  PROCEDURE GET_CERTIFICATIONSEARCHRESULT(pc_retCursor out retCursor,
                                          ps_SearchCriteria in varchar2,
                                          ps_SearchType in varchar2,
                                          ps_ExtensionNo in varchar2,
                                          ps_imarkFamily IN VARCHAR2,
                                          ps_BrandLine   IN VARCHAR2);

  PROCEDURE GetCertificatesInfo(pc_retCursor out retCursor,
                                ps_certificationNumber in varchar2,
                                ps_extensionNo in varchar2,
                                pi_certificationTypeID in number,
                                pi_SKUId in number,
                                ps_TRExists out varchar2);

  PROCEDURE GetSimilarCertificateInfo(pc_retCursor out retCursor,ps_Matl_Num IN VARCHAR2,pi_CertificationTypeID in Number, ps_CertificationNumber IN VARCHAR2);

  PROCEDURE certificate_update_batch(ps_certificationtypename IN VARCHAR2, ps_temp_batchnumber_g IN VARCHAR2, ps_batchnumber_g IN VARCHAR2, ps_username IN VARCHAR2);

  PROCEDURE Certificate_Save( pi_RetId out number,
                              pi_CertificateID in number,
                              PI_SKUID in number,
                              PS_MATL_NUM in varchar2,
                              ps_Remove_Matl_Num IN VARCHAR2,
                              ps_CertificationTypeName in  varchar2,
                              ps_CERTIFICATENUMBER in  varchar2,
                              pd_certdatesubmitted IN DATE,
                              pd_certdateapproved_cegi IN DATE,
                              pd_DATESUBMITED in Date,
                              pc_ACTIVESTATUS in varchar2,
                              pd_DATEASSIGNED_EGI in Date,
                              pd_DateApproved_CEGI in Date,
                              pc_RENEWALREQUIRED_CGIN  in varchar2,
                              ps_JOBREPORTNUMBER_CEN in  varchar2,
                              ps_EXTENSION_EN in  varchar2,
                              ps_SUPPLEMENTALMOLDSTAMPING_E in  varchar2,
                              ps_EMARKREFERENCE_I in  varchar2,
                              pd_EXPIRYDATE_I in Date,
                              ps_FAMILY_I in  varchar2,
                              ps_Family_Desc IN VARCHAR2,
                              ps_PRODUCTLOCATION in  varchar2,
                              ps_COUNTRYOFMANUFACTURE_N in  varchar2,
                              ps_addnewCustomer IN VARCHAR2,
                              ps_actSigreq IN VARCHAR2,
                              pi_CUSTOMERID IN NUMBER,
                              ps_CUSTOMER_N IN VARCHAR2,
                              ps_CUSTOMERADDRESS_N IN VARCHAR2,
                              ps_CUSTOMERSPECIFIC_N in  varchar2,
                              ps_addnewImporter IN VARCHAR2,
                              pi_IMPORTERID IN NUMBER,
                              ps_IMPORTER_N IN VARCHAR2,
                              ps_IMPORTERADDRESS_N IN VARCHAR2,
                              ps_IMPORTERREPRESENTATIVE_N IN VARCHAR2,
                              ps_COUNTRYLOCATION_N in  varchar2,
                              ps_BATCHNUMBER_G  in  varchar2,
                              ps_COMPANYNAME IN VARCHAR2,
                              ps_UserName in varchar2,
                              ps_Mold_Changed IN VARCHAR2,                      -- JBH_2.00
                              pd_Oper_Date_Approved IN DATE,                     -- JBH_2.00
                              ps_Additional_Info IN varchar2                           --JESEITZ 10/30/2016
                              );
                              /*,
                              pi_CertificateID in number,
                              pi_RetId out number) ;*/

  PROCEDURE CertificateBasicInfo_Save(ps_Matl_Num            IN  VARCHAR2,
                                      pi_CertificationTypeId IN  NUMBER,
                                      ps_CertificateNumber   IN  VARCHAR2,
                                      pi_importerid          IN  NUMBER,
                                      Pi_Customerid          In  Number,
                                      Ps_Operatorname        In  Varchar2,
                                      ps_Extension_En        IN  NUMBER,
                                      ps_InsertPC            IN  VARCHAR2,
                                      pn_Error_Num           OUT NUMBER,
                                      ps_ErrorMsg            OUT VARCHAR2);

   PROCEDURE CertificateSimTire_Save(ps_Matl_Num            IN VARCHAR2,
                                     pi_CertificationTypeId IN  number,
                                     ps_CertificateNumber   IN  varchar2,
                                     ps_OperatorName        IN  varchar2 );

 PROCEDURE Certificate_Archive(ps_CertificateNumber in varchar2,
                                      ps_OperatorName in varchar2 );

 PROCEDURE GetDefaultValues(pc_retCursor out retCursor,
                            ps_Number out CERTIFICATE.CERTIFICATENUMBER%TYPE,
                            ps_TypeName in CERTIFICATIONTYPE.CERTIFICATIONTYPENAME%Type,
                            pi_NumberID in CERTIFICATE.CERTIFICATEID%TYPE);

PROCEDURE CertificateDefaultValue_Save(pi_fieldValueId NUMBER, pi_certificationTypeId IN NUMBER, ps_fieldValue IN VARCHAR2, ps_certificateNumber IN VARCHAR2);

PROCEDURE CertificTypeDefaultValue_Save(pi_FieldvalueId in number,pi_CertificationTypeID in Number,ps_FieldValue in varchar2);

Function CheckIfCertificateDFExist(pi_FieldID in number,pi_certificationTypeID in Number,pi_CertificateID in Number) return varchar2;

PROCEDURE imarkcertificate_renew(pi_newId OUT NUMBER, pi_oldId IN NUMBER, ps_operatorName IN VARCHAR2);

PROCEDURE AddNewSkusToImarkCertificate(pi_Skuid in number,pi_countryID in number);

PROCEDURE GetCertifExtension(pi_certificateId IN NUMBER, ps_extensionNumber OUT VARCHAR2);

PROCEDURE GetLatestImarkCertifId(pi_certificateId OUT NUMBER);

PROCEDURE GetLatestGSOCertifNumber(ps_certificateNumber out varchar2);
Procedure Get_Brands(pc_retCursor out retCursor) ;

 Procedure Get_BrandLines
    (ps_Brand in VARCHAR2,
    pc_retCursor out retCursor) ;

PROCEDURE GetSKUDescriptors(ps_Matl_Num            IN  VARCHAR2,
                            pc_retCursor           OUT retCursor) ;
END CERTIFICATION_CRUD;
/

create or replace PACKAGE BODY                     CERTIFICATION_CRUD AS
/******************************************************************************
   NAME:       CERTIFICATION_CRUD
   PURPOSE:
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0
   1.1        10/02/2012    Harini         1.Replaced ps_SKU with ps_Matl_Num in
                                            GetSimilarCertificateInfo,Certificate_Save,
                                            CertificateBasicInfo_Save,
                                            CertificateSimTire_Save  procedures.
                                            Modified GetCertificatesInfo procedure
                                            such that it should have Matl_num in
                                            the select list
                                           2. Replaced ps_removeSKU with ps_Remove_Matl_Num
                                           in Certificate_Save procedure
   1.2         11/15/2012   Harini         3. Adding SYSdate while inserting in ProductCertificate
                                            table in CertificateBasicInfo_Save and ADDNEWSKUSTOIMARKCERTIFICATE sp's
   1.3         03/04/2013   Venkat         1.Added product discontinueddate and TPN
                                             to the output cursor of getCertificatesInfo procedure
                                           2.Modfied CertificateBasicInfo_Save to capture
                                           Certificate Extension.
   1.4         10/22/2013  Harini         1. Added GetSKUDescriptors procedure to eliminate ProductDatWebService
                                           from ICS application.
   1.5         10/24/2013   Harini         1. Modified Certificate_Save by adding new parameter
                                           ps_Family_Desc to update product table as suggested by Rajiv
   1.6         11/22/2013   Guru           1. Changed logic so that if extension entered to look for is *,
                                          it returns all skus on all extensions; if an extension is entered,
                                          only gets what was added on that extension. If `H' is entered,
                                          only brings back skus on "highest" extension in GET_CERTIFICATIONSEARCHRESULT
                                          and GetCertificatesInfo procedures.
                                          2. Modified the logic of Certificate_Save procedrue such that onlyGSO types
                                          can modify the Cretificate numbers.
   1.7         11/25/2013   Harini         1. Modified CertificateBasicInfo_Save,CertificateSimTire_Save procedures
                                           to implement extension and speedratinigs logic.
                                           2. Added ps_InsertPC,pn_Error_Num, ps_ErrorMsg in CertificateBasicInfo_Save procedure
   1.8         01/10/2014   Harini        1. Added exception when retrieving the speed rating and condition is modified such that both the speed ratings
                                            should not be null in CertifiacteBasicInfo_Save procedure.
                                          2. Commented the call to ProductCountry_Save and replace that call with deleting the Productcountry and call
                                          ProductCertification_Save procedure in Certificate_Save procedure
                                          3.Added CERTIFICATENUMBER,EXTENSION_EN in the select list else clause of Extension of Certifiation No search.
   1.9        01/23/2014    Harini       1.Modified Certificate_Save procedure by using pi_CertificateId instead of li_CertificateId as it is not filled.
   1.10       03/05/2014    Harini       1.Modified CertificateBasicInfo_Save procedure,incrementing extension_no in case of existing certificate and insert
                                          in Certificate table. Modified DatApproved and MatlApproved logic.
                                         2.Took CertificateId seq.next val into a varibale and assigned it to CertificateId while inserting the records in Certificate table
    1.12      04/02/2014   Jeseitz 1. ordered by material number in search by Imark in get_certificationsearchresult
                                               2. truncated sysdate in certificate_udpate_batch update when assigning to date submitted.
                                               3. in search by Imark in get_certificationsearchresult changed status to case statement instead of function so that if picks up
                                                  individual material's status instead of certificate status.
     1.13     04/15/2014  jeseitz  1. getcertificatesinfo - Imark part of IF clause was not getting by SKUID - need to be able to get different data for different
                                                speedratings of same material.
                                               2. in search by Imark in get_certificationsearchresult changed to not use customer function since not applicable for IMARKS
     1.14    07/08/2014 jeseitz     1. If certificationtypeid = 6 (E117) copy the supplemental mold stamping from the next lowest extension if present
                                                    2.  If this a new E117 certificate number (certifidationtypeid = 6) allow the first extension to be greater than 0. This is due to the government renaming certificates.
   2.00       09/09/2014  Joe Hill (JBH)  Procedures Modified:  certificate_save, getcertificatesinfo, getsimilarcertificateinfo, imarkcertificate_renew
                                          Added processing for Mold Change Requested and Operations Approval Date fields
                                            added to Product Certificate table.
    2.01     03/23/2015  jeseitz      Get_CertificationSearchResult - changed case statement for status so that it checks  if the productcountry status is
                                                null, it also must have a skuid that is not 0.  This is because of the left outer join - if there is no productcountry record
                                                we do not want the status to be 'Requested'
               10/30/2016 jeseitz   Procedures Modified:  certificate_save, getcertificatesinfo, getsimilarcertificateinfo, imarkcertificate_renew
                                          Added processing for ADDITIONAL_INFO
                                            added to Product Certificate table.
******************************************************************************/
  PROCEDURE AUDITLOG_INSERT(pd_ChangeDateTime in date ,
                            ps_ChangedBy      in VARCHAR2,
                            ps_Area           in VARCHAR2 ,
                            ps_ChangedFiled_Element in VARCHAR2 ,
                            ps_OLDValue      in VARCHAR2,
                            ps_NewValue      in VARCHAR2,
                            pi_ReasonID       in NUMBER,
                            ps_Note             in VARCHAR2) as
    le_ParametersNull exception;
    pragma exception_init( le_ParametersNull,-20005);
    ls_MACHINEID VARCHAR2(50):=null;
    ls_OPERATORID VARCHAR2(50):='ICSDEV';
    ls_ErrorMsg VARCHAR2(4000);
    ls_Approved VARCHAR2(1);
    ls_approvalStatus VARCHAR2(1);
  begin
        if  ps_changedby is not null then
            ls_OPERATORID:=ps_ChangedBy;
        end if;
        SELECT approvedyn INTO ls_Approved
        FROM certification_approval_reasons
        WHERE reasonid = pi_ReasonID;
        IF LOWER(ls_approved) = 'y' THEN
            ls_approvalStatus := 'a';
        ELSE
            ls_approvalStatus := 'p';
        END IF;
        INSERT INTO  CERTIFICATION_AUDIT_LOG
          (
          CHANGELOGID,
          CHANGEDATETIME,
          CHANGEDBY,
          AREA,
          CHANGEDFILED_ELEMENT,
          OLDVALUE,
          NEWVALUE,
          APPROVALSTATUS,
          REASONID,
          NOTE
          )
        VALUES
          (
          CHANGELOGID_SEQ.NextVal,
          pd_ChangeDateTime,
          ps_ChangedBy,
          ps_Area,
          ps_ChangedFiled_Element,
          ps_OLDValue,
          ps_NewValue,
          ls_approvalStatus,
          pi_ReasonID,
          ps_Note
          );
    Exception
            when le_ParametersNull then
                   ls_ErrorMsg:=  sqlerrm || '- AUDITLOG_INSERT.  There are null parameters.';
                  APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(AS_MACHINEID     => ls_MACHINEID,
                  AD_OPERATORID    => ls_OPERATORID,
                  AD_DATERECORDED  => sysdate,
                  AS_PROCESSNAME   => ' CERTIFICATION_CRUD.AUDITLOG_INSERT',
                  AX_RECORDDATA    => 'pi_certificationId is Invalid.',
                  AS_MESSAGECODE   => to_char(sqlcode),
                  AS_MESSAGE      => ls_ErrorMsg);
                  raise_application_error (-20005,ls_ErrorMsg);
           when others then
            ls_ErrorMsg:=  sqlerrm || '- AUDITLOG_INSERT.  An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(AS_MACHINEID     => ls_MACHINEID,
                  AD_OPERATORID    => ls_OPERATORID,
                  AD_DATERECORDED  => sysdate,
                  AS_PROCESSNAME   =>' CERTIFICATION_CRUD.AUDITLOG_INSERT',
                  AX_RECORDDATA    => 'An error have ocurred.(when others)',
                  AS_MESSAGECODE   => to_char(sqlcode),
                  AS_MESSAGE       => ls_ErrorMsg);
                 raise_application_error (-20007,ls_ErrorMsg);
  end AUDITLOG_INSERT;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

  Procedure  AUDITLOG_UpdateApprovalStatus(pi_ChangeLogId in number,pd_ChangeDateTime in date , ps_Status in varchar2,ps_Approver in varchar2) as
    le_ParametersNull exception;
    pragma exception_init( le_ParametersNull,-20005);
    ls_MACHINEID VARCHAR2(50):=null;
    ls_OPERATORID VARCHAR2(50):='ICSDEV';
    ls_ErrorMsg VARCHAR2(4000);
  begin
        if ps_Status is null or pi_ChangeLogId is null then
          raise le_ParametersNull;
        end if;
        UPDATE  CERTIFICATION_AUDIT_LOG SET
                      APPROVALSTATUS = ps_Status ,
                      ChangeDateTime= pd_ChangeDateTime,
                      Approver       = ps_Approver
        WHERE CHANGELOGID = pi_ChangeLogId;
         Exception
            when le_ParametersNull then
                   ls_ErrorMsg:=  sqlerrm || ' - AUDITLOG_UpdateApprovalStatus. There are null parameters.';
                  APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(AS_MACHINEID     => ls_MACHINEID,
                  AD_OPERATORID    => ls_OPERATORID,
                  AD_DATERECORDED  => sysdate,
                  AS_PROCESSNAME   => ' CERTIFICATION_CRUD.AUDITLOG_UpdateApprovalStatus',
                  AX_RECORDDATA    => 'pi_certificationId is Invalid.',
                  AS_MESSAGECODE   => to_char(sqlcode),
                  AS_MESSAGE      => ls_ErrorMsg);
                  raise_application_error (-20005,ls_ErrorMsg);
           when others then
            ls_ErrorMsg:=  sqlerrm || ' - AUDITLOG_UpdateApprovalStatus. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(AS_MACHINEID     => ls_MACHINEID,
                  AD_OPERATORID    => ls_OPERATORID,
                  AD_DATERECORDED  => sysdate,
                  AS_PROCESSNAME   =>' CERTIFICATION_CRUD.AUDITLOG_UpdateApprovalStatus',
                  AX_RECORDDATA    => 'An error have ocurred.(when others)',
                  AS_MESSAGECODE   => to_char(sqlcode),
                  AS_MESSAGE       => ls_ErrorMsg);
                  raise_application_error (-20007,ls_ErrorMsg);
  end AUDITLOG_UpdateApprovalStatus;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

  PROCEDURE GET_AUDITLOG(pc_retCursor out retCursor) as
   le_ParametersNull exception;
    pragma exception_init( le_ParametersNull,-20005);
    ls_MACHINEID VARCHAR2(50):=null;
    ls_OPERATORID VARCHAR2(50):='ICSDEV';
    ls_ErrorMsg VARCHAR2(4000);
  begin
      Open pc_retCursor FOR
      SELECT CHANGELOGID,
            CHANGEDATETIME,
            CHANGEDBY,
            AREA,
            CHANGEDFILED_ELEMENT,
            OLDVALUE,
            NEWVALUE,
            APPROVALSTATUS,
            Approver
      FROM  CERTIFICATION_AUDIT_LOG
      order by CHANGEDATETIME desc;
     EXCEPTION
      when others then
           ls_ErrorMsg:=  sqlerrm || ' - AUDITLOG_UpdateApprovalStatus. An error have ocurred.(when others)';
          APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(
              AS_MACHINEID => ls_MACHINEID,
              AD_OPERATORID => ls_OPERATORID,
              AD_DATERECORDED => sysdate,
              AS_PROCESSNAME =>'  CERTIFICATION_CRUD..GET_AUDITLOG',
              AX_RECORDDATA    => 'An error have ocurred.(when others)',
              AS_MESSAGECODE => to_char(sqlcode),
              AS_MESSAGE       =>sqlerrm
            );
            raise_application_error (-20007,ls_ErrorMsg);
  end GET_AUDITLOG;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

   PROCEDURE GET_APPROVALREASONS(pi_CertificationTypeId in number, pc_retCursor out retCursor) as
    -- Declare variables
    ls_machineId            VARCHAR2(50) := NULL;
    ls_operatorId            VARCHAR2(50) := 'ICSDEV';
    ls_errorMsg              VARCHAR2(4000);
  BEGIN
      OPEN pc_retCursor FOR
      SELECT car.reasonid,
            car.reason,
            car.approvedyn
      FROM  certification_approval_reasons car
      WHERE CAR.CERTIFICATIONTYPEID = pi_CertificationTypeId
      ORDER BY car.reason ASC;
  EXCEPTION
      WHEN OTHERS THEN
           ls_errorMsg := SQLERRM || ' - GET_APPROVALREASONS. An error have ocurred.(when others)';
           APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(
              AS_MACHINEID => ls_machineId,
              AD_OPERATORID => ls_operatorId,
              AD_DATERECORDED => SYSDATE,
              AS_PROCESSNAME =>'  CERTIFICATION_CRUD.GET_APPROVALREASONS',
              AX_RECORDDATA    => 'An error have ocurred.(when others)',
              AS_MESSAGECODE => TO_CHAR(SQLCODE),
              AS_MESSAGE       => SQLERRM
            );
            raise_application_error (-20007,ls_errorMsg);
  end GET_APPROVALREASONS;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

PROCEDURE GETAPPROVEDSUBSTITUTION(pi_CertificationTypeId IN NUMBER, ps_Field IN VARCHAR2, pi_Value IN NUMBER, pi_SkuId IN NUMBER, pi_NewValue OUT NUMBER) AS
    -- Declare variables
    ls_machineId            VARCHAR2(50) := NULL;
    ls_operatorId            VARCHAR2(50) := 'ICSDEV';
    ls_errorMsg              VARCHAR2(4000);
    li_tiretypeid               NUMBER;
    li_startvalue              NUMBER;
    li_endvalue               NUMBER;
    li_replacementvalue   NUMBER;
    li_newvalue NUMBER;
    -- Declare cursor
    CURSOR c_subs IS
    SELECT startvalue, endvalue, replacementvalue
    FROM approvedsubstitutions
    WHERE certificationtypeid = pi_CertificationTypeId AND UPPER(field) = UPPER(ps_Field);
    BEGIN
        -- Initialize new value to original value
        li_newvalue := pi_Value;
        -- Get tire type from product table
        SELECT p.tiretypeid INTO li_tiretypeid
        FROM product p
        WHERE p.skuid = pi_SkuId;
        IF li_tiretypeid = 1 THEN  -- All current approved substitutions are only for passenger
            IF pi_CertificationTypeId = 2  OR pi_CertificationTypeId = 3 THEN -- GSO
                OPEN c_subs;
                LOOP
                    FETCH c_subs INTO li_startvalue, li_endvalue, li_replacementvalue;
                    EXIT WHEN c_subs%NOTFOUND;
                    IF pi_Value BETWEEN li_startvalue AND li_endvalue THEN
                        li_newvalue := li_replacementvalue;
                    END IF;
                END LOOP;
                CLOSE c_subs;
            END IF;
        END IF;
        pi_NewValue := li_newvalue;
    EXCEPTION
      WHEN OTHERS THEN
           ls_errorMsg := SQLERRM || ' - GETAPPROVEDSUBSTITUTIONS. An error have ocurred.(when others)';
           APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(
              AS_MACHINEID => ls_machineId,
              AD_OPERATORID => ls_operatorId,
              AD_DATERECORDED => SYSDATE,
              AS_PROCESSNAME =>'  CERTIFICATION_CRUD.GETAPPROVEDSUBSTITUTIONS',
              AX_RECORDDATA    => 'An error have ocurred.(when others)',
              AS_MESSAGECODE => TO_CHAR(SQLCODE),
              AS_MESSAGE       => SQLERRM
            );
            raise_application_error (-20007,ls_errorMsg);
    END GETAPPROVEDSUBSTITUTION;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

  PROCEDURE GET_AuditLogForDate(pc_retCursor out retCursor,pd_ChangeDateTime in date) as
    le_ParametersNull exception;
    pragma exception_init( le_ParametersNull,-20005);
    ls_MACHINEID VARCHAR2(50):=null;
    ls_OPERATORID VARCHAR2(50):='ICSDEV';
    ls_ErrorMsg VARCHAR2(4000);
  begin
        if pd_ChangeDateTime is null then
          raise le_ParametersNull;
        end if;
    Open pc_retCursor FOR
      SELECT CHANGELOGID,
            CHANGEDATETIME,
            CHANGEDBY,
            AREA,
            CHANGEDFILED_ELEMENT,
            OLDVALUE,
            NEWVALUE,
            APPROVALSTATUS,
            Approver
      FROM  CERTIFICATION_AUDIT_LOG
      WHERE CHANGEDATETIME=pd_ChangeDateTime
      order by CHANGEDATETIME desc;
       EXCEPTION
            when le_ParametersNull then
                    ls_ErrorMsg:=  sqlerrm || ' - GET_AuditLogForDate. There are null parameters.';
                    APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(
                        AS_MACHINEID =>  ls_MACHINEID,
                        AD_OPERATORID => ls_OPERATORID,
                        AD_DATERECORDED => sysdate,
                        AS_PROCESSNAME =>'  CERTIFICATION_CRUD.GET_AuditLogForDate',
                        AX_RECORDDATA    => 'pd_ChangeDateTime is null.',
                        AS_MESSAGECODE => to_char(sqlcode),
                        AS_MESSAGE       =>sqlerrm
                      );
                 raise_application_error (-20005,ls_ErrorMsg);
            when others then
                ls_ErrorMsg:=  sqlerrm || ' - GET_AuditLogForDate. An error have ocurred.(when others)';
                APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(
                    AS_MACHINEID =>  ls_MACHINEID,
                    AD_OPERATORID => ls_OPERATORID,
                    AD_DATERECORDED => sysdate,
                    AS_PROCESSNAME =>'  CERTIFICATION_CRUD.GET_AuditLogForDate',
                    AX_RECORDDATA    => 'An error have ocurred.(when others)',
                    AS_MESSAGECODE => to_char(sqlcode),
                    AS_MESSAGE       =>sqlerrm
                  );
                  raise_application_error (-20007,ls_ErrorMsg);
  end GET_AuditLogForDate;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

PROCEDURE GET_AuditLogAfterDate(pc_retCursor out retCursor,pd_ChangeDateTime in date) as
    le_ParametersNull exception;
    pragma exception_init( le_ParametersNull,-20005);
    ls_MACHINEID VARCHAR2(50):=null;
    ls_OPERATORID VARCHAR2(50):='ICSDEV';
    ls_ErrorMsg VARCHAR2(4000);
  begin
        if pd_ChangeDateTime is null then
          raise le_ParametersNull;
        end if;
    Open pc_retCursor FOR
      SELECT CHANGELOGID,
            CHANGEDATETIME,
            CHANGEDBY,
            AREA,
            CHANGEDFILED_ELEMENT,
            OLDVALUE,
            NEWVALUE,
            APPROVALSTATUS,
            Approver,
            Note
      FROM  CERTIFICATION_AUDIT_LOG
      WHERE CHANGEDATETIME >= pd_ChangeDateTime
      order by CHANGEDATETIME desc;
       EXCEPTION
            when le_ParametersNull then
                     ls_ErrorMsg:=  sqlerrm || ' - GET_AuditLogAfterDate. There are null parameters.';
                    APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(
                        AS_MACHINEID =>  ls_MACHINEID,
                        AD_OPERATORID => ls_OPERATORID,
                        AD_DATERECORDED => sysdate,
                        AS_PROCESSNAME =>'  CERTIFICATION_CRUD.GET_AuditLogAfterDate',
                        AX_RECORDDATA    => 'pd_ChangeDateTime is null.',
                        AS_MESSAGECODE => to_char(sqlcode),
                        AS_MESSAGE       =>sqlerrm
                      );
                     raise_application_error (-20005,ls_ErrorMsg);
            when others then
                ls_ErrorMsg:=  sqlerrm || ' - GET_AuditLogAfterDate. An error have ocurred.(when others)';
                APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(
                    AS_MACHINEID =>  ls_MACHINEID,
                    AD_OPERATORID => ls_OPERATORID,
                    AD_DATERECORDED => sysdate,
                    AS_PROCESSNAME =>'  CERTIFICATION_CRUD.GET_AuditLogAfterDate',
                    AX_RECORDDATA    => 'An error have ocurred.(when others)',
                    AS_MESSAGECODE => to_char(sqlcode),
                    AS_MESSAGE       =>sqlerrm
                  );
                 raise_application_error (-20007,ls_ErrorMsg);
  end GET_AuditLogAfterDate;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

  PROCEDURE GET_AuditLogByUser(pc_retCursor out retCursor,ps_ChangedBy in varchar2) as
   le_ParametersNull exception;
    pragma exception_init( le_ParametersNull,-20005);
    ls_MACHINEID VARCHAR2(50):=null;
    ls_OPERATORID VARCHAR2(50):='ICSDEV';
    ls_ErrorMsg VARCHAR2(4000);
  begin
        if ps_ChangedBy is null then
          raise le_ParametersNull;
        end if;
    Open pc_retCursor FOR
      SELECT CHANGELOGID,
            CHANGEDATETIME,
            CHANGEDBY,
            AREA,
            CHANGEDFILED_ELEMENT,
            OLDVALUE,
            NEWVALUE,
            APPROVALSTATUS,
            Approver
      FROM  CERTIFICATION_AUDIT_LOG
      WHERE CHANGEDBY=ps_ChangedBy
      order by CHANGEDATETIME desc;
       EXCEPTION
            when le_ParametersNull then
                   ls_ErrorMsg:=  sqlerrm || ' - GET_AuditLogByUser. There are null parameters.';
                    APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(
                        AS_MACHINEID =>  ls_MACHINEID,
                        AD_OPERATORID => ls_OPERATORID,
                        AD_DATERECORDED => sysdate,
                        AS_PROCESSNAME =>'  CERTIFICATION_CRUD.GET_AuditLogByUser',
                        AX_RECORDDATA    => 'ps_ChangedBy is null.',
                        AS_MESSAGECODE => to_char(sqlcode),
                        AS_MESSAGE       =>sqlerrm
                      );
                  raise_application_error (-20005,ls_ErrorMsg);
            when others then
                ls_ErrorMsg:=  sqlerrm || ' - GET_AuditLogByUser. An error have ocurred.(when others)';
                APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(
                    AS_MACHINEID =>  ls_MACHINEID,
                    AD_OPERATORID => ls_OPERATORID,
                    AD_DATERECORDED => sysdate,
                    AS_PROCESSNAME =>'  CERTIFICATION_CRUD.GET_AuditLogByUser',
                    AX_RECORDDATA    => 'An error have ocurred.(when others)',
                    AS_MESSAGECODE => to_char(sqlcode),
                    AS_MESSAGE       =>sqlerrm
                  );
                  raise_application_error (-20007,ls_ErrorMsg);
  end GET_AuditLogByUser;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

  PROCEDURE GET_AuditLogByFieldChanged(pc_retCursor out retCursor,ps_ChangedFiled_Element in varchar2) as
   le_ParametersNull exception;
    pragma exception_init( le_ParametersNull,-20005);
    ls_MACHINEID VARCHAR2(50):=null;
    ls_OPERATORID VARCHAR2(50):='ICSDEV';
    ls_ErrorMsg VARCHAR2(4000);
  begin
        if ps_ChangedFiled_Element is null then
          raise le_ParametersNull;
        end if;
    Open pc_retCursor FOR
      SELECT CHANGELOGID,
            CHANGEDATETIME,
            CHANGEDBY,
            AREA,
            CHANGEDFILED_ELEMENT,
            OLDVALUE,
            NEWVALUE,
            APPROVALSTATUS,
            Approver
      FROM  CERTIFICATION_AUDIT_LOG
      WHERE CHANGEDFILED_ELEMENT = ps_ChangedFiled_Element
      order by CHANGEDATETIME desc;
       EXCEPTION
           when le_ParametersNull then
                   ls_ErrorMsg:=  sqlerrm || ' - GET_AuditLogByFieldChanged. There are null parameters.';
                    APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(
                        AS_MACHINEID =>  ls_MACHINEID,
                        AD_OPERATORID => ls_OPERATORID,
                        AD_DATERECORDED => sysdate,
                        AS_PROCESSNAME =>'  CERTIFICATION_CRUD.GET_AuditLogByFieldChanged',
                        AX_RECORDDATA    => 'ps_ChangedBy is null.',
                        AS_MESSAGECODE => to_char(sqlcode),
                        AS_MESSAGE       =>sqlerrm
                      );
                  raise_application_error (-20005,ls_ErrorMsg);
            when others then
                ls_ErrorMsg:=  sqlerrm || ' - GET_AuditLogByFieldChanged. An error have ocurred.(when others)';
                APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(
                    AS_MACHINEID =>  ls_MACHINEID,
                    AD_OPERATORID => ls_OPERATORID,
                    AD_DATERECORDED => sysdate,
                    AS_PROCESSNAME =>'  CERTIFICATION_CRUD.GET_AuditLogByFieldChanged',
                    AX_RECORDDATA    => 'An error have ocurred.(when others)',
                    AS_MESSAGECODE => to_char(sqlcode),
                    AS_MESSAGE       =>sqlerrm
                  );
                  raise_application_error (-20007,ls_ErrorMsg);
  end GET_AuditLogByFieldChanged;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

  PROCEDURE GET_AuditLogByArea(pc_retCursor out retCursor,ps_Area in varchar2) as
    le_ParametersNull exception;
    pragma exception_init( le_ParametersNull,-20005);
    ls_MACHINEID VARCHAR2(50):=null;
    ls_OPERATORID VARCHAR2(50):='ICSDEV';
    ls_ErrorMsg VARCHAR2(4000);
  begin
        if ps_Area is null then
          raise le_ParametersNull;
        end if;
    Open pc_retCursor FOR
      SELECT CHANGELOGID,
            CHANGEDATETIME,
            CHANGEDBY,
            AREA,
            CHANGEDFILED_ELEMENT,
            OLDVALUE,
            NEWVALUE,
            APPROVALSTATUS,
            Approver
      FROM  CERTIFICATION_AUDIT_LOG
      WHERE AREA = ps_Area
      order by CHANGEDATETIME desc;
       EXCEPTION
     when le_ParametersNull then
                   ls_ErrorMsg:=  sqlerrm || ' - GET_AuditLogByArea. There are null parameters.';
                    APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(
                        AS_MACHINEID =>  ls_MACHINEID,
                        AD_OPERATORID => ls_OPERATORID,
                        AD_DATERECORDED => sysdate,
                        AS_PROCESSNAME =>'  CERTIFICATION_CRUD.GET_AuditLogByArea',
                        AX_RECORDDATA    => 'ps_ChangedBy is null.',
                        AS_MESSAGECODE => to_char(sqlcode),
                        AS_MESSAGE       =>sqlerrm
                      );
                  raise_application_error (-20005,ls_ErrorMsg);
    when others then
                ls_ErrorMsg:=  sqlerrm || ' - GET_AuditLogByArea. An error have ocurred.(when others)';
                APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(
                    AS_MACHINEID =>  ls_MACHINEID,
                    AD_OPERATORID => ls_OPERATORID,
                    AD_DATERECORDED => sysdate,
                    AS_PROCESSNAME =>'  CERTIFICATION_CRUD.GET_AuditLogByArea',
                    AX_RECORDDATA    => 'An error have ocurred.(when others)',
                    AS_MESSAGECODE => to_char(sqlcode),
                    AS_MESSAGE       =>sqlerrm
                  );
                  raise_application_error (-20007,ls_ErrorMsg);
  end GET_AuditLogByArea;

   PROCEDURE GET_CERTIFICATIONBYBRANDCODE(pc_retCursor out retCursor,ps_Brandcode in  varchar2)as
   --NO LONGER USED JESEITZ 6/20/16
    le_ParametersNull exception;
    pragma exception_init( le_ParametersNull,-20005);
    ls_MACHINEID VARCHAR2(50):=null;
    ls_OPERATORID VARCHAR2(50):='ICSDEV';
    ls_ErrorMsg VARCHAR2(4000);
   begin
        if ps_Brandcode is null then
          raise le_ParametersNull;
        end if;
        open pc_retCursor for
        select
              b.brand_code brandcode,
              p.sku,
              p.SIZESTAMP,
              ce.CertificationTypeId     as CertificationId,
              ce.CertificationTypeName   as CertificationName
        from
              BRAND_DETAILS_MV b inner join  Product p on
                          b.brand_code = p.brandcode
                     inner join  ProductCountry pc on
                          p.skuid = pc.skuid
                     inner join  Country co on
                          pc.countryid = co.countryid
                     inner join  CertificationType ce on
                          co.CertificationTypeId = ce.CertificationTypeId
        where b.brand_code =  ps_Brandcode
        order by p.sku,ce.CertificationTypeName;
        EXCEPTION
     when le_ParametersNull then
                   ls_ErrorMsg:=  sqlerrm || ' - GET_CERTIFICATIONBYBRANDCODE. There are null parameters.';
                    APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(
                        AS_MACHINEID =>  ls_MACHINEID,
                        AD_OPERATORID => ls_OPERATORID,
                        AD_DATERECORDED => sysdate,
                        AS_PROCESSNAME =>'  CERTIFICATION_CRUD.GET_CERTIFICATIONBYBRANDCODE',
                        AX_RECORDDATA    => 'ps_ChangedBy is null.',
                        AS_MESSAGECODE => to_char(sqlcode),
                        AS_MESSAGE       =>sqlerrm
                      );
                  raise_application_error (-20005,ls_ErrorMsg);
    when others then
                ls_ErrorMsg:=  sqlerrm || ' - GET_CERTIFICATIONBYBRANDCODE. An error have ocurred.(when others)';
                APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(
                    AS_MACHINEID =>  ls_MACHINEID,
                    AD_OPERATORID => ls_OPERATORID,
                    AD_DATERECORDED => sysdate,
                    AS_PROCESSNAME =>'  CERTIFICATION_CRUD.GET_CERTIFICATIONBYBRANDCODE',
                    AX_RECORDDATA    => 'An error have ocurred.(when others)',
                    AS_MESSAGECODE => to_char(sqlcode),
                    AS_MESSAGE       =>sqlerrm
                  );
                  raise_application_error (-20007,ls_ErrorMsg);
   END GET_CERTIFICATIONBYBRANDCODE;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

 PROCEDURE GET_CERTIFICATIONSEARCHRESULT(pc_retCursor out retCursor,ps_SearchCriteria in varchar2,ps_SearchType in varchar2, ps_ExtensionNo in varchar2, ps_imarkFamily IN VARCHAR2,ps_BrandLine IN VARCHAR2) as
  /******************************************************************************
  NAME:       GET_CERTIFICATIONSEARCHRESULT
  PURPOSE:
  REVISIONS:
  Ver        Date        Author           Description
  ---------  ----------  ---------------  ------------------------------------
  1.0
  1.1        10/03/2012    Harini        1.Added ps_BrandLine as input paramter.
                                         2.Replace BrandCode with Brand,BrandLine,
                                         Added Matl_Num,SpeedRating,SingLoadIndex,
                                         DualLoadIndex in the select list.
                                         3.Commneted BrandDetails_MV
                                         4.Use Brand instead of Brand code,Material No.
                                         instead of SKU No.PSN  instead of NPR ID No.
                                         in search types
  1.2        11/22/2013  Guru Gangadhar  1. Changed logic so that if extension entered to look for is *,
                                          it returns all skus on all extensions; if an extension is entered,
                                          only gets what was added on that extension. If `H' is entered,
                                          only brings back skus on "highest" extension.
  1.3        01/10/2014   Harini         1. Added CERTIFICATENUMBER,EXTENSION_EN in the select list else clause of
                                          Extension of Certifiation No search
     4.       04.15.2014  jeseitz  in search by Imark in get_certificationsearchresult changed to not use customer function since not applicable for IMARKS
               06/16/2016 jeseitz  changed to use productrequest instead of productcountry
  ******************************************************************************/
  --Exception variables
  le_ParametersNull exception;
  li_ParametersInvalid exception;
  -- link the exception to the error number
  pragma exception_init( le_ParametersNull,-20005);
  pragma exception_init( li_ParametersInvalid,-20006);
  --varible
  ls_MachineId VARCHAR2(50):=null;
  ls_OperatorId VARCHAR2(50):='ICSDEV';
  ls_ErrorMsg varchar2(4000);
  BEGIN
  IF ps_SearchCriteria IS NULL OR ps_SearchType IS NULL THEN
    raise le_ParametersNull;
  END IF;
  IF ps_SearchCriteria = '' OR ps_SearchType = '' THEN
    raise li_ParametersInvalid;
  END IF;
  -- Added as per PRJ3617
  IF ((ps_SearchType = 'Brand') AND (ps_SearchCriteria IS NULL OR ps_BrandLine IS NULL)) THEN
    raise le_ParametersNull;
  END IF;
  IF ps_SearchType = 'Brand' THEN  -- As per PRJ3617,Use Brand instead of Brand code.
    BEGIN
        OPEN pc_retCursor FOR
        SELECT DISTINCT
            --b.brand_code brandcode,
            p.Brand,
            p.Brand_Line,   -- As per PRJ3617,Use Brand and Brand Line as inputs  instead of Brand code.
            P.SKU,
            LPAD(p.Matl_Num,18,0) Matl_Num,
            p.SpeedRating,
            p.SingLoadIndex,
            p.DualLoadIndex, -- As per PRJ3617,Matl_Num,speedrating,SingLoadIndex,dualloadindex should be added for all Search Types in Select Stmt.
            p.sizestamp,
            c.certificationtypeid AS CertificationId,
            ct.certificationtypename AS CertificationName,
            c.certificatenumber,
            p.skuid,
            (
            CASE
                WHEN pr.requeststatus = 'I' THEN 'InProgress'
                WHEN pr.requeststatus = 'A' THEN 'Approved'
                WHEN pr.requeststatus = 'R' THEN 'Requested'
                WHEN pr.requeststatus IS NULL AND pr.skuid <> 0 THEN 'Requested'  --jeseitz 03/23/2015 to distinguish between record with null status and left outer join
                ELSE 'Uncertified'
            END
            ) AS State,
            NVL(ICS_COMMON_FUNCTIONS.GETCUSTOMERBYID(c.customerid), 'N/A') AS Customer
        FROM product p
            --INNER JOIN brand_details_mv b ON b.brand_code = p.brandcode -- Commneted as per PRJ3617
            INNER JOIN productcertificate pc ON p.skuid = pc.skuid
            INNER JOIN certificate c ON pc.certificateid = c.certificateid AND pc.certificationtypeid = c.certificationtypeid
           -- LEFT JOIN productcountry pco ON p.skuid = pco.skuid  AND c.certificationtypeid = pco.certificationtypeid
            LEFT JOIN productrequest pr ON p.skuid = pr.skuid  AND c.certificationtypeid = pr.certificationtypeid
            INNER JOIN certificationtype ct ON c.certificationtypeid = ct.certificationtypeid
        WHERE (UPPER(p.Brand) = UPPER(ps_SearchCriteria) AND UPPER(p.Brand_Line) = UPPER(ps_BrandLine)) -- Added this as per  UPPER(b.brand_code) = UPPER(ps_SearchCriteria)
          AND c.archivedate_cegi IS NULL
        ORDER BY LPAD(p.Matl_Num,18,0), -- As per PRJ3617,Use matl_num instead of SKU
                 P.SKUID, ct.certificationtypename, c.certificatenumber; --JES ADDED SKU, SKUID
    END;
  ELSIF ps_SearchType = 'Material No.' THEN  -- As per PRJ3617,Use Material No. instead of SKU No.
    BEGIN
        OPEN pc_retCursor FOR
        SELECT DISTINCT
            --b.brand_code brandcode,
            p.Brand,
            p.Brand_Line,   -- As per PRJ3617,Use Brand and Brand Line as inputs  instead of Brand code.
            p.sku,
            LPAD(p.Matl_Num,18,0) Matl_Num,
            p.SpeedRating,
            p.SingLoadIndex,
            p.DualLoadIndex, -- As per PRJ3617,Matl_Num,speedrating,SingLoadIndex,dualloadindex should be added for all Search Types in Select Stmt.
            p.sizestamp,
            c.certificationtypeid AS CertificationId,
            ct.certificationtypename AS CertificationName,
            c.certificatenumber,
            p.skuid,
            (
            CASE
                WHEN pr.requeststatus = 'I' THEN 'InProgress'
                WHEN pr.requeststatus = 'A' THEN 'Approved'
                WHEN pr.requeststatus = 'R' THEN 'Requested'
                WHEN pr.requeststatus IS NULL AND Pr.SKUID <> 0 THEN 'Requested' --jeseitz 03/23/2015 to distinguish between record with null status and left outer join
                ELSE 'Uncertified'
            END
            ) AS State,
             NVL(ICS_COMMON_FUNCTIONS.GETCUSTOMERBYID(c.customerid), 'N/A') AS Customer
        FROM product p
            --INNER JOIN brand_details_mv b ON b.brand_code = p.brandcode -- Commented as per PRJ3617,
            INNER JOIN productcertificate pc ON p.skuid = pc.skuid
            INNER JOIN certificate c ON pc.certificateid = c.certificateid AND pc.certificationtypeid = c.certificationtypeid
            --LEFT JOIN productcountry pco ON p.skuid = pco.skuid  AND c.certificationtypeid = pco.certificationtypeid
             LEFT JOIN productrequest pr ON p.skuid = pr.skuid  AND c.certificationtypeid = pr.certificationtypeid
            INNER JOIN certificationtype ct ON c.certificationtypeid = ct.certificationtypeid
        WHERE (UPPER(p.Matl_Num) = UPPER(LPAD(ps_SearchCriteria,18,0)) -- As per PRJ3617, Matl_Num should be added in Where Condition in place of SKU.
                     or UPPER(P.SKU)  = UPPER(TRIM( ps_SearchCriteria)))  -- JESEITZ 12/7/12
       AND c.archivedate_cegi IS NULL
        ORDER BY P.SKUID,ct.certificationtypename, c.certificatenumber; --- jes added skuid
       END;
  elsif ps_SearchType = 'PSN' then   -- As per PRJ3617,Use PSN  instead of NPR ID No..
      Begin
         Open pc_retCursor for
        SELECT DISTINCT
             -- b.brand_code brandcode,
              p.Brand,
              p.Brand_Line,   -- As per PRJ3617,Use Brand and Brand Line as inputs  instead of Brand code.
              p.sku,
              LPAD(p.Matl_Num,18,0) Matl_Num,
              p.SpeedRating,
              p.SingLoadIndex,
              p.DualLoadIndex, -- As per PRJ3617,Matl_Num,speedrating,SingLoadIndex,dualloadindex should be added for all Search Types in Select Stmt.
              p.SIZESTAMP,
              ct.CertificationTypeId     as CertificationId,
              ct.CertificationTypeName   as CertificationName,
              CE.CERTIFICATENUMBER,
              p.skuid,
              (
                CASE
                WHEN pr.RequestStatus  is not null  AND  pr.RequestStatus='I'  THEN 'InProgress'
                WHEN pr.RequestStatus  is not null  AND  pr.RequestStatus='A'  THEN 'Approved'
                WHEN pr.RequestStatus IS NOT NULL AND pr.RequestStatus='R' THEN 'Requested'
                WHEN pr.RequestStatus  is null  AND PR.SKUID <> 0                   THEN 'Requested' --jeseitz 03/23/2015 to distinguish between record with null status and left outer join
                ELSE 'Uncertified'
                END
               ) AS State,
               NVL(ICS_COMMON_FUNCTIONS.GETCUSTOMERBYID(ce.customerid), 'N/A') AS Customer
         FROM  CERTIFICATE ce
                         inner join  productCertificate pce on
                                  pce.certificateid       = ce.certificateid and
                                  pce.certificationtypeid = ce.certificationtypeid
                         inner join  product p  on
                                  pce.skuid = p.skuid
                         inner join  certificationtype ct on
                                  ce.certificationtypeid = ct.certificationtypeid
                         --INNER JOIN  BRAND_DETAILS_MV B ON
                              --    P.BRANDCODE = B.BRAND_CODE -- Commented as per PRJ3617
                         --INNER JOIN  PRODUCTCOUNTRY PC ON
                         --         p.skuid = PC.SKUID and
                         --         ce.certificationtypeid = pc.certificationtypeid
                         INNER JOIN  PRODUCTREQUEST PR ON
                                  p.skuid = PR.SKUID and
                                  ce.certificationtypeid = pr.certificationtypeid
                          LEFT JOIN importer i ON i.importerid = ce.importerid
         WHERE p.PSN = ps_SearchCriteria and -- AS per prj3617,removed to_number() for ps_SearchCriteria
            CE.ARCHIVEDATE_CEGI is null
         ORDER BY LPAD(p.Matl_Num,18,0), -- As per PRJ3617,sku is replaced with matl_num
                  P.SKUID, ct.CertificationTypeName,ce.CertificateNumber;--JES ADDED P.SKUID
      End;
  ELSIF ps_searchtype = 'Certification No.' THEN
    BEGIN
        IF TRIM(ps_ExtensionNo) = '*' THEN
           Open pc_retCursor for
           select distinct
                    ce.certificateid,
                    ct.CertificationTypeName   as CertificationName,
                    CE.CERTIFICATENUMBER,
                    CE.EXTENSION_EN as Extension,
                    p.skuid,
                    --b.brand_code brandcode,
                    p.Brand,
                    p.Brand_Line,   -- As per PRJ3617,Use Brand and Brand Line as inputs  instead of Brand code.
                    P.SKU,
                    LPAD(p.Matl_Num,18,0) Matl_Num,
                    p.SpeedRating,
                    p.SingLoadIndex,
                    p.DualLoadIndex, -- As per PRJ3617,Matl_Num,speedrating,SingLoadIndex,dualloadindex should be added for all Search Types in Select Stmt.
                    p.SIZESTAMP,
                    ct.CertificationTypeId     as CertificationId,
                   (CASE
                    WHEN pr.requeststatus = 'I' THEN 'InProgress'
                    WHEN pr.requeststatus = 'A' THEN 'Approved'
                    WHEN pr.requeststatus = 'R' THEN 'Requested'
                    WHEN pr.requeststatus IS NULL AND pr.skuid <> 0 THEN 'Requested'  --jeseitz 03/23/2015 to distinguish between record with null status and left outer join
                    ELSE 'Uncertified'
                    END) AS State,
                    NVL(ICS_COMMON_FUNCTIONS.GETCUSTOMERBYID(ce.customerid), 'N/A') AS Customer
             FROM  CERTIFICATE ce
                      inner join  productCertificate pce on
                             ce.certificateid       = pce.certificateid and
                             ce.certificationtypeid = pce.certificationtypeid
                       inner join  product p  on
                             pce.skuid = p.skuid
                       --LEFT JOIN productcountry pco ON p.skuid = pco.skuid  AND ce.certificationtypeid = pco.certificationtypeid
                       LEFT JOIN productrequest pr ON p.skuid = pr.skuid  AND ce.certificationtypeid = pr.certificationtypeid
                       inner join  certificationtype ct on
                             ce.certificationtypeid = ct.certificationtypeid
                       --INNER JOIN  BRAND_DETAILS_MV B ON
                        --     P.BRANDCODE = B.BRAND_CODE  -- Commented as per PRJ3617
                       LEFT JOIN importer i ON i.importerid = ce.importerid
             where ( lower(ce.certificatenumber) =lower(ps_SearchCriteria)  or
                        lower(ce.certificatenumber) =replace(lower(trim(ps_SearchCriteria)),'-',' ') or
                         lower(ce.certificatenumber) =replace(lower(trim(ps_SearchCriteria)),' ','-') ) and
                        CE.ARCHIVEDATE_CEGI is null
                        order by LPAD(p.Matl_Num,18,0), -- As per PRJ3617,replaced SKU with Matl_Num
                                 P.SKUID, ct.CertificationTypeName;-- JES ADDED P.SKU,P.SKUID
                                 --jeseitz 1/6/2016
        ELSIF TRIM(ps_ExtensionNo) = 'H' THEN
        Open pc_retCursor for
             select distinct
                   ce.certificateid,
                   ct.CertificationTypeName   as CertificationName,
                   CE.CERTIFICATENUMBER,
                   CE.EXTENSION_EN as Extension,
                   p.skuid,
                   --b.brand_code brandcode,
                   p.Brand,
                   p.Brand_Line,   -- As per PRJ3617,Use Brand and Brand Line as inputs  instead of Brand code.
                   P.SKU,
                   LPAD(p.Matl_Num,18,0) Matl_Num,
                   p.SpeedRating,
                   p.SingLoadIndex,
                   p.DualLoadIndex, -- As per PRJ3617,Matl_Num,speedrating,SingLoadIndex,dualloadindex should be added for all Search Types in Select Stmt.
                   p.SIZESTAMP,
                   ct.CertificationTypeId     as CertificationId,
                   (CASE
                    WHEN pr.requeststatus = 'I' THEN 'InProgress'
                    WHEN pr.requeststatus = 'A' THEN 'Approved'
                    WHEN pr.requeststatus = 'R' THEN 'Requested'
                    WHEN pr.requeststatus IS NULL and pr.skuid <> 0 THEN 'Requested'  --jeseitz 03/23/2015 to distinguish between record with null status and left outer join
                    ELSE 'Uncertified'
                    END) AS State,
                    NVL(ICS_COMMON_FUNCTIONS.GETCUSTOMERBYID(ce.customerid), 'N/A') AS Customer
             FROM  CERTIFICATE ce
                      inner join  productCertificate pce on
                             ce.certificateid       = pce.certificateid and
                             ce.certificationtypeid = pce.certificationtypeid
                       inner join  product p  on
                             pce.skuid = p.skuid
---                       LEFT JOIN productcountry pco ON p.skuid = pco.skuid  AND ce.certificationtypeid = pco.certificationtypeid
                       LEFT JOIN productrequest pr ON p.skuid = pr.skuid  AND ce.certificationtypeid = pr.certificationtypeid
                       inner join  certificationtype ct on
                             ce.certificationtypeid = ct.certificationtypeid
                       --INNER JOIN  BRAND_DETAILS_MV B ON
                        --     P.BRANDCODE = B.BRAND_CODE  -- Commented as per PRJ3617
                       LEFT JOIN importer i ON i.importerid = ce.importerid
             where lower(ce.certificatenumber) =lower(ps_SearchCriteria) and UPPER(ce.mostrecentcert) = 'Y' and
                        CE.ARCHIVEDATE_CEGI is null
                        order by LPAD(p.Matl_Num,18,0), -- As per PRJ3617,replaced SKU with Matl_Num
                        P.SKUID, ct.CertificationTypeName;-- JES ADDED P.SKU,P.SKUID
        ELSE
             Open pc_retCursor for
             select distinct
                   ce.certificateid,
                   ct.CertificationTypeName   as CertificationName,
                    CE.CERTIFICATENUMBER,
                    CE.EXTENSION_EN as Extension,
                    --b.brand_code brandcode,
                    p.skuid,
                    p.Brand,
                    p.Brand_Line,   -- As per PRJ3617,Use Brand and Brand Line as inputs  instead of Brand code.
                    P.SKU,
                    LPAD(p.Matl_Num,18,0) Matl_Num,
                    p.SpeedRating,
                    p.SingLoadIndex,
                    p.DualLoadIndex, -- As per PRJ3617,Matl_Num,speedrating,SingLoadIndex,dualloadindex should be added for all Search Types in Select Stmt.
                    p.SIZESTAMP,
                    ct.CertificationTypeId     as CertificationId,
                   (
            CASE
                WHEN pr.requeststatus = 'I' THEN 'InProgress'
                WHEN pr.requeststatus = 'A' THEN 'Approved'
                WHEN pr.requeststatus = 'R' THEN 'Requested'
                WHEN pr.requeststatus IS NULL and pr.skuid <> 0 THEN 'Requested'  --jeseitz 03/23/2015 to distinguish between record with null status and left outer join
                ELSE 'Uncertified'
            END
            ) AS State,
                    NVL(ICS_COMMON_FUNCTIONS.GETCUSTOMERBYID(ce.customerid), 'N/A') AS Customer
             FROM  CERTIFICATE ce
                      inner join  productCertificate pce on
                             ce.certificateid       = pce.certificateid and
                             ce.certificationtypeid = pce.certificationtypeid
                       inner join  product p  on
                             pce.skuid = p.skuid
                      -- LEFT JOIN productcountry pco ON p.skuid = pco.skuid  AND ce.certificationtypeid = pco.certificationtypeid
                       LEFT JOIN productrequest pr ON p.skuid = pr.skuid  AND ce.certificationtypeid = pr.certificationtypeid
                       inner join  certificationtype ct on
                             ce.certificationtypeid = ct.certificationtypeid
                      -- INNER JOIN  BRAND_DETAILS_MV B ON
                      --       P.BRANDCODE = B.BRAND_CODE   -- Commented as per PRJ3617
                       LEFT JOIN importer i ON i.importerid = ce.importerid
             where lower(ce.certificatenumber) =lower(ps_SearchCriteria)  and LOWER(ce.extension_en) = LOWER(ps_ExtensionNo) and
                        CE.ARCHIVEDATE_CEGI is null;
        END IF;
     end;
  elsif ps_searchtype = 'Batch No.' then
     begin
     Open pc_retCursor for
         select distinct
                --b.brand_code brandcode,
                p.Brand,
                p.Brand_Line,   -- As per PRJ3617,Use Brand and Brand Line as inputs  instead of Brand code.
                p.sku,
                LPAD(p.Matl_Num,18,0) Matl_Num,
                p.SpeedRating,
                p.SingLoadIndex,
                p.DualLoadIndex, -- As per PRJ3617,Matl_Num,speedrating,SingLoadIndex,dualloadindex should be added for all Search Types in Select Stmt.
                p.SIZESTAMP,
                ct.CertificationTypeId     as CertificationId,
                ct.CertificationTypeName   as CertificationName,
                ce.CertificateNumber,
                            p.skuid,
                (  CASE
                  WHEN pr.RequestStatus  is not null  AND  pr.RequestStatus='I'  THEN 'InProgress'
                  WHEN pr.RequestStatus  is not null  AND  pr.RequestStatus='A'  THEN 'Approved'
                  WHEN pr.RequestStatus IS NOT NULL AND pr.RequestStatus='R' THEN 'Requested'
                  WHEN pr.RequestStatus  is null  and pr.skuid <> 0                     THEN 'Requested'  --jeseitz 03/23/2015 to distinguish between record with null status and left outer join
                  ELSE 'Uncertified'
                  END
                 ) AS State ,
                   NVL(ICS_COMMON_FUNCTIONS.GETCUSTOMERBYID(ce.customerid), 'N/A') AS Customer
         FROM  CERTIFICATE ce
                  inner join  productCertificate pce on
                                    ce.certificateid       = pce.certificateid and
                                    ce.certificationtypeid = pce.certificationtypeid
                   inner join  product p  on
                                    pce.skuid = p.skuid
                           inner join  certificationtype ct on
                                    ce.certificationtypeid = ct.certificationtypeid
                         --  INNER JOIN  BRAND_DETAILS_MV B ON
                          --          P.BRANDCODE = B.BRAND_CODE  -- Commented as per PRJ3617
                           --LEFT JOIN  PRODUCTCOUNTRY PC ON
                           --         p.skuid = PC.SKUID and
                           --         ce.certificationtypeid = pc.certificationtypeid
                           LEFT JOIN  PRODUCTREQUEST PR ON
                                    p.skuid = PR.SKUID and
                                    ce.certificationtypeid = pr.certificationtypeid
                           LEFT JOIN importer i ON i.importerid = ce.importerid
         where lower(ce.batchnumber_G) = lower(ps_SearchCriteria) and
                    CE.ARCHIVEDATE_CEGI is null
         order by LPAD(p.Matl_Num,18,0),  --As per PRJ3617,replaced SKU with Matl_Num
                  ct.CertificationTypeName,ce.CertificateNumber;
      end;
  ELSIF ps_searchtype = 'Imark' THEN
    BEGIN
           open PC_RETCURSOR for
            select DISTINCT
                   ce.certificateid,
                    --b.brand_code brandcode,
                    p.Brand,
                    p.Brand_Line,   -- As per PRJ3617,Use Brand and Brand Line as inputs  instead of Brand code.
                    p.sku,
                    LPAD(p.Matl_Num,18,0) Matl_Num,
                    p.SpeedRating,
                    p.SingLoadIndex,
                    p.DualLoadIndex, -- As per PRJ3617,Matl_Num,speedrating,SingLoadIndex,dualloadindex should be added for all Search Types in Select Stmt.
                    p.SIZESTAMP,
                    ct.CertificationTypeId     as CertificationId,
                    ct.CertificationTypeName   as CertificationName,
                    p.skuid,
                   CASE
                     WHEN pr.RequestStatus  is not null  AND  pr.RequestStatus='I'  THEN 'InProgress'
                     WHEN pr.RequestStatus  is not null  AND  pr.RequestStatus='A'  THEN 'Approved'
                     WHEN pr.RequestStatus IS NOT NULL AND pr.RequestStatus='R' THEN 'Requested'
                     WHEN pr.RequestStatus  is null AND pr.SKUID <> 0                    THEN 'Requested'  --jeseitz 03/23/2015 to distinguish between record with null status and left outer join
                     ELSE 'Uncertified'
                  END AS State,
                --- ICS_Common_Functions.GetRequestStatus(ps_SearchCriteria) as State,
                --     NVL(ICS_COMMON_FUNCTIONS.GETCUSTOMERBYID(ce.customerid), 'N/A') AS Customer      -- jeseitz - no customer for Imark, so eliminate function
                'N/A' as Customer
             FROM  CERTIFICATE ce
                      inner join  productCertificate pce on
                             ce.certificateid       = pce.certificateid and
                             ce.certificationtypeid = pce.certificationtypeid
                       inner join  product p  on
                             pce.skuid = p.skuid
                       inner join  certificationtype ct on
                             ce.certificationtypeid = ct.certificationtypeid
                         --INNER JOIN  BRAND_DETAILS_MV B ON
                         --      P.BRANDCODE = B.BRAND_CODE  -- Commented as per PRJ3617
                         ---jeseitz 3/31/14  LEFT JOIN importer i ON i.importerid = ce.importerid
                       inner join product_imark_family pif on
                           pif.skuid  = p.skuid
                           and pif.certificateid = ce.certificateid
                       --LEFT JOIN  PRODUCTCOUNTRY PC ON
                       --             p.skuid = PC.SKUID and
                       --             ce.certificationtypeid = pc.certificationtypeid
                       LEFT JOIN  PRODUCTREQUEST PR ON
                                    p.skuid = PR.SKUID and
                                    ce.certificationtypeid = pr.certificationtypeid
             where lower(ce.certificatenumber) =lower(ps_SearchCriteria) and ---LOWER(ce.mostrecentcert) = 'y' and
                        CE.ARCHIVEDATE_CEGI is null AND UPPER(pif.familyid) = UPPER(ps_imarkFamily)
                       order by LPAD(p.Matl_Num,18,0);


    END;
  /*elsif ps_searchtype = 'Importer' then
     begin
        Open pc_retCursor for
         select
                b.brand_code brandcode,
                p.sku,
                p.SIZESTAMP,
                ct.CertificationTypeId     as CertificationId,
                ct.CertificationTypeName   as CertificationName,
                            p.skuid,
                (
                  CASE
                  WHEN pc.RequestStatus  is not null  AND  pc.RequestStatus='I'  THEN 'InProgress'
                  WHEN pc.RequestStatus  is not null  AND  pc.RequestStatus='A'  THEN 'Approved'
                  WHEN pc.RequestStatus  is null                                 THEN 'Requested'
                  END
                 ) AS State,
                  cu.Customer
        FROM  CERTIFICATE ce
                  inner join  productCertificate pce on
                                    ce.certificateid       = pce.certificateid and
                                    ce.certificationtypeid = pce.certificationtypeid
                   inner join  product p  on
                                    pce.skuid = p.skuid
               inner join  certificationtype ct on
                        ce.certificationtypeid = ct.certificationtypeid
               INNER JOIN  BRAND_DETAILS_MV B ON
                        P.BRANDCODE = B.BRAND_CODE
               INNER JOIN  PRODUCTCOUNTRY PC ON
                        p.skuid = PC.SKUID
               LEFT JOIN Customer cu on
                        cu.skuid = p.skuid
            where lower(ce.importer_n) = lower(ps_SearchCriteria) and
                    CE.ARCHIVEDATE_CEGI is null
            order by p.sku,ct.CertificationTypeName;
     end;*/
  elsif ps_searchtype = 'SimTire' then
    begin
        Open pc_retCursor for
        select * from (
        select  DISTINCT
                  --b.brand_code brandcode,
                  p.Brand,
                  p.Brand_Line,   -- As per PRJ3617,Use Brand and Brand Line as inputs  instead of Brand code.
                  p.sku,
                  LPAD(p.Matl_Num,18,0) Matl_Num,
                  p.SpeedRating,
                  p.SingLoadIndex,
                  p.DualLoadIndex, -- As per PRJ3617,Matl_Num,speedrating,SingLoadIndex,dualloadindex should be added for all Search Types in Select Stmt.
                  p.SIZESTAMP,
                  pce.CertificationTypeId     as CertificationId,
                  ce.CertificationTypeName   as CertificationName,
                  --cer.CertificateNumber,
                              p.skuid,
                  (
                    CASE
                      WHEN pr.RequestStatus  is not null  AND  pr.RequestStatus='I'  THEN 'InProgress'
                      WHEN pr.RequestStatus  is not null  AND  pr.RequestStatus='A'  THEN 'Approved'
                      WHEN pr.RequestStatus IS NOT NULL AND pr.RequestStatus='R' THEN 'Requested'
                      WHEN pr.RequestStatus  is null AND pr.skuid <> 0                     THEN 'Requested'  --jeseitz 03/23/2015 to distinguish between record with null status and left outer join
                      else 'Uncertified'
                    END
                  ) AS State
                  --cu.Customer
              FROM
                    Product p
  --                           Brand_Details_mv b inner join  Product p on
  --                                              b.brand_code = p.brandcode  -- Commented as per PRJ3617
                          --inner join  ProductCountry pc on
                                      --p.skuid = pc.skuid
                          inner join  ProductRequest pr on
                                      p.skuid = pr.skuid
                          --inner join  Country co on
                                      --pc.countryid = co.countryid
                          LEFT join  CertificationType ce on
                                      pr.CertificationTypeId = ce.CertificationTypeId
                          LEFT JOIN  PRODUCTCERTIFICATE PCE ON
                                      P.SKUID = PCE.SKUID
                         --LEFT JOIN  CERTIFICATE cer on
                                    --pce.certificateid       = cer.certificateid and
                                    -- pce.CertificationTypeId = cer.CertificationTypeId
                          --LEFT JOIN importer i ON i.importerid = cer.importerid
              WHERE (p.Matl_Num = LPAD(ps_SearchCriteria,18,0)  -- As per PRJ3617, Matl_Num should be added in Where Condition in place of SKU.
                        or UPPER(P.SKU)  = UPPER(TRIM( ps_SearchCriteria)))  -- JESEITZ 12/7/12
              ORDER BY LPAD(p.Matl_Num,18,0), -- As per PRJ3617,replaced SKU with Matl_Num
                      ce.CertificationTypeName)
         WHERE certificationname IS NOT NULL;
    end;
  else
   raise li_ParametersInvalid;
    pc_retCursor:=null;
  End if ;
  EXCEPTION
    when le_ParametersNull then
          ls_ErrorMsg:=  sqlerrm || ' - GET_CERTIFICATIONSEARCHRESULT. There are null parameters.';
            APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(
                AS_MACHINEID =>  ls_MACHINEID,
                AD_OPERATORID => ls_OPERATORID,
                AD_DATERECORDED => sysdate,
                AS_PROCESSNAME =>'  CERTIFICATION_CRUD.GET_CERTIFICATIONSEARCHRESULT',
                AX_RECORDDATA    => 'ps_SearchCriteria is null or ps_SearchType is null.',
                AS_MESSAGECODE => to_char(sqlcode),
                AS_MESSAGE       =>sqlerrm
              );
              raise_application_error (-20005,ls_ErrorMsg);
     when li_ParametersInvalid then
            ls_ErrorMsg:=  sqlerrm || ' - GET_CERTIFICATIONSEARCHRESULT. There are invalid parameters.';
            APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(
                AS_MACHINEID =>  ls_MACHINEID,
                AD_OPERATORID => ls_OPERATORID,
                AD_DATERECORDED => sysdate,
                AS_PROCESSNAME =>'  CERTIFICATION_CRUD.GET_CERTIFICATIONSEARCHRESULT',
                AX_RECORDDATA    => 'ps_SearchCriteria is invalid or ps_SearchType is invalid.',
                AS_MESSAGECODE => to_char(sqlcode),
                AS_MESSAGE       =>sqlerrm
              );
              raise_application_error (-20006,ls_ErrorMsg);
    when others then
        ls_ErrorMsg:=  sqlerrm || ' - GET_CERTIFICATIONSEARCHRESULT. An error have ocurred.(when others)';
        APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(
            AS_MACHINEID =>  ls_MACHINEID,
            AD_OPERATORID => ls_OPERATORID,
            AD_DATERECORDED => sysdate,
            AS_PROCESSNAME =>'  CERTIFICATION_CRUD.GET_CERTIFICATIONSEARCHRESULT',
            AX_RECORDDATA    => 'An error have ocurred.(when others)',
            AS_MESSAGECODE => to_char(sqlcode),
            AS_MESSAGE       =>sqlerrm
          );
          raise_application_error (-20007,ls_ErrorMsg);
  end GET_CERTIFICATIONSEARCHRESULT;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

   PROCEDURE certificate_update_batch(ps_certificationtypename IN VARCHAR2, ps_temp_batchnumber_g IN VARCHAR2, ps_batchnumber_g IN VARCHAR2, ps_username IN VARCHAR2) AS
   --Exception variables
      le_ParametersNull exception;
      li_ParametersInvalid exception;
      -- link the exception to the error number
      pragma exception_init( le_ParametersNull,-20005);
      pragma exception_init( li_ParametersInvalid,-20006);
      -- Variables
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      li_certificationTypeId integer;
      ls_ErrorMsg varchar2(4000);
      ls_batchnumber_g VARCHAR2(30);
      li_certificateid NUMBER;
      -- Cursor to get the all the certificateids in a batch
      CURSOR c_batchcertids(ls_batchnumber_g VARCHAR2) IS
      SELECT c.certificateid
      FROM certificate c
      WHERE c.batchnumber_g = ls_batchnumber_g AND certificationtypeid = 2;
      BEGIN
            if ps_CertificationTypeName is null or ps_temp_batchnumber_g is null or ps_batchnumber_g is null then
              raise le_ParametersNull;
            end if;
             if ps_CertificationTypeName =  '' or ps_temp_batchnumber_g = '' or ps_batchnumber_g = '' then
              raise li_ParametersInvalid;
            end if;
             if ps_UserName is null or ps_username = '' then
              ls_OperatorId:= ps_UserName;
            end if;
                --Gets the certification id based on the certification name
            SELECT CertificationTypeId into li_certificationTypeId
            FROM  CERTIFICATIONTYPE ce
            WHERE lower(ce.CERTIFICATIONTYPEName)=lower(ps_CertificationTypeName);
            UPDATE certificate
            SET batchnumber_g = ps_batchnumber_g,
                certdatesubmitted = trunc(SYSDATE),
                modifiedon = SYSDATE,
                modifiedby = ps_username
            WHERE certificationtypeid = li_certificationTypeId AND batchnumber_g = ps_temp_batchnumber_g;
            COMMIT;
            ls_batchnumber_g := ps_batchnumber_g;
            OPEN c_batchcertids(ls_batchnumber_g);
            LOOP
                FETCH c_batchcertids INTO li_certificateid;
                EXIT WHEN c_batchcertids%NOTFOUND;
                UPDATE productcertificate
                    SET datesubmitted = trunc(SYSDATE)
                WHERE certificateid = li_certificateid;
            END LOOP;
            CLOSE c_batchcertids;
            COMMIT;
            EXCEPTION
                  when le_ParametersNull then
                      ls_ErrorMsg:=  sqlerrm || '- Certificate_Save. There is at least one parameters null.';
                       APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                          ad_OPERATORID => ls_OperatorId,
                          AD_DATERECORDED  => sysdate,
                          AS_PROCESSNAME   => '  CERTIFICATION_CRUD.Certificate_Save',
                          AX_RECORDDATA    => 'There is at least one parameters null..',
                          AS_MESSAGECODE   => to_char(sqlcode),
                          AS_MESSAGE       => ls_ErrorMsg);
                           raise_application_error (-20005,ls_ErrorMsg);
                    when li_ParametersInvalid then
                         ls_ErrorMsg:=  sqlerrm || '- Certificate_Save. There is at least one parameters is invalid.';
                              APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(
                                  AS_MACHINEID =>  ls_MACHINEID,
                                  AD_OPERATORID => ls_OPERATORID,
                                  AD_DATERECORDED => sysdate,
                                  AS_PROCESSNAME =>'  CERTIFICATION_CRUD.Certificate_Save',
                                  AX_RECORDDATA    => 'ps_SearchCriteria is invalid or ps_SearchType is invalid.',
                                  AS_MESSAGECODE => to_char(sqlcode),
                                  AS_MESSAGE       =>sqlerrm
                                );
                    raise_application_error (-20006,ls_ErrorMsg);
                   when others then
                        ls_ErrorMsg:=  sqlerrm || '- Certificate_Save. An error have ocurred.(when others)';
                         APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                                ad_OPERATORID => ls_OperatorId,
                                AD_DATERECORDED  => sysdate,
                                AS_PROCESSNAME   =>'  CERTIFICATION_CRUD.Certificate_Save',
                                AX_RECORDDATA    => 'An error have ocurred.(when others)',
                                AS_MESSAGECODE   => to_char(sqlcode),
                                AS_MESSAGE       =>ls_ErrorMsg);
                     raise_application_error (-20007,ls_ErrorMsg);
      END certificate_update_batch;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

    PROCEDURE Certificate_Save( pi_RetId                      out number,
                                pi_CertificateID              in  number,
                                PI_SKUID                      in  number,
                                ps_Matl_Num                   in  varchar2,
                                ps_Remove_Matl_Num            IN  VARCHAR2,
                                ps_CertificationTypeName      in  varchar2,
                                ps_CERTIFICATENUMBER          in  varchar2,
                                pd_certdatesubmitted          IN  DATE,
                                pd_certdateapproved_cegi      IN  DATE,
                                pd_DATESUBMITED               in  Date,
                                pc_ACTIVESTATUS               in  varchar2,
                                pd_DATEASSIGNED_EGI           in  Date,
                                pd_DateApproved_CEGI          in  Date,
                                pc_RENEWALREQUIRED_CGIN       in  varchar2,
                                ps_JOBREPORTNUMBER_CEN        in  varchar2,
                                ps_EXTENSION_EN               in  varchar2,
                                ps_SUPPLEMENTALMOLDSTAMPING_E in  varchar2,
                                ps_EMARKREFERENCE_I           in  varchar2,
                                pd_EXPIRYDATE_I               in  Date,
                                ps_FAMILY_I                   in  varchar2,
                                ps_Family_Desc                IN  VARCHAR2,
                                ps_PRODUCTLOCATION            in  varchar2,
                                ps_COUNTRYOFMANUFACTURE_N     in  varchar2,
                                ps_addnewCustomer             IN  VARCHAR2,
                                ps_actSigreq                  IN  VARCHAR2,
                                pi_CUSTOMERID                 IN  NUMBER,
                                ps_CUSTOMER_N                 IN  VARCHAR2,
                                ps_CUSTOMERADDRESS_N          IN  VARCHAR2,
                                ps_CUSTOMERSPECIFIC_N         in  varchar2,
                                ps_addnewImporter             IN  VARCHAR2,
                                pi_IMPORTERID                 IN  NUMBER,
                                ps_IMPORTER_N                 IN  VARCHAR2,
                                ps_IMPORTERADDRESS_N          IN  VARCHAR2,
                                ps_IMPORTERREPRESENTATIVE_N   IN  VARCHAR2,
                                ps_COUNTRYLOCATION_N          in  varchar2,
                                ps_BATCHNUMBER_G              in  varchar2,
                                ps_COMPANYNAME                IN  VARCHAR2,
                                ps_UserName                   in  varchar2,
                                ps_Mold_Changed               IN  VARCHAR2,     -- JBH_2.00
                                pd_Oper_Date_Approved         IN  DATE  ,        -- JBH_2.00
                                ps_Additional_Info            in varchar2              -- jeseitz 10/29/2016
                                ) as
/******************************************************************************
   NAME:       Certificate_Save
   PURPOSE:
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0
   1.1        10/03/2012    Harini         1.Replaced ps_SKU with ps_Matl_Num.
   1.2        10/24/2013    Harini         1. Added ps_Family_Desc as new parameter
                                          and updated the logic whiile updating the product table
   1.3        11/18/2013   Guru Gangadhar  1.GSO is only certificate type that will allow the certificate
                                            to be renamed. Other certificate types can be renamed through
                                            the maintenance functions.
   1.4        01/10/2014   Harini          1. Comment the call to ProductCountry_Save and replace that with
                                            delete the record from Productcountry and call ProductCertification_Save
   1.5        01/22/2014   Harini          1.Use pi_CertificateId instead of li_certificateid while updating the
                                            ProductCertificate table and while assigning the RetId field as
                                            li_CertificateId is not filled.
   2.00       09/10/2014   Joe Hill        Added update of Mold Changed Flag and Operations Approval Date
                                            fields in the routines that update the PRODUCTCERTIFICATE table.
******************************************************************************/
    --Exception variables
      le_ParametersNull exception;
      li_ParametersInvalid exception;
      -- link the exception to the error number
      pragma exception_init( le_ParametersNull,-20005);
      pragma exception_init( li_ParametersInvalid,-20006);
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      li_certificationTypeId integer;
      li_TotalSkuFound integer;
      lc_Requeststatus char(1);
      li_certificateId NUMBER;
      li_newcertificateId NUMBER;
      ls_extensionNumber VARCHAR2(30);
      ld_dateRemoved DATE;
      li_certificateFound NUMBER;
      li_existingcert NUMBER;
      ls_existingcertnumber VARCHAR2(30);
      li_skuFound NUMBER;
      li_oldSkuid product.skuid%TYPE;
      ld_dateapproved productcertificate.dateapproved_cegi%TYPE;
      ld_dateassigned productcertificate.dateassigned_egi%TYPE;
      ld_datesubmitted productcertificate.datesubmitted%TYPE;
      li_ImporterID NUMBER;
      li_CustomerID NUMBER;
      li_skuId NUMBER;
      ln_newcertcount number;
      ln_newcertid number;
      ln_ErrorNum NUMBER;

      -- Cursor to get the SKUID's attached to a specific certificate ID where dateremoved IS NOT NULL
--xx JBH_2.00 - c_ProdIds not used in certificate_save
--xx    CURSOR  c_prodIds(li_certificateId NUMBER) IS
--xx            SELECT  pc.skuid,
--xx                    pc.dateapproved_cegi,
--xx                    pc.dateassigned_egi,
--xx                    pc.datesubmitted
--xx            FROM    certificate c
--xx                    INNER JOIN
--xx                    productcertificate pc
--xx                    ON  c.certificateid = pc.certificateid AND
--xx                        c.certificationtypeid = pc.certificationtypeid
--xx            WHERE   c.certificateid = li_certificateId AND
--xx                    pc.dateremoved IS NULL;

    -- Cusor to get the SKUID's attached to a specific certificate ID
    --CURSOR c_prodcert(li_certificateId NUMBER) IS
    --SELECT pc.skuid
    --FROM productcertificate pc
    --WHERE pc.certificateid = li_certificateId;

    CURSOR  c_prodcert(ls_certificatenumber varchar2)  IS
            SELECT  pc.skuid
            FROM    productcertificate pc,
                    certificate c
            WHERE   c.certificatenumber = ls_certificatenumber AND
                    pc.certificateid = c.certificateId AND
                    pc.dateremoved IS NULL;

  BEGIN

      IF ps_Matl_Num IS NULL OR ps_certificationtypename IS NULL THEN -- As per PRJ3617, replaced ps_SKU with Matl_Num
          RAISE le_parametersnull;
      END IF;

      IF ps_Matl_Num = '' OR ps_certificationtypename = '' THEN  -- As per PRJ3617, replaced ps_SKU with Matl_Num
          RAISE li_parametersinvalid;
      END IF;

      IF ps_username IS NOT NULL AND ps_username <> '' THEN
          ls_operatorid := ps_username;
      END IF;

  --  Gets the certification id based on the certification name
      SELECT  certificationtypeid
      INTO    li_certificationtypeid
      FROM    certificationtype ct
      WHERE   LOWER(ct.certificationtypename) = LOWER(ps_certificationtypename);

      IF  li_certificationtypeid = 2 then

      --  We need to determine if we are just updating the certificate number of an existing certificate
          SELECT  COUNT(*)
          INTO    li_existingcert
          FROM    certificate
          WHERE   certificateid = pi_certificateid;

          IF  li_existingcert > 0 THEN
              SELECT  certificatenumber
              INTO    ls_existingcertnumber
              FROM    certificate
              WHERE   certificateid = pi_certificateid;

              IF  UPPER(ls_existingcertnumber) <> UPPER(ps_certificatenumber) THEN

              --  We want to change the  certificate number
              --  jes 9/5/12 check to make sure we don't already have a certificate with the same number we passed in.
                  SELECT  COUNT(*)
                  into    ln_newcertcount
                  FROM    CERTIFICATE
                  WHERE   CERTIFICATENUMBER = ps_certificatenumber AND
                          certificationtypeid = li_certificationTypeId; -- added certificationtype

                  if  ln_newcertcount = 0  then

                  --- this certificate does not already exists -- ok to add - else will have to remove sku and add it.
                      UPDATE  certificate
                      SET     certificatenumber = ps_certificatenumber
                      WHERE   certificateid = pi_certificateid;

                      COMMIT;

                  END IF;
              END IF;
          end if;
      end if;

      IF  li_certificationTypeId <> 3 THEN
          li_ImporterID := NULL;
          li_CustomerID := NULL;
      ELSE
      --  We have a NOM certificate
          ics_crud.manage_importer( ps_addnewimporter,
                                    pi_importerid,
                                    ps_importer_n,
                                    ps_importeraddress_n,
                                    ps_importerrepresentative_n,
                                    ps_countrylocation_n,
                                    li_importerid);

          ics_crud.manage_customer( ps_addnewcustomer,
                                    pi_customerid,
                                    ps_customer_n,
                                    ps_customeraddress_n,
                                    ps_actsigreq,
                                    li_customerid);
      END IF;

  --  No change to extension so start by updating certificate
      UPDATE  CERTIFICATE
      SET
              ACTIVESTATUS                = lower(pc_ACTIVESTATUS),
              RENEWALREQUIRED_CGIN        = lower(pc_RENEWALREQUIRED_CGIN) ,
              JOBREPORTNUMBER_CEN         = ps_JOBREPORTNUMBER_CEN,
              EXTENSION_EN                = ps_EXTENSION_EN,
              SUPPLEMENTALMOLDSTAMPING_E  = ps_SUPPLEMENTALMOLDSTAMPING_E,
              EXPIRYDATE_I                = pd_EXPIRYDATE_I,
              PRODUCTLOCATION             = ps_PRODUCTLOCATION,
              COUNTRYOFMANUFACTURE_N      = ps_COUNTRYOFMANUFACTURE_N,
              CUSTOMERID                  = li_CUSTOMERID,
              CUSTOMERSPECIFIC_N          = lower(ps_CUSTOMERSPECIFIC_N),
              IMPORTERID                  = li_IMPORTERID,
              BATCHNUMBER_G               = ps_BATCHNUMBER_G,
              MODIFIEDON                  = SYSDATE,
              MODIFIEDBY                  = ls_OperatorId,
              certificatenumber           = CASE li_certificationTypeId
                                            WHEN 6 THEN ps_certificatenumber
                                            ELSE UPPER(ps_CertificateNumber)
                                            END,
              certdatesubmitted           = pd_certdatesubmitted,
              certdateapproved            = pd_certdateapproved_cegi,
              COMPANYNAME                 = ps_COMPANYNAME
      WHERE
              CertificationTypeId = li_certificationTypeId And
              CERTIFICATEID       = pi_CertificateID ;

  --  ECE30/54 - If Certificate has dateapproved then populate ECE-Reference #
      IF  li_certificationTypeId = 1  AND
          pd_certdateapproved_cegi  IS NOT NULL THEN

      --  Open cursor to get skus on previous extension
          OPEN c_prodcert(upper(ps_CertificateNumber));

      --  Use the cursor to loop through SKUs
          LOOP

              FETCH c_prodcert
              INTO  li_skuId;

              EXIT  WHEN c_prodcert%NOTFOUND;

              UPDATE  product
              SET     emarkreference_i = upper(ps_CERTIFICATENUMBER)
              WHERE   skuid = li_skuId;

          END LOOP;

          CLOSE c_prodcert;

      END IF;

  --  Modified as per Defect 12385
      IF  li_certificationTypeId = 1  AND
          pd_dateapproved_cegi  IS NOT NULL THEN

          UPDATE  product
          SET     emarkreference_i = upper(ps_CERTIFICATENUMBER)
          WHERE   skuid = pi_skuId;

      End IF;

      IF  ps_Remove_Matl_Num = 'y' THEN
          ld_dateremoved := TO_DATE(TO_CHAR(SYSDATE, 'mm/dd/yyyy'), 'mm/dd/yyyy');
      ELSE
          ld_dateremoved := NULL;
      END IF;

            -- ECE 30/54
--            IF li_certificationTypeId = 1 or li_certificationTypeId = 6 THEN  -- changed for 1 and 6 so that
--                IF ld_dateremoved IS NOT NULL THEN
--                    DELETE FROM productcertificate
--                    WHERE skuid = pi_skuid AND certificationtypeid = li_certificationTypeId AND certificateid = li_certificateid;
--                ELSE
--                    UPDATE productcertificate
--                    SET dateassigned_egi = pd_dateassigned_egi,
--                        dateapproved_cegi = pd_dateapproved_cegi,
--                        datesubmitted = pd_datesubmited,
--                        dateremoved = ld_dateremoved
--                    WHERE skuid = pi_skuid AND certificationtypeid = li_certificationTypeId AND certificateid = li_certificateid;
--                END IF;
--            ELSE

      UPDATE  productcertificate
      SET     dateassigned_egi    = COALESCE(pd_dateassigned_egi, dateassigned_egi),
              dateapproved_cegi   = pd_dateapproved_cegi,
              datesubmitted       = DECODE(li_certificationTypeId, 3, pd_certdatesubmitted, pd_datesubmited),
              dateremoved         = ld_dateremoved,
              MODIFIEDON          = SYSDATE,
              MODIFIEDBY          = ls_OperatorId,                              -- JBH_2.00
              MOLD_CHANGED        = ps_Mold_Changed,                            -- JBH_2.00
              OPER_DATE_APPROVED  = pd_Oper_Date_Approved   ,                    -- JBH_2.00
              ADDITIONAL_INFO = ps_Additional_Info
      WHERE   skuid = pi_skuid AND
              certificationtypeid = li_certificationTypeId AND
              certificateid = pi_certificateid;

--            END IF;

  --  If Imark certificate then update Family and E-Mark Reference for current SKU
      IF  li_certificationTypeId = 4 THEN

          UPDATE  product
          SET
                  emarkreference_i  = ps_emarkreference_i,
                  MODIFIEDON        = SYSDATE,
                  MODIFIEDBY        = ls_OperatorId
          WHERE   skuid = pi_skuId;


          UPDATE  product_imark_family  -- jeseitz 4/4/16
          SET     familyid            = ps_family_i,
                  Imark             = ps_Family_Desc,
                  --emarkreference_i  = ps_emarkreference_i,
                  MODIFIEDON        = SYSDATE,
                  MODIFIEDBY        = ls_OperatorId
          WHERE   skuid = pi_skuId
                        and certificateid = pi_certificateid;

      END IF;
                    -- As per PRJ3617, Commented this block and added the calling of ProductCountry_Save procedure
                  /*  -- Update request statuses for product country update
                    IF li_certificationTypeId = 3 AND pd_certdatesubmitted IS NOT NULL THEN
                        lc_requestStatus := 'A';
                    ELSIF li_certificationTypeId <> 3 AND pd_dateapproved_cegi IS NOT NULL THEN
                        lc_requestStatus := 'A';
                    ELSE
                        lc_Requeststatus := 'I';
                    END IF;
                    UPDATE PRODUCTCOUNTRY SET
                             CERTIFICATIONTYPEID = li_certificationTypeId,
                             REQUESTSTATUS = lc_Requeststatus
                    WHERE certificationtypeid = li_certificationTypeId and SKUID = pi_skuid and
                          countryid in ( select co.countryid
                                         from CertificationType ct inner join Country co  on
                                                        ct.certificationTypeId = co.certificationTypeId
                                                   inner join productcountry pc on
                                                        co.countryid = pc.countryid
                                          where  ct.certificationTypeId = li_certificationTypeId );*/
                     --ICS_CRUD.ProductCountry_Save('N',ps_Matl_Num, li_certificationTypeId, pi_skuid);

      DELETE
      FROM    ics.productrequest
      WHERE   certificationtypeid = li_certificationtypeid
              AND skuid = pi_skuid;

      COMMIT;

      ICS_CRUD.ProductCertification_Save (li_certificationtypeid,
                                          pi_skuid,
                                          ln_ErrorNum);

  --  Return the new certificate id
      pi_RetId:=   pi_certificateId;

  --  For Imark update SKU date submitted for the Imark Conformity Report
      IF li_certificationTypeId = 4 THEN
         ICS_CRUD.IMARKCONFORMITYUPDATE(pd_certdatesubmitted);
      END IF;

      COMMIT;

  EXCEPTION

                  when le_ParametersNull then
                      ls_ErrorMsg:=  sqlerrm || '- Certificate_Save. There is at least one parameters null.';
                       APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                          ad_OPERATORID => ls_OperatorId,
                          AD_DATERECORDED  => sysdate,
                          AS_PROCESSNAME   => '  CERTIFICATION_CRUD.Certificate_Save',
                          AX_RECORDDATA    => 'There is at least one parameters null..',
                          AS_MESSAGECODE   => to_char(sqlcode),
                          AS_MESSAGE       => ls_ErrorMsg);
                           raise_application_error (-20005,ls_ErrorMsg);

                    when li_ParametersInvalid then
                         ls_ErrorMsg:=  sqlerrm || '- Certificate_Save. There is at least one parameters is invalid.';
                              APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(
                                  AS_MACHINEID =>  ls_MACHINEID,
                                  AD_OPERATORID => ls_OPERATORID,
                                  AD_DATERECORDED => sysdate,
                                  AS_PROCESSNAME =>'  CERTIFICATION_CRUD.Certificate_Save',
                                  AX_RECORDDATA    => 'ps_SearchCriteria is invalid or ps_SearchType is invalid.',
                                  AS_MESSAGECODE => to_char(sqlcode),
                                  AS_MESSAGE       =>sqlerrm
                                );
                    raise_application_error (-20006,ls_ErrorMsg);

                   when others then
                        ls_ErrorMsg:=  sqlerrm || '- Certificate_Save. An error have ocurred.(when others)';
                         APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                                ad_OPERATORID => ls_OperatorId,
                                AD_DATERECORDED  => sysdate,
                                AS_PROCESSNAME   =>'  CERTIFICATION_CRUD.Certificate_Save',
                                AX_RECORDDATA    => 'An error have ocurred.(when others)',
                                AS_MESSAGECODE   => to_char(sqlcode),
                                AS_MESSAGE       =>ls_ErrorMsg);
                     raise_application_error (-20007,ls_ErrorMsg);

  End Certificate_Save;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

    PROCEDURE GetCertificatesInfo(pc_retCursor            out retCursor,
                                  ps_certificationNumber  in  varchar2,
                                  ps_extensionNo          in  varchar2,
                                  pi_certificationTypeID  in  number,
                                  pi_SKUId                in  number,
                                  ps_TRExists             out varchar2) as
  /******************************************************************************
   NAME:       GetCertificatesInfo
   PURPOSE:
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0
   1.1        10/02/2012    Harini         1.Added Matl_Num in the select list
                                            wherever SKU is found
   1.2        03/04/2013    Venkat         1.Added product discontinueddate and TPN
                                             to the output cursor
   1.3        03/08/2013    Krishna         Replaced BrandDesc with Brand and Brandline
   1.4        10/22/2013    Harini         1. Retrieving p.Imark value from product table
                                            in all the queries.
   1.5        11/26/2013    Guru           1.Added else for ps_Extension =* to handle if the
                                            input ps_Extension ='H' is given
      6.        04/15/2014  jeseitz  getcertificatesinfo - Imark part of IF clause was not getting by SKUID - need to be able to get different data for different
                                                speedratings of same material.
   2.00       09/10/2014   Joe Hill        Added Mold Changed Flag and Operations Approval Date
                                            fields from the PRODUCTCERTIFICATE table to the cursor
                                            returned to the source program
                10/29/2016  jeseitz  added Additional_Info fields from the PRODUCTCERTIFICATE table to the cursor returned to the source program
******************************************************************************/
     --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      ls_CertificateNumber  CERTIFICATE.CERTIFICATENUMBER%type;
      ls_TRExists varchar2(1);
      li_TotalTR number;

   begin
        if  pi_certificationTypeID is null or pi_SKUId is null then
            raise li_ParametersAreNull;
        end if;

        IF  pi_certificationTypeID = 4 THEN
            IF  TRIM(ps_extensionNo) = '*' THEN
                OPEN pc_retCursor FOR
                SELECT
                        c.certificateid,
                        c.certificationtypeid,
                        pc.skuid,
                        c.certificatenumber,
                        pc.datesubmitted,
                        c.activestatus,
                        pc.dateassigned_egi,
                        pc.dateapproved_cegi,
                        c.renewalrequired_cgin,
                        c.jobreportnumber_cen,
                        c.extension_en,
                        c.supplementalmoldstamping_e,
                        c.expirydate_i,
                        c.productlocation,
                        c.countryofmanufacture_n,
                        c.customerid,
                        cu.signatureind,
                        cu.customer,
                        cu.customeraddress,
                        c.customerspecific_n,
                        c.importerid,
                        i.importer,
                        i.importeraddress,
                        i.importerrepresentative,
                        i.countrylocation,
                        c.batchnumber_g,
                        ct.certificationtypename,
                        pc.dateremoved,
                        p.emarkreference_i,
                        pif.familyid family,
                        P.SKU,
                        LPAD(p.Matl_Num,18,0) Matl_Num,  -- Added as per PRJ3617
                        c.certdatesubmitted,
                        c.certdateapproved,
                        c.companyname,
                        p.sizestamp,
                        p.singloadindex,
                        p.dualloadindex,
                        p.speedrating,
                        p.brand||' '||p.brand_line as branddesc,
                        p.tubelessyn,
                        p.discontinueddate,
                        p.TPN,
                        pif.Imark AS FamilyDesc,                                  -- JBH_2.00
                        pc.mold_changed,                                        -- JBH_2.00
                        pc.oper_date_approved ,                                  -- JBH_2.00
                        pc.additional_info                                        --jeseitz 10/29/2016
                FROM    product p
                        INNER JOIN  productcertificate pc
                                    ON  p.skuid = pc.skuid
                        INNER JOIN  CERTIFICATE c
                                    ON  pc.certificateid = c.certificateid AND
                                        pc.certificationtypeid = c.certificationtypeid
                        INNER JOIN  certificationtype ct
                                    ON  c.certificationtypeid = ct.certificationtypeid
                        INNER JOIN PRODUCT_IMARK_FAMILY PIF
                                    ON PIF.SKUID = P.SKUID
                                    AND PIF.CERTIFICATEID = C.CERTIFICATEID
                        LEFT JOIN   importer i
                                    ON  i.importerid = c.importerid
                        LEFT JOIN   customer cu
                                    ON  cu.customerid = c.customerid
                 WHERE  c.certificationtypeid = pi_certificationTypeID AND
                        LOWER(c.certificatenumber) = LOWER(ps_certificationNumber) AND
                        PC.SKUID =   pi_SKUId  ;  -- jeseitz 4/15/2014 -- added skuid

            Elsif TRIM(ps_extensionNo) = 'H' THEN
                OPEN    pc_retCursor FOR
                SELECT
                        c.certificateid,
                        c.certificationtypeid,
                        pc.skuid,
                        c.certificatenumber,
                        pc.datesubmitted,
                        c.activestatus,
                        pc.dateassigned_egi,
                        pc.dateapproved_cegi,
                        c.renewalrequired_cgin,
                        c.jobreportnumber_cen,
                        c.extension_en,
                        c.supplementalmoldstamping_e,
                        c.expirydate_i,
                        c.productlocation,
                        c.countryofmanufacture_n,
                        c.customerid,
                        cu.signatureind,
                        cu.customer,
                        cu.customeraddress,
                        c.customerspecific_n,
                        c.importerid,
                        i.importer,
                        i.importeraddress,
                        i.importerrepresentative,
                        i.countrylocation,
                        c.batchnumber_g,
                        ct.certificationtypename,
                        pc.dateremoved,
                        p.emarkreference_i,
                        p.family,
                        P.SKU,
                        LPAD(p.Matl_Num,18,0) Matl_Num,  -- Added as per PRJ3617
                        c.certdatesubmitted,
                        c.certdateapproved,
                        c.companyname,
                        p.sizestamp,
                        p.singloadindex,
                        p.dualloadindex,
                        p.speedrating,
                        p.brand||' '||p.brand_line as branddesc,
                        p.tubelessyn,
                        p.discontinueddate,
                        p.TPN,
                        p.Imark AS FamilyDesc,                                  -- JBH_2.00
                        pc.mold_changed,                                        -- JBH_2.00
                        pc.oper_date_approved ,                                  -- JBH_2.00
                        PC.ADDITIONAL_INFO                                   -- jeseitz 10/29/2016
                FROM    product p
                        INNER JOIN  productcertificate pc
                                    ON  p.skuid = pc.skuid
                        INNER JOIN  CERTIFICATE c
                                    ON  pc.certificateid = c.certificateid AND
                                        pc.certificationtypeid = c.certificationtypeid
                        INNER JOIN  certificationtype ct
                                    ON  c.certificationtypeid = ct.certificationtypeid
                        LEFT JOIN   importer i
                                    ON  i.importerid = c.importerid
                        LEFT JOIN   customer cu
                                    ON  cu.customerid = c.customerid
                WHERE   c.certificationtypeid = pi_certificationTypeID AND
                        LOWER(c.certificatenumber) = LOWER(ps_certificationNumber) AND
                        LOWER(c.mostrecentcert) = 'y' AND
                        PC.SKUID =   pi_SKUId ;-- jeseitz 4/15/2014 -- added skuid
            ELSE
                OPEN    pc_retCursor FOR
                SELECT
                        c.certificateid,
                        c.certificationtypeid,
                        pc.skuid,
                        c.certificatenumber,
                        pc.datesubmitted,
                        c.activestatus,
                        pc.dateassigned_egi,
                        pc.dateapproved_cegi,
                        c.renewalrequired_cgin,
                        c.jobreportnumber_cen,
                        c.extension_en,
                        c.supplementalmoldstamping_e,
                        c.expirydate_i,
                        c.productlocation,
                        c.countryofmanufacture_n,
                        c.customerid,
                        cu.signatureind,
                        cu.customer,
                        cu.customeraddress,
                        c.customerspecific_n,
                        c.importerid,
                        i.importer,
                        i.importeraddress,
                        i.importerrepresentative,
                        i.countrylocation,
                        c.batchnumber_g,
                        ct.certificationtypename,
                        pc.dateremoved,
                        p.emarkreference_i,
                        pif.familyid family,
                        p.sku,
                        LPAD(p.Matl_Num,18,0) Matl_Num,  -- Added as per PRJ3617
                        c.certdatesubmitted,
                        c.certdateapproved,
                        c.companyname,
                        p.sizestamp,
                        p.singloadindex,
                        p.dualloadindex,
                        p.speedrating,
                        p.brand||' '||p.brand_line as branddesc,
                        p.tubelessyn,
                        p.discontinueddate,
                        p.TPN,
                        pif.Imark AS FamilyDesc,                                  -- JBH_2.00
                        pc.mold_changed,                                        -- JBH_2.00
                        pc.oper_date_approved,                                   -- JBH_2.00
                        pc.additional_info                                         --jeseitz 10/29/2016
                FROM    product p
                        INNER JOIN  productcertificate pc
                                    ON  p.skuid = pc.skuid
                        INNER JOIN  CERTIFICATE c
                                    ON  pc.certificateid = c.certificateid AND
                                        pc.certificationtypeid = c.certificationtypeid
                        INNER JOIN  certificationtype ct
                                    ON  c.certificationtypeid = ct.certificationtypeid
                        LEFT JOIN PRODUCT_IMARK_FAMILY PIF
                                    ON PIF.SKUID = P.SKUID
                                    AND PIF.CERTIFICATEID = C.CERTIFICATEID
                        LEFT JOIN   importer i
                                    ON  i.importerid = c.importerid
                        LEFT JOIN   customer cu
                                    ON  cu.customerid = c.customerid
                WHERE   c.certificationtypeid = pi_certificationTypeID AND
                        LOWER(c.certificatenumber) = LOWER(ps_certificationNumber) AND
                        LOWER(c.extension_en) = LOWER(ps_extensionNo) AND
                        PC.SKUID =   pi_SKUId ; -- jeseitz 4/15/2014 -- added skuid
            END IF;
        ELSE
            IF  TRIM(ps_extensionNo) = '*' THEN
                OPEN    pc_retCursor FOR
                SELECT  p.skuid,
                        c.*,
                        pc.dateassigned_egi,
                        pc.datesubmitted,
                        pc.dateapproved_cegi,
                        pc.dateremoved,
                        ct.certificationtypename,
                        p.sku,
                        LPAD(p.Matl_Num,18,0) Matl_Num, -- Added as per PRJ3617
                        c.certdatesubmitted,
                        c.certdateapproved,
                        i.importer,
                        i.importeraddress,
                        i.importerrepresentative,
                        i.countrylocation,
                        cu.signatureind,
                        cu.customer,
                        cu.customeraddress,
                        p.sizestamp,
                        p.singloadindex,
                        p.dualloadindex,
                        p.speedrating,
                        p.brand||' '||p.brand_line as branddesc,
                        p.tubelessyn,
                        p.discontinueddate,
                        p.TPN,
                        pif.Imark AS FamilyDesc,                                  -- JBH_2.00
                        pc.mold_changed,                                        -- JBH_2.00
                        pc.oper_date_approved ,                                  -- JBH_2.00
                        PC.ADDITIONAL_INFO                                   -- jeseitz 10/29/2016
                FROM    product p
                        INNER JOIN  productcertificate pc
                                    ON  p.skuid = pc.skuid
                        INNER JOIN  certificate c
                                    on  pc.certificateid = c.certificateid AND
                                        pc.certificationtypeid = c.certificationtypeid
                        INNER JOIN  certificationtype ct
                                    ON  c.certificationtypeid = ct.certificationtypeid
                        left join product_imark_family pif
                                    on pif.certificateid = c.certificateid
                                    and pif.skuid = pc.skuid
                        LEFT JOIN   importer i
                                    ON  i.importerid = c.importerid
                        LEFT JOIN   customer cu
                                    ON  cu.customerid = c.customerid
                WHERE   p.skuid = pi_SKUid AND
                        pc.certificationtypeid = pi_certificationTypeID AND
                        LOWER(c.certificatenumber) = LOWER(ps_certificationNumber) ;

            Elsif TRIM(ps_extensionNo) = 'H' THEN
                OPEN    pc_retCursor FOR
                SELECT  p.skuid,
                        c.*,
                        pc.dateassigned_egi,
                        pc.datesubmitted,
                        pc.dateapproved_cegi,
                        pc.dateremoved,
                        ct.certificationtypename,
                        p.sku,
                        LPAD(p.Matl_Num,18,0) Matl_Num, -- Added as per PRJ3617
                        c.certdatesubmitted,
                        c.certdateapproved,
                        i.importer,
                        i.importeraddress,
                        i.importerrepresentative,
                        i.countrylocation,
                        cu.signatureind,
                        cu.customer,
                        cu.customeraddress,
                        p.sizestamp,
                        p.singloadindex,
                        p.dualloadindex,
                        p.speedrating,
                        p.brand||' '||p.brand_line as branddesc,
                        p.tubelessyn,
                        p.discontinueddate,
                        p.TPN,
                        pif.Imark AS FamilyDesc,                                  -- JBH_2.00
                        pc.mold_changed,                                        -- JBH_2.00
                        pc.oper_date_approved   ,                                -- JBH_2.00
                        pc.additional_info                                          -- jeseitz 10/29/2016
                FROM    product p
                        INNER JOIN  productcertificate pc
                                    ON  p.skuid = pc.skuid
                        INNER JOIN  certificate c
                                    on  pc.certificateid = c.certificateid AND
                                        pc.certificationtypeid = c.certificationtypeid
                        INNER JOIN  certificationtype ct
                                    ON  c.certificationtypeid = ct.certificationtypeid
                        LEFT JOIN PRODUCT_IMARK_FAMILY PIF
                                    ON PIF.CERTIFICATEID = C.CERTIFICATEID
                                    AND PIF.SKUID = PC.SKUID
                        LEFT JOIN   importer i
                                    ON  i.importerid = c.importerid
                        LEFT JOIN   customer cu
                                    ON  cu.customerid = c.customerid
                WHERE   p.skuid = pi_SKUid AND
                        pc.certificationtypeid = pi_certificationTypeID AND
                        LOWER(c.certificatenumber) = LOWER(ps_certificationNumber) AND
                        LOWER(c.mostrecentcert) = 'y';
            ELSE
                OPEN    pc_retCursor FOR
                SELECT  p.skuid,
                        c.*,
                        pc.dateassigned_egi,
                        pc.datesubmitted,
                        pc.dateapproved_cegi,
                        pc.dateremoved,
                        ct.certificationtypename,
                        p.sku,
                        LPAD(p.Matl_Num,18,0) Matl_Num,  -- Added as per PRJ3617
                        c.certdatesubmitted,
                        c.certdateapproved,
                        i.importer,
                        i.importeraddress,
                        i.importerrepresentative,
                        i.countrylocation,
                        cu.signatureind,
                        cu.customer,
                        cu.customeraddress,
                        p.sizestamp,
                        p.singloadindex,
                        p.dualloadindex,
                        p.speedrating,
                        p.brand||' '||p.brand_line as branddesc,
                        p.tubelessyn,
                        p.discontinueddate,
                        p.TPN,
                        pif.Imark AS FamilyDesc,                                  -- JBH_2.00
                        pc.mold_changed,                                        -- JBH_2.00
                        pc.oper_date_approved,                                   -- JBH_2.00
                        pc.additional_info                                           -- jeseitz 10/29/2016
                FROM    product p
                        INNER JOIN  productcertificate pc
                                    ON  p.skuid = pc.skuid
                        INNER JOIN  certificate c
                                    on  pc.certificateid = c.certificateid AND
                                        pc.certificationtypeid = c.certificationtypeid
                        INNER JOIN  certificationtype ct
                                    ON  c.certificationtypeid = ct.certificationtypeid
                        LEFT JOIN product_imark_family pif
                                    on PIF.CERTIFICATEID = C.CERTIFICATEID
                                    AND PIF.SKUID = PC.SKUID
                        LEFT JOIN   importer i
                                    ON  i.importerid = c.importerid
                        LEFT JOIN   customer cu
                                    ON  cu.customerid = c.customerid
                WHERE   p.skuid = pi_SKUid AND
                        pc.certificationtypeid = pi_certificationTypeID AND
                        LOWER(c.certificatenumber) = LOWER(ps_certificationNumber) AND
                        LOWER(c.extension_en) = LOWER(ps_extensionNo);
            END IF;
        END IF;

        IF  TRIM(ps_ExtensionNo) = '*' THEN
            Select  Count(m.measureid)
            into    li_TotalTR
            from    PRODUCTCERTIFICATE pce
                    inner join  Certificate ce
                                on  pce.CERTIFICATEID       = ce.CERTIFICATEID And
                                    pce.certificationtypeid = ce.certificationtypeid
                    inner join  measurehdr m
                                on  ce.CERTIFICATEID        = m.CERTIFICATEID and
                                    ce.certificationtypeid  = m.certificationtypeid
                           --- AND M.PROJECTNUMBER IS NOT NULL --- ADDED 8/14/2012 - JESEITZ
            where   pce.skuid = pi_SKUid and
                    pce.certificationtypeid = pi_certificationtypeid and
                    LOWER(ce.certificatenumber) = LOWER(ps_certificationNumber);

        ElsIf TRIM(ps_ExtensionNo) = 'H' THEN
            Select  Count(m.measureid)
            into    li_TotalTR
            from    PRODUCTCERTIFICATE pce
                    inner join  Certificate ce
                                on  pce.CERTIFICATEID       = ce.CERTIFICATEID And
                                    pce.certificationtypeid = ce.certificationtypeid
                    inner join  measurehdr m
                                on  ce.CERTIFICATEID        = m.CERTIFICATEID and
                                    ce.certificationtypeid  = m.certificationtypeid
                           --- AND M.PROJECTNUMBER IS NOT NULL --- ADDED 8/14/2012 - JESEITZ
             where  pce.skuid = pi_SKUid and
                    pce.certificationtypeid = pi_certificationtypeid and
                    LOWER(ce.certificatenumber) = LOWER(ps_certificationNumber) AND
                    LOWER(ce.mostrecentcert) = 'y';

        ELSE
            Select  Count(m.measureid)
            into    li_TotalTR
            from    PRODUCTCERTIFICATE pce
                    inner join  Certificate ce
                                on  pce.CERTIFICATEID       = ce.CERTIFICATEID And
                                    pce.certificationtypeid = ce.certificationtypeid
                    inner join  measurehdr m
                                on  ce.CERTIFICATEID        = m.CERTIFICATEID and
                                    ce.certificationtypeid  = m.certificationtypeid
                          ---  AND M.PROJECTNUMBER IS NOT NULL --- ADDED 8/14/2012 - JESEITZ
             where  pce.skuid = pi_SKUid and
                    pce.certificationtypeid = pi_certificationtypeid and
                    LOWER(ce.certificatenumber) = LOWER(ps_certificationNumber) AND
                    LOWER(ce.extension_en) = LOWER(ps_extensionNo);
        END IF;

        if  li_TotalTR > 0 then
            ps_trexists:='y' ;
        else
            ps_trexists:='n' ;
        end if;

   EXCEPTION

        when li_ParametersAreNull then
            ls_ErrorMsg:=  sqlerrm || 'GetCertificatesInfo. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => '  CERTIFICATION_CRUD.GetCertificatesInfo',
                AX_RECORDDATA    => 'There is at least one parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20005,ls_ErrorMsg);

         when others then
              ls_ErrorMsg:=  sqlerrm || '- GetCertificatesInfo. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>'  CERTIFICATION_CRUD.GetCertificatesInfo',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20005,ls_ErrorMsg);

   end GetCertificatesInfo;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

   Procedure GetSimilarCertificateInfo( pc_retCursor            out retCursor,
                                        ps_Matl_Num             IN  VARCHAR2,
                                        pi_CertificationTypeID  in  Number,
                                        ps_CertificationNumber  IN  VARCHAR2
                                        ) as
   /******************************************************************************
   NAME:       GetSimilarCertificateInfo
   PURPOSE:
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0
   1.1        10/03/2012    Harini         1.Replaced ps_SKU with ps_Matl_Num
                                           2.Added Matl_Num in the select list
                                            wherever_SKU is found
   2.00       09/11/2014   Joe Hill        Added Mold Changed Flag and Operations Approval Date
                                            fields from the PRODUCTCERTIFICATE table to the cursor
                                            returned to the source program
              10/29/2016   JESEITZ       Added ADDITIONAL_INFO
                                            field from the PRODUCTCERTIFICATE table to the cursor
                                            returned to the source program

******************************************************************************/
   --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      li_SKUID  PRODUCT.SKUID%TYPE;

  begin

      IF  ps_Matl_Num is null or pi_CertificationTypeID is null then -- As per PRJ3617,replaced ps_SKU with ps_Matl_Num
          raise li_ParametersAreNull;
      end if;

      li_SKUID:= ICS_COMMON_FUNCTIONS.GETLATESTSKUIDBYSKU(PS_MATL_NUM => ps_Matl_Num ); -- As per PRJ3617,replaced ps_SKU with ps_Matl_Num

      Open    pc_retCursor FOR
      SELECT  pce.CertificateId,
              ce.CERTIFICATIONTYPEID,
              ce.CERTIFICATENUMBER,
              DATESUBMITTED,
              ACTIVESTATUS,
              pce.DATEASSIGNED_EGI,
              DateApproved_CEGI,
              RENEWALREQUIRED_CGIN,
              JOBREPORTNUMBER_CEN,
              EXTENSION_EN,
              SUPPLEMENTALMOLDSTAMPING_E,
              p.EMARKREFERENCE_I,
              EXPIRYDATE_I,
              pif.FAMILYid family,
              PRODUCTLOCATION,
              COUNTRYOFMANUFACTURE_N,
              cu.customer,
              cu.customeraddress,
              CUSTOMERSPECIFIC_N,
              i.IMPORTER,
              i.IMPORTERADDRESS,
              i.IMPORTERREPRESENTATIVE,
              i.countrylocation AS COUNTRYLOCATION_N,
              BATCHNUMBER_G ,
              pCE.SKUID ,
              p.SKU,
              LPAD(p.Matl_Num,18,0) Matl_Num, -- As per PRJ3617,added Matl_Num while retrieving
              cer.certificationtypename,
              ce.certdatesubmitted,
              ce.certdateapproved,
              ce.companyname,                                                   -- JBH_2.00
              PCE.mold_changed,                                                 -- JBH_2.00
              PCE.oper_date_approved ,                                           -- JBH_2.00
              PCE.additional_info                                                 -- jeseitz 10/29/2016
      FROM    PRODUCTCERTIFICATE PCE
              INNER JOIN  CERTIFICATE ce
                          ON  PCE.CERTIFICATEID       = CE.CERTIFICATEID AND
                              PCE.CERTIFICATIONTYPEID = CE.CERTIFICATIONTYPEID
              inner join  CERTIFICATIONTYPE cer
                          on  ce.CertificationTypeId = cer.CertificationTypeId
              INNER JOIN  product p
                          ON  p.skuid = pce.skuid
              left join product_imark_family pif
                          on pif.skuid = p.skuid
                          and pif.certificateid = ce.certificateid
              LEFT JOIN   importer i
                          ON  i.importerid = ce.importerid
              LEFT JOIN   customer cu
                          ON  cu.customerid = ce.customerid
      WHERE   pce.skuid = li_SKUID and
              ce.CertificationTypeId = pi_certificationTypeID AND
              UPPER(ce.certificatenumber) <> UPPER(ps_CertificationNumber);

  EXCEPTION

            when li_ParametersAreNull then
                ls_ErrorMsg:=  sqlerrm || ' There is at least one parameters null.';
                 APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                    ad_OPERATORID => ls_OperatorId,
                    AD_DATERECORDED  => sysdate,
                    AS_PROCESSNAME   => '  CERTIFICATION_CRUD.GetCertificatesInfo',
                    AX_RECORDDATA    => 'There is at least one parameters null..',
                    AS_MESSAGECODE   => to_char(SQLCODE),
                    AS_MESSAGE       => ls_ErrorMsg);
                    raise_application_error (-20005,ls_ErrorMsg);

             when others then
                  ls_ErrorMsg:=  sqlerrm || ' An error have ocurred.(when others)';
                   APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                          ad_OPERATORID => ls_OperatorId,
                          AD_DATERECORDED  => sysdate,
                          AS_PROCESSNAME   =>'  CERTIFICATION_CRUD.GetCertificatesInfo',
                          AX_RECORDDATA    => 'An error have ocurred.(when others)',
                          AS_MESSAGECODE   => to_char(SQLCODE),
                          AS_MESSAGE       =>ls_ErrorMsg);
                   raise_application_error (-20005,ls_ErrorMsg);

  END GetSimilarCertificateInfo;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

   Procedure GetDefaultValues(pc_retCursor out retCursor,
                              ps_Number out CERTIFICATE.CERTIFICATENUMBER%TYPE,
                              ps_TypeName in CERTIFICATIONTYPE.CERTIFICATIONTYPENAME%Type,
                              pi_NumberID in CERTIFICATE.CERTIFICATEID%TYPE) as
   --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      li_CertificationTypeId  CERTIFICATIONTYPE.CERTIFICATIONTYPEID%TYPE;
      li_CertificateId        CERTIFICATEDEFAULTVALUE.CERTIFICATEID%TYPE;
      ls_CertificateNumber    CERTIFICATE.CERTIFICATENUMBER%TYPE;
   begin
         if  ps_TypeName is null then
          raise li_ParametersAreNull;
        end if;
        li_CertificationTypeId:=ICS_COMMON_FUNCTIONS.GETCERTIFICATIONID(PS_CERTIFICATIONTYPENAME => ps_TypeName);
        if  pi_NumberID > 0  then
             Open pc_retCursor for
              SELECT
                     df.fieldid,
                     df.reportname,
                     df.FIELDNAME,
                     df.fieldtext,
                     df.CERTIFICATIONTYPEID,
                     cdv.FIELDVALUE,
                     cdv.certificateid
              FROM  DEFAULTFIELD df  inner join  CERTIFICATEDEFAULTVALUE cdv on
                         df.fieldid = cdv.FIELDID and
                         df.certificationtypeid = cdv.CERTIFICATIONTYPEID
              where cdv.certificateid = pi_NumberID and
                    cdv.CERTIFICATIONTYPEID = li_CertificationTypeId
                    Order by df.fieldid;
              Select ce.certificatenumber into ls_CertificateNumber
              from Certificate ce
              where ce.certificateid = pi_NumberID;
              ps_Number:=ls_CertificateNumber;
        else
             Open pc_retCursor for
              SELECT
                     df.fieldid,
                     df.reportname,
                     DF.FIELDNAME,
                     df.fieldtext,
                     df.certificationtypeid,
                     CTDV.FIELDVALUE,
                     null as certificateid
              FROM  DEFAULTFIELD df
                   inner join  CERTIFICATETYPEDEFAULTVALUE ctdv on
                              df.certificationtypeid = ctdv.certificationtypeid and
                              df.fieldid = CTDV.FIELDID
              where df.certificationtypeid = li_CertificationTypeId
              Order by DF.FIELDID;
             ps_Number:='';
        end if ;
   EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:=  sqlerrm || '- GetDefaultValues. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => '  CERTIFICATION_CRUD.GetDefaultValues',
                AX_RECORDDATA    => 'There is at least one parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
                raise_application_error (-20005,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || '- GetDefaultValues.  An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>'  CERTIFICATION_CRUD.GetDefaultValues',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
                raise_application_error (-20007,ls_ErrorMsg);
   end GetDefaultValues;


/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

    PROCEDURE CertificateBasicInfo_Save(ps_Matl_Num             IN  VARCHAR2,
                                        pi_certificationTypeid  IN  NUMBER,
                                        ps_certificateNumber    IN  VARCHAR2,
                                        pi_importerId           IN  NUMBER,
                                        pi_customerId           IN  NUMBER,
                                        ps_operatorName         IN  VARCHAR2,
                                        ps_Extension_En         IN  NUMBER,
                                        ps_InsertPC             IN  VARCHAR2,
                                        pn_Error_Num            OUT NUMBER,
                                        ps_ErrorMsg             OUT VARCHAR2)
    AS
   /******************************************************************************
     NAME:       CertificateBasicInfo_Save
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0
     1.1        10/03/2012    Harini         1.Replaced ps_SKU with ps_Matl_Num
     1.2        11/15/2012    Harini         2.Added DateAssigned_egi as sysdate in productcertificate
                                               Insert statement
     1.3        03/04/2013    Krishna
     1.4        03/15/2013    Krishna        Added logic to update MostRecentCert column in
                                             Certificate table by calling ICS_MAINTENANCE.SetMostRecentCert
     1.5        11/21/2013    Harni          1.If the certificate/ext doesnt exists,check for the existance of
                                             certificate and get the most recent ext.If the extension number passed
                                             in is more than one greater than the current highest extension for that
                                             certificate number, then need to show error message "Extension number is
                                             out of sequence" for both certificatetypeid's 1 and 6.
                                             2.Get the current speedrating, if the product doesnt have current speedrating,
                                             insert new record with current speedrating
                                             3.If Certificate already contains SKU then need to show errormessage as
                                             "Material already exists on this certificate. Cannot add duplicate material to certificate."
                                             4.If the extension or the product attached to the given extension then we need to show message
                                             as "This extension has already been approved. Click ok to continue adding this material to it or cancel to exit."
     1.6        03/05/2014     Harini        1.Modified the logic of DateApproved and create a record in Certificate table with incremented extension in case
                                             of Certificate exists. Merged the logic of certificate type 1 or 6 into one condition.
                                             2.Certificate number is checked with upper(CertificateNumber) in all conditions.
                                             3. Took CertificateId seq.next val into a varibale and assigned it to CertificateId while inserting the records
                                              in Certificate table
      1.7     07/08/2013      JESEITZ   1. If certificationtypeid = 6 (E117) copy the supplemental mold stamping from the next lowest extension if present
                                                    2.  If this a new E117 certificate number (certifidationtypeid = 6) allow the first extension to be greater than 0. This is due to the government renaming certificates.
  ******************************************************************************/
        li_parametersNull EXCEPTION;
        li_paramExist     EXCEPTION;
        PRAGMA EXCEPTION_INIT(li_parametersNull,-20005);

        -- New Variables
        ls_operatorId  VARCHAR2(50) := 'ICSDEV';
        li_importerId  NUMBER := NULL;
        li_customerId  NUMBER := NULL;
        li_skuId product.skuid%TYPE;
        ls_certificateExists      VARCHAR2(1);
        li_certificateId          NUMBER;
        ls_certificateContainssku VARCHAR2(1);
        ls_supplementalmoldstamping_e VARCHAR2(30);
        li_pif_cnt         number;
        ls_imark          varchar2(30);
        ls_family         varchar2(10);
        -- Old Variables
        Ls_Machineid     VARCHAR2(50):=NULL;
        ls_ErrorMsg      VARCHAR2(4000);
        ls_RecordData    VARCHAR2(4000);
        Ls_Productexists VARCHAR2(1);
        Ls_Extension_En      Certificate.Extension_En%TYPE;
        ls_ProdSpeedRating   Product.SpeedRating%TYPE;
        ls_SAPSpeedRating    CMDR_DATA.MATERIAL_ATTRIBUTE.ATTRIB_VALUE%TYPE;
        ld_CertDateApproved  Certificate.CertDateApproved%TYPE;
        ld_MatlDateApproved  ProductCertificate.DateApproved_CEGI%TYPE;
        ln_Certificate_Seq   Certificate.CertificateId%TYPE;

  BEGIN
      Ls_Extension_En := ps_Extension_En;

  --  Check for any null parameters
      IF ps_Matl_Num IS NULL OR pi_certificationTypeid IS NULL OR ps_certificateNumber IS NULL THEN -- As per PRJ3617,replaced ps_SKU with ps_Matl_Num
          RAISE li_parametersNull;
      END IF;

  --  Set operator name
      IF ps_operatorName IS NOT NULL OR ps_operatorName <> '' THEN
          ls_operatorId := ps_operatorName;
      END IF;

  --  If this is a NOM certificate, set the Importer and Customer
      IF pi_certificationTypeid = 3 THEN
          li_importerId := pi_importerId;
          li_customerId := pi_customerId;
      END IF;

  --  Get the most recent SkuId
      Li_Skuid := Ics_Common_Functions.Getlatestskuidbysku(Ps_Matl_Num => Ps_Matl_Num);  -- As per PRJ3617,replaced ps_SKU with ps_Matl_Num

      SELECT  P.SPEEDRATING
      INTO    ls_ProdSpeedRating
      FROM    PRODUCT P
      WHERE   P.SKUID = li_SKUID;

      BEGIN

          SELECT  MA.ATTRIB_VALUE
          INTO    ls_SAPSpeedRating
          FROM    CMDR_DATA.MATERIAL_ATTRIBUTE MA
          WHERE   MA.ATTRIB_NAME = 'SPEED_RATING' AND
                  MA.MATL_NUM =  LPAD(ps_Matl_Num,18,0); -- jeseitz added lpad 1/2/14

      EXCEPTION
          WHEN NO_DATA_FOUND THEN
           ls_SAPSpeedRating:= NULL;
      END;

--      ls_certificateExists := ICS_COMMON_FUNCTIONS.CheckIfCertificateExists(ps_certificateNumber => ps_certificateNumber, pi_certificationTypeid => pi_certificationTypeid);

  --  If Ls_Extension_En is null, then just checks if the CertificateNumber exists.
      ls_certificateExists := Ics_Maintenance.Checkifcertificateexists
                                ( Pi_Certificationtypeid,
                                  Ps_Certificatenumber,
                                  Ls_Extension_En);

      IF  LOWER(ls_certificateExists) = 'n' THEN
          IF  (Pi_Certificationtypeid = 1 OR Pi_Certificationtypeid = 6) Then -- ECE 117  -- Not wrapping Certificate Number in UPPER function

              IF  Ls_Extension_En Is Null Then

              --  null extension passed in - get highest extension - return zero if not found
                  Ls_Extension_En := ICS_MAINTENANCE.Getcertificateextnumber(Pi_Certificationtypeid,Ps_Certificatenumber);

              ELSE

              --  find the highest extension for certificate number -- returns null if no existing most recent certification.
                  Ls_Extension_En := ICS_MAINTENANCE.GetCertificateRecentExtNumber(Pi_Certificationtypeid,Ps_Certificatenumber);

                  IF  (Ls_Extension_En IS NULL) THEN -- couldn't find an existing most recent certification.
                      if  Pi_Certificationtypeid = 6 then -- if it is a 117 certificate, we can start a new certificate with an extension higher than 0 -  ok to use what was passed in. -- added jeseitz 7/9/14
                          Ls_Extension_En := ps_Extension_En;
                      else
                          Ls_Extension_En := 0;  -- start at zero
                      end if;

                  ELSE -- we found an existing highest most recent extension for this certificate number

                  --  check to make sure the extension passed in isn't too high (we can't skip an extensioin)
                      Ls_Extension_En := Ls_Extension_En + 1;
                      IF  (ps_Extension_En > Ls_Extension_En) THEN
                          pn_Error_Num := 5;
                          ps_ErrorMsg := 'Extension number is out of sequence.';
                          RAISE li_paramExist;
                      ELSE
                      --  ok to use extension passed in.
                          Ls_Extension_En := ps_Extension_En;
                      END IF;
                  END IF;
              END IF;
          ELSE  -- not certificationtypeid = 1 or 6
              Ls_Extension_En := 0;
          END IF;

      --  before creating new certificate,
      --  doublecheck to make sure it doesn't already exist
      --  it shouldn't, but it was duplicating certificates somehow.
          BEGIN

            select  certificateid
            into    ln_Certificate_Seq
            from    certificate
            where   certificationtypeid = Pi_Certificationtypeid      and
                    certificatenumber   = UPPER(Ps_Certificatenumber) and
                    extension_en        = Ls_Extension_En;
          EXCEPTION

            WHEN  no_data_found then
              --  can't find extension = ok to add.
                  ln_Certificate_Seq := 0;

            when  others then
                  ln_certificate_seq:= -1;

          END;

          if  ln_certificate_seq = 0 then

          --  create the new certificate/extension because it doesn't exist.
              SELECT  Certificateid_Seq.Nextval
              INTO    ln_Certificate_Seq
              FROM    DUAL;

              INSERT INTO CERTIFICATE  (Certificationtypeid,
                                        Certificatenumber,
                                        Createdby,
                                        Certificateid,
                                        Extension_En,
                                        Importerid,
                                        Customerid,CompanyName)
                          VALUES      ( Pi_Certificationtypeid,
                                        UPPER(Ps_Certificatenumber),
                                        Ls_Operatorid,
                                        ln_Certificate_Seq,
                                        Ls_Extension_En,
                                        Li_Importerid,
                                        Li_Customerid,
                                        'COOPER'); -- jeseitz 7/29/13 Added COOPER as default

              li_CertificateID := ln_Certificate_Seq;

          --  Update the MostRecentCert column in Certificate table
              ICS_MAINTENANCE.SetMostRecentCert(  pi_certificationTypeid,
                                                  UPPER(ps_certificateNumber),
                                                  ls_OperatorId);

          --  if this is a 117 certificate and extension is > 0,
          --  copy the mold stamping from the previous extension if it exists. jeseitz 7/8/14 Incident 117016
              if  pi_certificationTypeid = 6 and nvl(Ls_Extension_En,0) > 0 then

                  begin

                     select supplementalmoldstamping_e
                     into   ls_supplementalmoldstamping_e
                     from   certificate
                     where  UPPER(certificatenumber) = upper(Ps_Certificatenumber) and
                            Extension_En = ls_Extension_En - 1;

                  --- may not be an extension -1 if 117 certificate started with number higher than 0,
                  --  thus the exception handling. will just leave the supplemental mold spacing null
                      update  certificate
                      set     supplementalmoldstamping_e = ls_supplementalmoldstamping_e
                      where   certificateid = li_CertificateID;

                  EXCEPTION
                    WHEN others then
                      -- if it can't find a previous extension, we don't need to do anything.
                      ls_supplementalmoldstamping_e := null;
                  END;
              end if;
          end if;

      Else  ---certificate/extension exists

          IF  Ls_Extension_En Is Null Then  -- gets highest extension for certificate - return 0 if null (doesn't exist) - it should exist at this point
              Ls_Extension_En := Ics_Maintenance.Getcertificateextnumber(Pi_Certificationtypeid,Ps_Certificatenumber);
          END IF;

      --  ECE 117 -- Not wrapping Certificate Number in UPPER function
          IF  (Pi_Certificationtypeid = 1  OR pi_certificationTypeid = 6) THEN -- ECE 117 -- Not wrapping Certificate Number in UPPER function
              SELECT  c.certificateid
              INTO    li_certificateId
              From    Certificate C
              Where   Upper(C.Certificatenumber)  = Upper(Ps_Certificatenumber) And
                      C.Certificationtypeid       = Pi_Certificationtypeid      And
                      C.Extension_En              = Ls_Extension_En;

          ELSIF  Pi_Certificationtypeid = 4 THEN
              SELECT  c.certificateid
              INTO    li_certificateId
              FROM    certificate c
              WHERE   UPPER(c.certificatenumber)  = UPPER(ps_certificateNumber) AND
                      c.certificationtypeid       = pi_certificationTypeid;
          ELSE
             SELECT  c.certificateid
              INTO    li_certificateId
              FROM    certificate c
              WHERE   UPPER(c.certificatenumber)  = UPPER(ps_certificateNumber) AND
                      c.certificationtypeid       = pi_certificationTypeid      AND
                      UPPER(c.mostrecentcert)     = 'Y';
          END IF;

      --  said wanted to add to next highest extension because the one passed in is already approved and closed.
          IF  (LOWER(ps_InsertPC) = 'y') THEN

              IF  (Pi_Certificationtypeid = 1 OR Pi_Certificationtypeid =6) THEN
                  Ls_Extension_En := Ls_Extension_En +1;
              END IF;

          --  before creating new certificate, doublecheck to make sure it doesn't already exist
          --  - it shouldn't, but it was duplicating certificates somehow.
              BEGIN
                  select certificateid into ln_Certificate_Seq from certificate
                  where     certificationtypeid       = Pi_Certificationtypeid
                        and UPPER(certificatenumber)  = UPPER(Ps_Certificatenumber)
                        and extension_en              = Ls_Extension_En;
              EXCEPTION
                WHEN no_data_found then
                  -- can't find extension = ok to add.
                    ln_Certificate_Seq := 0;
                 when others then
                    ln_certificate_seq:= -1;
               END;

              if  ln_Certificate_Seq = 0 then

                  SELECT Certificateid_Seq.Nextval
                  INTO ln_Certificate_Seq
                  FROM DUAL;

                  INSERT INTO CERTIFICATE ( certificationtypeid,
                                            certificatenumber,
                                            createdby,
                                            certificateid,
                                            extension_en,
                                            importerid,
                                            customerid,CompanyName)
                              VALUES      ( pi_certificationTypeid,
                                            UPPER(ps_certificateNumber),
                                            ls_operatorId,
                                            ln_Certificate_Seq,
                                            Ls_Extension_En,
                                            li_importerid,
                                            li_customerid,
                                            'COOPER');

                  li_CertificateID := ln_Certificate_Seq;

              --  Update the MostRecentCert column in Certificate table
                  ICS_MAINTENANCE.SetMostRecentCert(pi_certificationTypeid,
                                                    UPPER(ps_certificateNumber),
                                                    ls_OperatorId);

              --  if this is a 117 certificate and extension > 0,
              --  copy the mold stamping from the previous extension if it exists. jeseitz 7/8/14 Incident 117016
                  if  pi_certificationTypeid = 6 and nvl(Ls_Extension_En,0) > 0 then
                      begin

                          select  supplementalmoldstamping_e into ls_supplementalmoldstamping_e
                          from    certificate
                          where   certificatenumber = upper(Ps_Certificatenumber) and
                                  Extension_En      = ls_Extension_En - 1;

                          update  certificate
                          set     supplementalmoldstamping_e = ls_supplementalmoldstamping_e
                          where   certificateid = li_CertificateID;

                      EXCEPTION
                           WHEN others then
                                -- if it can't find a previous extension, we don't need to do anything.
                                ls_supplementalmoldstamping_e := null;
                      END;
                  end if;
              end if;

          END IF;
      END IF;

      IF  (ps_InsertPC <> 'y' OR ps_InsertPC IS NULL) THEN

      --  Check to see if the certificate already contains the SKU
          ls_certificateContainssku :=
                ICS_COMMON_FUNCTIONS.CheckIfCertificateContainsSku(
                      pi_skuId                => li_skuId,
                      pi_certificationTypeid  => pi_certificationTypeid,
                      ps_certificatenumber    => Ps_Certificatenumber);

          IF  ls_certificateContainssku = 'y' THEN
              pn_Error_Num := 6;
              ps_ErrorMsg := 'Material already exists on this certificate. Cannot add duplicate material to certificate.';
              RAISE li_paramExist;
          ELSE

              IF (pi_certificationTypeid = 1 OR   pi_certificationTypeid = 6) THEN

                  BEGIN
                      SELECT  MAX(DATEAPPROVED_CEGI)
                      INTO    ld_CERTDATEAPPROVED
                      FROM    CERTIFICATE C,
                              PRODUCTCERTIFICATE PC
                      WHERE   UPPER(CERTIFICATENUMBER)  = UPPER(Ps_Certificatenumber)
                              AND PC.CERTIFICATEID      = C.CERTIFICATEID
                              AND EXTENSION_EN          = Ls_Extension_En
                              AND DATEAPPROVED_CEGI IS NOT NULL;
                  EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                       ld_CERTDATEAPPROVED := NULL;
                  END;

                  BEGIN
                      SELECT  DATEAPPROVED_CEGI
                      INTO    ld_MATLDATEAPPROVED
                      FROM    CERTIFICATE C,
                              PRODUCTCERTIFICATE PC
                      WHERE   UPPER(C.CERTIFICATENUMBER)  = UPPER(Ps_Certificatenumber)
                              and C.EXTENSION_EN          = Ls_Extension_En
                              AND PC.CERTIFICATEID        = C.CERTIFICATEID
                              AND PC.SKUID                = li_skuId;
                  EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                       ld_MATLDATEAPPROVED := NULL;
                  END;

              END IF;

              IF  (ld_CertDateApproved IS NOT NULL OR ld_MatlDateApproved IS NOT NULL) THEN
                  pn_Error_Num := 7;
                  --ps_ErrorMsg := 'This extension has already been approved. Click ok to continue adding this material to it or cancel to exit.';
                  ps_ErrorMsg := 'This extension has already been approved. Click ok to add this material to new extenstion or cancel to exit.';
                  RAISE li_paramExist;
              END IF;

          END IF;

          IF  ls_prodSpeedRating  IS NOT NULL AND
              ls_SAPSpeedRating   IS NOT NULL AND
              ls_ProdSpeedRating <> ls_SAPSpeedRating THEN
          --- We need to create a new product record with the new speedrating.
          --- ICS_CRUD.ProductCountry_Save('N',ps_Matl_Num, pi_certificationTypeid, 0);
              ICS_CRUD.ProductRequestCert_Save('N',ps_Matl_Num, pi_certificationTypeid, 0) ;
          --- Get the skuid we just created:
              SELECT  MAX(SkuID)
              INTO    li_skuId
              FROM    Product
              WHERE   Matl_Num = LPAD(ps_Matl_Num,18,0);
          END IF;

         -- ls_productExists :=
         --       ICS_COMMON_FUNCTIONS.CheckIfProductCountryExists(
         --             pi_skuId  =>  li_skuId,
         --             pi_certificationtypeid  =>  pi_certificationtypeid);

          ls_productExists :=
                ICS_COMMON_FUNCTIONS.CheckIfProductRequestExists(
                      pi_skuId  =>  li_skuId,
                      pi_certificationtypeid  =>  pi_certificationtypeid);

      --  delete existing records from product request so they can correctly be re-added.
          IF  ls_productExists = 'y' THEN
              DELETE
              --FROM    PRODUCTCOUNTRY
              FROM    PRODUCTREQUEST
              WHERE   SKUID = li_skuid AND
                      certificationtypeid = pi_certificationtypeid;
          END IF;

      --  Creates entries on product country in order to be able to search by this new certificate number that was created
--          INSERT INTO productcountry (countryid,
--                                      certificationtypeid,
--                                      requeststatus,
--                                      skuid)
--                      SELECT  co.countryid,
--                              pi_certificationTypeid,
--                              NULL,
--                              li_skuId
--                      FROM    certificationtype ct
--                              INNER JOIN country co
--                                        ON ct.certificationtypeid = co.certificationtypeid
--                      WHERE   ct.certificationtypeid = pi_certificationTypeid;


         INSERT INTO productrequest ( certificationtypeid, skuid,  requeststatus )
                    values( pi_certificationTypeid, li_skuId, null);

          if  li_certificateId > 0 then
              INSERT INTO productcertificate( skuid,
                                              certificationtypeid,
                                              certificateid,
                                              DateAssigned_egi)
                          VALUES            ( li_skuId,
                                              pi_certificationTypeid,
                                              li_certificateId,
                                              TRUNC(SYSDATE));
               if  pi_certificationTypeid = 4 then  --- imark -  insert family info
              --check if product_imark_certificate record already exists

                   select count(*) into li_pif_cnt from ics.product_imark_family pif
                            where PIF.SKUID = li_skuid and pif.certificateid = li_certificateid;


                   if  li_pif_cnt    = 0 then

                           ls_family :=  BOM_ATTRIBUTES.GET_IMARK_FAMILY(LPAD(ps_Matl_Num,18,0), li_certificateId);

                           BEGIN
                              SELECT ATTRIB_VALUE INTO ls_Imark
                                from cmdr_data.material_attribute
                                where matl_num = LPAD(ps_Matl_Num,18,0)
                                and attrib_name = 'I_MARK';
                           EXCEPTION
                         WHEN NO_DATA_FOUND THEN
                             ls_Imark  := NULL;
                         END;
                         insert into ics.product_imark_family
                                 (CERTIFICATEID, SKUID,  FAMILYID,  IMARK , CREATEDBY,  CREATEDON,
                                         MODIFIEDBY, MODIFIEDON)
                        values  (  li_certificateid, li_skuid, ls_family, ls_Imark , ls_operatorID,  sysdate,
                        ls_operatorID,  sysdate);
                    end if;

           end if;




          end if;

      ELSE

--         ls_productExists :=
--                ICS_COMMON_FUNCTIONS.CheckIfProductCountryExists(
--                      pi_skuId => li_skuId,
--                      pi_certificationtypeid => pi_certificationtypeid);
--

         ls_productExists :=
                ICS_COMMON_FUNCTIONS.CheckIfProductRequestExists(
                      pi_skuId => li_skuId,
                      pi_certificationtypeid => pi_certificationtypeid);

      --  delete existing records from product country so they can correctly be re-added.
          IF  ls_productExists = 'y' THEN
              DELETE
             -- FROM    PRODUCTCOUNTRY
                 FROM    PRODUCTREQUEST
              WHERE   SKUID = li_skuid AND
                      certificationtypeid = pi_certificationtypeid;
          END IF;

      --  Creates entries on product  request in order to be able to search by this new certificate number that was created
--          INSERT INTO productcountry (countryid,
--                                      certificationtypeid,
--                                      requeststatus,
--                                      skuid)
--                      SELECT          co.countryid,
--                                      pi_certificationTypeid ,
--                                      NULL,
--                                      li_skuId
--                      FROM            certificationtype ct
--                                      INNER JOIN
--                                      country co
--                                      ON ct.certificationtypeid = co.certificationtypeid
--                      WHERE           ct.certificationtypeid = pi_certificationTypeid;
--
--

             INSERT INTO  productrequest (certificationtypeid, skuid,  requeststatus)
                 values(pi_certificationTypeid ,   li_skuId,  NULL) ;


          if  li_certificateId > 0 then
              INSERT INTO productcertificate( skuid,
                                              certificationtypeid,
                                              certificateid,
                                              DateAssigned_egi)
                          VALUES            ( li_skuId,
                                              pi_certificationTypeid,
                                              li_certificateId,
                                              TRUNC(SYSDATE));

              if  pi_certificationTypeid = 4 then  --- imark -  insert family info
              --check if product_imark_certificate record already exists

                   select count(*) into li_pif_cnt from ics.product_imark_family pif
                            where PIF.SKUID = li_skuid and pif.certificateid = li_certificateid;

                   -- calculate family
                    ls_family :=  BOM_ATTRIBUTES.GET_IMARK_FAMILY(LPAD(ps_Matl_Num,18,0), li_certificateId);

                    if  li_pif_cnt    = 0 then
                       BEGIN
                          SELECT ATTRIB_VALUE INTO ls_Imark
                                from cmdr_data.material_attribute
                                where matl_num = LPAD(ps_Matl_Num,18,0)
                                and attrib_name = 'I_MARK';
                       EXCEPTION
                           WHEN NO_DATA_FOUND THEN
                                 ls_Imark := 0;
                       END;
                       insert into ics.product_imark_family
                                 (CERTIFICATEID, SKUID,  FAMILYID,  IMARK , CREATEDBY,  CREATEDON,
                                         MODIFIEDBY, MODIFIEDON)
                        values  (  li_certificateid, li_skuid, ls_family, ls_Imark , ls_operatorID,  sysdate,
                        ls_operatorID,  sysdate);
                    else
                        update    ics.product_imark_family
                            set familyid = ls_family
                            where skuid = li_skuid and certificateid = li_certificateid;

                    end if;

           end if;

          end IF;
      end if;

  COMMIT;

  pn_Error_Num := 1;

  EXCEPTION

        WHEN li_parametersNull THEN
             pn_Error_Num := 0;
             ls_ErrorMsg:=  sqlerrm || ' - CertificateBasicInfo_Save. There are null parameters.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID    => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => '  CERTIFICATION_CRUD.CertificateBasicInfo_Save',
                AX_RECORDDATA    => 'There is at least one parameters null..',
                AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                AS_MESSAGE       => ls_ErrorMsg);
                --raise_application_error (-20005,ls_ErrorMsg);

          WHEN li_paramExist THEN
              ls_ErrorMsg:= sqlerrm || ' - CertificateBasicInfo_Save.' ||ps_ErrorMsg;
              APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID    => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => '  CERTIFICATION_CRUD.CertificateBasicInfo_Save',
                AX_RECORDDATA    => ls_RecordData,
                AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                AS_MESSAGE       => ls_ErrorMsg);
                --raise_application_error (-20005,ls_ErrorMsg);

         when others then
               pn_Error_Num := 0;
               ls_ErrorMsg:=  sqlerrm || ' - CertificateBasicInfo_Save. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID    => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>'  CERTIFICATION_CRUD.CertificateBasicInfo_Save',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      As_Messagecode   => To_Char(Sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
                    -- Raise_Application_Error (-20007,Ls_Errormsg);

  end CertificateBasicInfo_Save;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

   PROCEDURE CertificateSimTire_Save(ps_Matl_Num             IN  VARCHAR2,
                                      pi_CertificationTypeId IN  NUMBER,
                                      ps_CertificateNumber   IN  VARCHAR2,
                                      ps_OperatorName        IN  VARCHAR2 )
   AS
   /******************************************************************************
     NAME:       CertificateSimTire_Save
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0
     1.1        10/03/2012    Harini         1.Replaced ps_SKU with ps_Matl_Num
     1.2        11/21/2013    Harini         1.Replaced pi_CertificateID to
                                             ps_CertificateNumber while calling
                                            ICS_COMMON_Functions.CheckIfCertificateContainsSKU function
                                            2. Added PI_CERTIFICATIONTYPEID while calling
                                            ICS_COMMON_Functions.CheckIfProductCountryExists and added the
                                            logic for "if ls_ProductExixts = 'y'"
  ******************************************************************************/
      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      li_SKUId  PRODUCT.SKUID%TYPE;
      ls_CertificateExists varchar2(1);
      ls_ProductExixts varchar2(1);
      li_CertificateID number;
      ls_CertificateContainsSku varchar2(1);
   begin
         if ps_Matl_Num is null or Pi_CERTIFICATIONTYPEID is null or ps_CertificateNumber is null then -- As per PRJ3617,replaced ps_sku with ps_Matl_Num
            raise li_ParametersAreNull;
         end if;
         if ps_OperatorName is not null or ps_OperatorName <> '' then
            ls_OperatorId:=ps_OperatorName;
         end if;
         li_SKUId:= ICS_COMMON_FUNCTIONS.GetLatestSkuIdBySKU(PS_Matl_Num => PS_Matl_Num); --  -- As per PRJ3617,replaced ps_sku with ps_Matl_Num

          ls_CertificateExists := ICS_COMMON_FUNCTIONS.CheckIfCertificateExists(
                                      PS_CERTIFICATENUMBER => ps_CertificateNumber,
                                      PI_CERTIFICATIONTYPEID => pi_CertificationTypeId
                                    );
             if ls_CertificateExists = 'n' then
                 INSERT INTO  CERTIFICATE
                  (
                    CERTIFICATIONTYPEID,
                    CERTIFICATENUMBER,
                    CREATEDBY ,
                    CERTIFICATEID,
                    EXTENSION_EN
                  )
                  VALUES
                  (
                    Pi_CERTIFICATIONTYPEID,
                    upper(ps_CERTIFICATENUMBER),
                    ls_OperatorId,
                    CERTIFICATEID_SEQ.NextVal,
                    0
              );
               Select CERTIFICATEID_SEQ.CurrVal into li_CertificateID
              from Dual;
            else
                 li_CertificateID := ICS_COMMON_FUNCTIONS.GETCERTIFICATEID(
                                            PS_CERTIFICATENUMBER => ps_CertificateNumber,
                                            PI_CERTIFICATIONTYPEID => pi_CertificationTypeId
                                          );
            end if;
           ls_CertificateContainsSku:=ICS_COMMON_FUNCTIONS.CHECKIFCERTIFICATECONTAINSSKU(
                                            PI_SKUID => li_SKUId,
                                            PI_CERTIFICATIONTYPEID => Pi_CERTIFICATIONTYPEID,
                                             PS_CERTIFICATENUMBER => ps_CertificateNumber
                                          );

            IF ls_certificateContainssku = 'n' THEN
              -- As per PRJ3617,Inserting Sysdate
              INSERT INTO productcertificate (skuid, certificationtypeid, certificateid)
                VALUES (li_skuId, pi_certificationTypeid, li_certificateId);

            END IF;

       --   ls_ProductExixts := ICS_COMMON_FUNCTIONS.CHECKIFPRODUCTCOUNTRYEXISTS( PI_SKUID => li_SKUId,PI_CERTIFICATIONTYPEID => PI_CERTIFICATIONTYPEID );
      ls_ProductExixts := ICS_COMMON_FUNCTIONS.CHECKIFPRODUCTREQUESTEXISTS( PI_SKUID => li_SKUId,PI_CERTIFICATIONTYPEID => PI_CERTIFICATIONTYPEID );
          if ls_ProductExixts='y' then
               --delete existing records from product request so they can correctly be re-added.
              -- DELETE FROM PRODUCTCOUNTRY WHERE SKUID = li_skuid AND certificationtypeid = pi_certificationtypeid;
               DELETE FROM PRODUCTREQUEST WHERE SKUID = li_skuid AND certificationtypeid = pi_certificationtypeid;
            end if;
              --Creates entries on product country in order to be able to search by this new certificate number that was created
--              INSERT INTO PRODUCTCOUNTRY ( COUNTRYID, CERTIFICATIONTYPEID, REQUESTSTATUS, SKUID )
--              Select co.countryid,Pi_CERTIFICATIONTYPEID,null,li_SKUId
--              from certificationtype cet inner join country co on
--                           cet.CertificationTypeId = co.CertificationTypeId
--              where cet.CertificationTypeId =Pi_CERTIFICATIONTYPEID;
--
              INSERT INTO PRODUCTREQUEST (CERTIFICATIONTYPEID, SKUID, REQUESTSTATUS )
                          VALUES(Pi_CERTIFICATIONTYPEID,li_SKUId,null);

    EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:=  sqlerrm || ' - CertificateSimTire_Save. There are null parameters.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => '  CERTIFICATION_CRUD.CertificateSimTire_Save',
                AX_RECORDDATA    => 'There is at least one parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
                raise_application_error (-20005,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || ' - CertificateSimTire_Save. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>'  CERTIFICATION_CRUD.CertificateSimTire_Save',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
                     raise_application_error (-20007,ls_ErrorMsg);
   end CertificateSimTire_Save;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

   Procedure Certificate_Archive(ps_CertificateNumber   in  varchar2,
                                      ps_OperatorName        in  varchar2 ) as
      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      ls_CertificateExists varchar2(1);
      li_CertificateID number;
   begin
         if ps_CertificateNumber is null then
            raise li_ParametersAreNull;
         end if;
         if ps_OperatorName is not null or ps_OperatorName <> '' then
            ls_OperatorId:=ps_OperatorName;
         end if;
        UPDATE certificate c
        SET c.archivedate_cegi = SYSDATE
        WHERE LOWER(c.certificatenumber) = LOWER(ps_CertificateNumber);
    EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:=  sqlerrm || ' - Certificate_Archive. There are null parameters.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => '  CERTIFICATION_CRUD.Certificate_Archive',
                AX_RECORDDATA    => 'There is at least one parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
                raise_application_error (-20005,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || ' - Certificate_Archive. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>'  CERTIFICATION_CRUD.Certificate_Archive',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
                     raise_application_error (-20007,ls_ErrorMsg);
   end Certificate_Archive;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

    PROCEDURE CertificateDefaultValue_Save(
              pi_fieldValueId IN NUMBER,
              pi_certificationTypeId IN NUMBER,
              ps_fieldValue IN VARCHAR2,
              ps_certificateNumber IN VARCHAR2)
    AS
    --Exception variables
    li_parametersNull EXCEPTION;
    PRAGMA EXCEPTION_INIT(li_parametersNull, -20005);
    --Variables
    ls_machineId VARCHAR2(50) := NULL;
    ls_operatorId VARCHAR2(50) := 'ICSDEV';
    ls_errorMsg VARCHAR2(4000);
    li_certificateId certificate.certificateid%TYPE;
    ls_defaultValueExist VARCHAR2(1);
    --- Cusor to get all certificate Ids for the certificate number
    CURSOR c_certificateIds(pi_certificationTypeId NUMBER, ps_certificateNumber VARCHAR2) IS
    SELECT c.certificateid
    FROM certificate c
    WHERE c.certificationTypeId = pi_certificationTypeId AND c.certificatenumber = ps_certificateNumber;
      ls_CertificateNumber CERTIFICATE.CERTIFICATENUMBER%type;
    BEGIN
        IF pi_fieldValueId IS NULL OR pi_certificationTypeId IS NULL OR ps_certificateNumber IS NULL THEN
            RAISE li_parametersNull;
        END IF;
        IF pi_certificationTypeId = 4 THEN -- Imark Certificate
            li_certificateId := ics_common_functions.getlatestimarkcertificateid();
            ls_defaultValueExist := certification_crud.checkifcertificatedfexist(pi_fieldValueId, pi_certificationTypeId, li_certificateId);
            IF ls_defaultValueExist = 'y' THEN
                UPDATE certificatedefaultvalue
                SET fieldvalue = ps_fieldValue, modifiedon = SYSDATE
                WHERE fieldid = pi_fieldValueId AND certificationtypeid = pi_certificationTypeId AND certificateid = li_certificateId;
            ELSE
                INSERT INTO certificatedefaultvalue(fieldid, certificationtypeid, certificateid, fieldvalue)
                VALUES(pi_fieldValueId, pi_certificationTypeId, li_certificateId, ps_fieldValue);
            END IF;
        ELSE
            OPEN c_certificateIds(pi_certificationTypeId, ps_certificateNumber);
            LOOP
              FETCH c_certificateIds INTO li_certificateId;
              EXIT  WHEN c_certificateIds%NOTFOUND;
                ls_defaultValueExist := certification_crud.checkifcertificatedfexist(pi_fieldValueId, pi_certificationTypeId, li_certificateId);
                IF ls_defaultValueExist = 'y' THEN
                    UPDATE certificatedefaultvalue
                    SET fieldvalue = ps_fieldValue, modifiedon = SYSDATE
                    WHERE fieldid = pi_fieldValueId AND certificationtypeid = pi_certificationTypeId AND certificateid = li_certificateId;
                ELSE
                    INSERT INTO certificatedefaultvalue(fieldid, certificationtypeid, certificateid, fieldvalue)
                    VALUES(pi_fieldValueId, pi_certificationTypeId, li_certificateId, ps_fieldValue);
                END IF;
            END LOOP;
        END IF;
   EXCEPTION
        WHEN li_parametersNull THEN
            ls_ErrorMsg:=  sqlerrm || '- CertificateDefaultvalue_Save. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => '  CERTIFICATION_CRUD.CertificateDefaultvalue_Save',
                AX_RECORDDATA    => 'There is at least one parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
                raise_application_error (-20005,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || '- CertificateDefaultvalue_Save. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>'  CERTIFICATION_CRUD.CertificateDefaultvalue_Save',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
                 raise_application_error (-20007,ls_ErrorMsg);
   END CertificateDefaultValue_Save;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

 Procedure CertificTypeDefaultValue_Save(pi_FieldvalueId in number,pi_CertificationTypeID in Number,ps_FieldValue in varchar2) as
      --This procedure should Update the Field value on the CERTIFICATETYPEDEFAULTVALUE table.
      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
  begin
         if pi_FieldvalueId is null or pi_CertificationTypeID is null Then
          raise li_ParametersAreNull;
        end if;
        UPDATE  CERTIFICATETYPEDEFAULTVALUE SET
        FIELDVALUE =  ps_FieldValue,
        MODIFIEDON =  SYSDATE
        WHERE  FIELDID = pi_FieldvalueId And
               CERTIFICATIONTYPEID = pi_CertificationTypeID;
   EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:=  sqlerrm || '- CertificTypeDefaultValue_Save. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => '  CERTIFICATION_CRUD.CertificTypeDefaultValue_Save',
                AX_RECORDDATA    => 'There is at least one parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
              raise_application_error (-20005,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm ||  '- CertificTypeDefaultValue_Save. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>'  CERTIFICATION_CRUD.CertificTypeDefaultValue_Save',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
                      raise_application_error (-20007,ls_ErrorMsg);
  end CertificTypeDefaultValue_Save;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

  Function CheckIfCertificateDFExist(pi_FieldID in number,pi_certificationTypeID in Number,pi_CertificateID in Number) return varchar2 as
  --This function should check if the default value for the certificate exists...
    li_Total integer;
    ls_DefaultValueExists varchar2(1) := 'n';
  begin
        Select Count(1) into li_Total
        from   CERTIFICATEDEFAULTVALUE
        WHERE CERTIFICATIONTYPEID=pi_certificationTypeID aND
              fieldid = pi_FieldID AND
              certificateID = pi_CertificateID;
        if li_Total > 0 then
            ls_DefaultValueExists:='y';
        end if;
        return ls_DefaultValueExists;
  end CheckIfCertificateDFExist;

/******************************************************************************/
/************************   End of Function    ********************************/
/******************************************************************************/

PROCEDURE imarkcertificate_renew( pi_newId        OUT NUMBER,
                                  pi_oldId        IN  NUMBER,
                                  ps_operatorName IN  VARCHAR2) AS
/******************************************************************************
   NAME:       CERTIFICATION_CRUD
   PURPOSE:
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   2.00       09/10/2014   Joe Hill        Added Operations Approval Date to the
                                            c_prodIds cursor and the insert into
                                            PRODUCTCERTIFICATE sql statement
                 10/29/2016  jeseitz      added additional_info to the c_prodIDs cursor and the insert into PRODUCT CERTIFICATE sql statement
/*******************************************************************************/

    -- Exception variables
    li_newCertificateExists EXCEPTION;
    PRAGMA EXCEPTION_INIT(li_newCertificateExists, -20010);
    -- Variables
    ls_machineId VARCHAR2(50) := NULL;
    ls_operatorId VARCHAR2(50) := 'ICSDEV';
    ls_errorMsg VARCHAR2(4000);
    li_oldExtension NUMBER;

    -- Cursor to get the SKUID's attached to a specific certificate ID
    CURSOR  c_prodIds(pi_oldId NUMBER) IS
            SELECT  pc.skuid,
                    p.sku,
                    pc.dateapproved_cegi,
                    pc.dateassigned_egi,
                    pc.datesubmitted,                                           -- JBH_2.00
                    pc.oper_date_approved ,                                      -- JBH_2.00
                    PC.ADDITIONAL_INFO                                    --jeseitz 10/29/2016
            FROM    certificate c
                    INNER JOIN
                    productcertificate pc
                    ON  c.certificateid = pc.certificateid AND
                        c.certificationtypeid = pc.certificationtypeid
                    INNER JOIN
                    product p
                    ON  pc.skuid = p.skuid
            WHERE   c.certificateid = pi_oldId AND
                    pc.dateremoved IS NULL;

    li_oldSkuid           product.skuid%TYPE;
    ls_sku                product.sku%TYPE;
    ld_dateapproved       productcertificate.dateapproved_cegi%TYPE;
    ld_dateassigned       productcertificate.dateassigned_egi%TYPE;
    ld_datesubmitted      productcertificate.datesubmitted%TYPE;
    ld_oper_date_approved productcertificate.oper_date_approved%TYPE;           -- JBH_2.00
    ls_additional_info     productcertificate.additional_info%TYPE;                        --JESEITZ 10/29/2016

    BEGIN

        IF  ps_operatorName IS NOT NULL OR ps_operatorName <> '' THEN
            ls_operatorId := ps_operatorName;
        END IF;

        SELECT  TO_NUMBER(c.extension_en)
        INTO    li_oldExtension
        FROM    certificate c
        WHERE   certificateid = pi_oldId AND
                certificationtypeid = 4;

        INSERT INTO certificate ( certificationtypeid,
                                  certificatenumber,
                                  extension_en,
                                  createdby,
                                  certificateid)
                    VALUES      ( 4,
                                  'I033',
                                  li_oldExtension + 1,
                                  ls_operatorId,
                                  certificateid_seq.NEXTVAL);

        SELECT  certificateid_seq.CURRVAL
        INTO    pi_newId
        FROM    dual;

        OPEN c_prodIds(pi_oldId);

        LOOP
             FETCH  c_prodIds
             INTO   li_oldSkuid,
                    ls_sku,
                    ld_dateapproved,
                    ld_dateassigned,
                    ld_datesubmitted,                                           -- JBH_2.00
                    ld_oper_date_approved,                                      -- JBH_2.00
                    ls_additional_info;
              EXIT  When c_prodIds%notfound;

              INSERT INTO  PRODUCTCERTIFICATE
                        (
                          SKUID,
                          CERTIFICATIONTYPEID,
                          CERTIFICATEID,
                          DATEAPPROVED_CEGI,
                          DATEASSIGNED_EGI,
                          DATESUBMITTED,                                        -- JBH_2.00
                          OPER_DATE_APPROVED,                             -- JBH_2.00
                          ADDITIONAL_INFO                                      -- JESEITZ 10/29.2016
                        )
                        VALUES
                        (
                          li_oldSkuid,
                          4,
                          pi_newId,
                          ld_dateapproved,
                          ld_dateassigned,
                          ld_datesubmitted,                                     -- JBH_2.00
                          ld_oper_date_approved,                                 -- JBH_2.00
                          ls_additional_info                                      -- jesetiz 10/29/2016
                  );
        END LOOP;

        CLOSE c_prodIds;

        UPDATE  certificate
        SET     mostrecentcert = 'n'
        WHERE   certificateid = pi_oldId AND
                certificationtypeid = 4;

    EXCEPTION
         when others then
              ls_ErrorMsg:=  sqlerrm || 'Renew_Imark_Certificate.  An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>'  CERTIFICATION_CRUD.RenewImarkCertificate',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20005,ls_ErrorMsg);

    end ImarkCertificate_Renew;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

 Procedure AddNewSkusToImarkCertificate(pi_Skuid      in number,
                                        pi_countryID  in number) as
  /******************************************************************************
     NAME:       AddNewSkusToImarkCertificate
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0                                      Initial Version
     1.1        11/15/2012    Harini         1.Added DateAssigned_egi as sysdate in productcertificate
                                               Insert statement
  ******************************************************************************/
 --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      ls_SkuBelongsTOCertificate varchar(1);
      ls_LastImarkCertificate varchar2(20);
      ld_SubmitedDate date;
      ls_RequestStatus varchar2(1);
      li_CertificateID number;
      ls_ProductExixts   varchar2(1);

    begin
        ls_SkuBelongsTOCertificate  :=
                ICS_COMMON_FUNCTIONS.CHECKIFSKUBELONGSTOCERTIFICATE(
                      PI_SKUID => PI_SKUID,
                      PI_CERTIFICATIONTYPEID => 4 );

        li_CertificateID:= ICS_COMMON_FUNCTIONS.GETLATESTIMARKCERTIFICATEID();
--        li_CertificateID := ICS_COMMON_FUNCTIONS.GETCERTIFICATEID(
                               -- PS_CERTIFICATENUMBER => ls_LastImarkCertificate,
                                --PI_CERTIFICATIONTYPEID => 4 );

        if  ls_SkuBelongsTOCertificate = 'n' then
        --  Insert on the
            INSERT INTO ICS.PRODUCTCERTIFICATE
                        (
                          SKUID,
                          CERTIFICATIONTYPEID,
                          CERTIFICATEID,
                          DATEASSIGNED_EGI
                        )
                        VALUES
                        (
                          PI_SKUID,
                          4,
                          li_CertificateID,
                          TRUNC(SYSDATE)
                        );

--            Select ce.dateapproved_cegi into ld_SubmitedDate
--            from Certificate ce
--            where ce.certificatenumber = ls_LastImarkCertificate And
--                  ce.certificationtypeid=4;

            if  ld_SubmitedDate is null then
                ls_RequestStatus:='I';
            else
                ls_RequestStatus:='A';
            end if;

--TODO:update product country with same status  as the others.
--            update  productcountry
--            set     REQUESTSTATUS = ls_RequestStatus,
--                    CERTIFICATIONTYPEID =4
--            where   skuid     = PI_SKUID and
--                    countryid = pi_countryID;

          ls_ProductExixts := ICS_COMMON_FUNCTIONS.CHECKIFPRODUCTREQUESTEXISTS( PI_SKUID,4 );
           if ls_ProductExixts='y' then
               --delete existing records from product request so they can correctly be re-added.
              -- DELETE FROM PRODUCTCOUNTRY WHERE SKUID = li_skuid AND certificationtypeid = pi_certificationtypeid;
               DELETE FROM PRODUCTREQUEST WHERE SKUID = PI_SKUID AND certificationtypeid = 4;
            end if;
            INSERT INTO PRODUCTREQUEST (CERTIFICATIONTYPEID, SKUID, REQUESTSTATUS )
                          VALUES(4,PI_SKUID,  ls_RequestStatus);

        end if;

    end AddNewSkusToImarkCertificate;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

PROCEDURE GetCertifExtension(pi_certificateId IN NUMBER, ps_extensionNumber OUT VARCHAR2) AS
    ls_machineId VARCHAR2(50) := NULL;
    ls_operatorId VARCHAR2(50) := 'ICSDEV';
    ls_errorMsg VARCHAR2(4000);
BEGIN
    SELECT c.extension_en INTO ps_extensionNumber
    FROM certificate c
    WHERE c.certificateid = pi_certificateId;
EXCEPTION
    WHEN OTHERS THEN
        ls_errorMsg := SQLERRM || 'GetCertifExtension. An error has occurred.';
        APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_machineId => ls_machineId,
            ad_operatorId => ls_operatorId,
            ad_dateRecorded => SYSDATE,
            as_processName => 'CERTIFICATION_CRUD.GetCertifExtension',
            ax_recordData => 'An error has occurred',
            as_messageCode => TO_CHAR(SQLCODE),
            as_message => ls_errorMsg);
            raise_application_error(-20007, ls_errorMsg);
END GetCertifExtension;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

PROCEDURE GetLatestImarkCertifId(pi_certificateId OUT NUMBER) AS
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_errorMsg VARCHAR2(4000);
BEGIN
       pi_certificateId := ICS_COMMON_FUNCTIONS.GETLATESTIMARKCERTIFICATEID();
EXCEPTION
       WHEN OTHERS THEN
              ls_errorMsg :=  SQLERRM || 'GetLatestImarkCertifId.  An error has ocurred.(when others)';
              APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>'  CERTIFICATION_CRUD.GetLatestImarkCertifId',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);
END GetLatestImarkCertifId;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

PROCEDURE GetLatestGSOCertifNumber(ps_certificateNumber OUT VARCHAR2) AS
ls_CertificateNumber VARCHAR2(20);
ls_MachineId VARCHAR2(50) := NULL;
ls_OperatorId VARCHAR2(50) := 'ICSDEV';
ls_ErrorMsg VARCHAR2(4000);
BEGIN
       ls_CertificateNumber := ICS_COMMON_FUNCTIONS.GETLATESTGSOCERTIFICATENUM();
       ps_certificateNumber := ls_CertificateNumber;
  EXCEPTION
         when others then
              ls_ErrorMsg:=  sqlerrm || 'GetLatestGSOCertifNumber.  An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>'  CERTIFICATION_CRUD.GetLatestGSOCertifNumber',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);
 end GetLatestGSOCertifNumber;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

 PROCEDURE Get_Brands(Pc_Retcursor OUT Retcursor)
 AS
 /******************************************************************************
     NAME:       Get_Brands
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0        2/18/2013   Krishna          - Added Brand IS NOT NULL condition
                                             - Added Trim function in select
                 3/14/2013   jeseitz   --- added union with CMDR_DATA to also get new brands for marketing screen
  ******************************************************************************/
 BEGIN

    OPEN pc_retCursor FOR
  SELECT DISTINCT upper(TRIM(Brand)) AS Brand
      FROM Product
     WHERE Brand IS NOT NULL
     UNION
     SELECT DISTINCT upper(TRIM(ATTRIB_VALUE)) AS Brand
     FROM CMDR_DATA.MATERIAL_ATTRIBUTE
     WHERE ATTRIB_NAME = 'BRAND'
   ORDER BY Brand;

--    OPEN pc_retCursor FOR
--    SELECT DISTINCT TRIM(Brand) AS Brand
--      FROM Product
--     WHERE Brand IS NOT NULL
--  ORDER BY Brand;

 END Get_Brands;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

 PROCEDURE Get_BrandLines (ps_Brand IN VARCHAR2,
                           pc_retCursor OUT retCursor) as
 /******************************************************************************
     NAME:       Get_BrandLines
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0        2/18/2013   Krishna          - Added Brand_Line IS NOT NULL condition
                                             - Added Trim function in select
              3/14/2013   jeseitz   --- added union with CMDR_DATA to also get new brand_lines for marketing screen
  ******************************************************************************/
 BEGIN

  OPEN pc_retCursor FOR
--       SELECT DISTINCT TRIM(Brand_Line) AS Line
--         from product
--        WHERE UPPER(TRIM(Brand)) = UPPER(TRIM(ps_Brand))
--          AND Brand_Line IS NOT NULL

SELECT DISTINCT upper(TRIM(Brand_Line)) AS Line   -- GET BRAND_LINES FROM PRODUCT TABLE
         from product
         WHERE UPPER(TRIM(Brand)) = UPPER(TRIM(ps_Brand))
            AND Brand_Line IS NOT NULL
        union
           select distinct upper(trim(attrib_value)) as Line   -- ALSO GET BRAND_LINES FROM CMDR IN CASE THERE ARE NEW ONES.
           from cmdr_data.material_attribute
           where attrib_name = 'BRAND_LINE'
           AND MATL_NUM IN (SELECT MATL_NUM FROM CMDR_DATA.MATERIAL_ATTRIBUTE
               WHERE ATTRIB_NAME = 'BRAND' AND  UPPER(TRIM(ATTRIB_VALUE)) = UPPER(TRIM(ps_Brand)))
       ORDER BY Line;

END Get_BrandLines;


/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

PROCEDURE GetSKUDescriptors(ps_Matl_Num            IN  VARCHAR2,
                            pc_RetCursor           OUT retCursor)
AS
 /******************************************************************************
     NAME:       GetSKUDescriptors
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0        10/22/2013   Harini          Initial Version
******************************************************************************/
ls_errorMsg VARCHAR2(4000);
ls_MachineId VARCHAR2(50):=null;
ls_OperatorId VARCHAR2(50):='ICSDEV';
BEGIN
OPEN pc_RetCursor FOR


   SELECT ma.Matl_Num,
          ma.Attrib_Name,
          ma.Attrib_Value
    FROM  Material_Attribute ma


    WHERE MA.Matl_Num = ps_Matl_Num
    AND (UPPER(ma.Attrib_Name) = 'TUBE_TYPE'
    OR   UPPER(ma.Attrib_Name) = 'SIDEWALL_TYPE'
    OR   UPPER(ma.Attrib_Name) = 'LEGACY_COOPER_SKU'
    OR   UPPER(ma.Attrib_Name) = 'RMA_TIRE_PLY_CONSTRUCTION'
    OR   UPPER(ma.Attrib_Name) = 'BRAND_LINE' );
EXCEPTION
    WHEN OTHERS THEN
        ls_errorMsg := SQLERRM || 'GetSKUDescriptors. An error has occurred.';
        APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_machineId => ls_machineId,
            ad_operatorId => ls_operatorId,
            ad_dateRecorded => SYSDATE,
            as_processName => 'CERTIFICATION_CRUD.GetSKUDescriptors',
            ax_recordData => 'An error has occurred',
            as_messageCode => TO_CHAR(SQLCODE),
            as_message => ls_errorMsg);
            raise_application_error(-20007, ls_errorMsg);
END GetSKUDescriptors;

/******************************************************************************/
/************************   End of Procedure   ********************************/
/******************************************************************************/

END CERTIFICATION_CRUD;
/

create or replace PACKAGE           ICS_COMMON_FUNCTIONS as
/******************************************************************************
   NAME:       ICS_COMMON_FUNCTIONS
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0
   1.1        10/04/2012    Harini         1.Replaced ps_SKU with ps_Matl_Num in
                                            GetLatestSkuIdBySKU,CheckIfSKUExists
                                            procedures.
                                            Replaced ps_SKUExist with ps_MatlExist
                                            in CheckIfSKUExists procedure.
   1.2        11/21/2013    Harini          1.Modified pi_CertificateID to  ps_certificatenumber
                                            in  CheckIfCertificateContainsSKU function
                                            2.Added pi_certificationtypeid parameter in
                                            CheckIfProductCountryExists function
                 04/07/2016  JESEITZ  added  procedure GetCertificatesByType
******************************************************************************/
 TYPE retCursor IS REF CURSOR;

   Function GetCertificationID(ps_CertificationTypeName in varchar2) return integer;
     Function GetCertificationNameByID(pn_CertificationTypeID in varchar2) return string;
   Function GetCertTemplate(ps_CertificationTypeName in varchar2) return varchar2;
   FUNCTION GetLatestSkuIdBySKU(ps_Matl_Num IN VARCHAR2) RETURN NUMBER;
    FUNCTION getcustomerbyid(pi_customerid IN NUMBER) RETURN VARCHAR2;

   function GetReportNumber(ps_CErtificateNumber in varchar2,pi_CertificationTypeID in Number) return varchar2;

   PROCEDURE CheckIfSKUExists(ps_Matl_Num IN VARCHAR2,ps_MatlExist OUT VARCHAR2);

   function CheckCertDateSubmitted(pi_certificateid in number) return varchar2;

   function CheckIfCertificateExists(ps_CertificateNumber in varchar2, pi_certificationTypeId in integer) return varchar2;

   procedure CheckIfCertificateNumberExists(ps_CertificateNumber in varchar2, ps_CertificateNumberExists out varchar2 );

   FUNCTION GetLatestImarkCertificateID RETURN NUMBER;

   function GetLatestGSOCertificateNum return varchar2;

   function GetCertifiIDByCountry(pi_CountryID in Number) return number;
   Function CheckIfProductCountryExists(pi_SkuID in number, pi_certificationtypeid IN NUMBER) return varchar2 ;
   Function CheckIfProductRequestExists(pi_SkuID in number, pi_certificationtypeid IN NUMBER) return varchar2 ;
   Function CheckIfSkuBelongsToCertificate(pi_SkuID in number,pi_CertificationTypeID in number) return varchar2 ;
   Function GetCertifTypeIDByCountryID(pi_CountryID in number) return Number ;

   Function GetCertificateID(ps_CertificateNumber in varchar2,pi_CertificationTypeID in integer) return certificate.certificateid%type ;
   Function GetCertificateNumber(pi_CertificateID in number,pi_CertificationTypeID in number) return certificate.certificatenumber%type ;
   Function GetRequestStatus(ps_CertificateNumber in varchar2) return varchar2 ;
   Procedure GetCertificateIDByNumber(ps_CertificateNumber in varchar2,
                                       pi_CertificationTypeID in integer,
                                       ps_ExtensionNo in varchar2,
                                       pi_CertificateID out number
                                       );
function CheckIfCertificateContainsSKU(pi_SkuID               in number,
                                       pi_CertificationTypeID in number,
                                       ps_certificatenumber   in VARCHAR2) return varchar2 ;
Procedure GetCertificatesByType( pn_CertificationTypeID in number,ps_All in varchar2, pc_retCursor out retCursor);
/*Function get_columnvalue (
        vs_sku                  in varchar ,
        vs_brandcode            in varchar ,
        vs_columnname           in varchar ,
        vs_tablename            IN varchar ) return varchar2;*/
END ICS_COMMON_FUNCTIONS;
/

create or replace PACKAGE BODY           ICS_COMMON_FUNCTIONS AS
/******************************************************************************
   NAME:       ICS_COMMON_FUNCTIONS
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0
   1.1        10/04/2012    Harini         1.Replaced ps_SKU with ps_Matl_Num in
                                            GetLatestSkuIdBySKU,CheckIfSKUExists
                                            procedures.
                                            Replaced ps_SKUExist with ps_MatlExist
                                            in CheckIfSKUExists procedure.
   1.2        11/21/2013    Harini         1.Modified pi_CertificateID to ps_certificatenumber
                                            in  CheckIfCertificateContainsSKU function
                                           2.Added pi_certificationtypeid parameter in
                                            CheckIfProductCountryExists function
  1.3        03/05/2014    Harini          1.Modified CheckIfCertificateContainsSKU procedure
                                            where condition.
******************************************************************************/

  Function GetCertificationID(ps_CertificationTypeName in varchar2) return integer as

    li_CertificationId number;
    begin
          SELECT ce.CertificationTypeId into li_certificationId
          FROM  CertificationType ce
          WHERE lower(ce.CertificationTypeName)=lower(ps_CertificationTypeName);

          return li_CertificationId;

    end GetCertificationID;


     Function GetCertificationNameByID(pn_CertificationTypeID in varchar2) return string as

    ls_CertificationName varchar2(50);
    begin
          SELECT CE.CERTIFICATIONTYPENAME into ls_CertificationName
          FROM  CertificationType ce
          WHERE lower(CE.CERTIFICATIONTYPEID ) =pn_CertificationTypeID;

          return  ls_CertificationName;

    end GetCertificationNameByID;


     Function GetCertTemplate(ps_CertificationTypeName in varchar2) return varchar2 as

    ls_CertTemplate certificationtype.CertTemplate%type;
    begin
         ls_CertTemplate := '';
         begin
             SELECT ce.CertTemplate into ls_CertTemplate
                  FROM  CertificationType ce
                   WHERE lower(ce.CertificationTypeName)=lower(ps_CertificationTypeName);
          exception
              when others then
                   ls_CertTemplate := '';
           end;

          return ls_CertTemplate ;


    end GetCertTemplate;

    FUNCTION getcustomerbyid(pi_customerid IN NUMBER) RETURN VARCHAR2 AS

  ls_customer VARCHAR2(100);

  BEGIN
    SELECT c.customer INTO ls_customer
    FROM customer c
    WHERE c.customerid = pi_customerid;

    RETURN ls_customer;

  END getcustomerbyid;

   function CheckIfSkuBelongsToCertificate(pi_SkuID in number,pi_CertificationTypeID in number) return varchar2 as
   lc_Exist char:= 'n';
   li_totalCertificates integer;
   begin
        SELECT COUNT(1) INTO li_totalCertificates
        FROM  productcertificate pce
        WHERE pce.CERTIFICATIONTYPEID = pi_CertificationTypeID And
              pce.skuid=pi_SkuID;

        if li_totalCertificates > 0 THEN
            lc_Exist:='y';
        else
            lc_Exist:='n';
        end if;

        return lc_Exist;

   end;

   function CheckIfCertificateContainsSKU(pi_SkuID in number,
                                          pi_CertificationTypeID in number,
                                          ps_certificatenumber in VARCHAR2) return varchar2 as
  /******************************************************************************
   NAME:       CheckIfCertificateContainsSKU
   PURPOSE:    Check whether the Certificate contains SKU

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0                                      Initial Version
   1.1       11/21/2013   Harini            Modified pi_CertificateID to  ps_certificatenumber
                                            in input parameters
   1.2       03/05/2014   Harini            Added Upper(Certificatenumber) in where condition
******************************************************************************/
   lc_Exist CHAR:= 'n';
   li_totalCertificates integer;

   BEGIN
        SELECT COUNT(1) INTO li_totalCertificates
        FROM  ProductCertificate pce,
              Certificate ce
        WHERE UPPER(ce.certificatenumber)    = UPPER(ps_certificatenumber)
         AND  pce.skuid                      = pi_SkuID
         AND  ce.certificationtypeID         = pi_CertificationTypeID
         AND  pce.CERTIFICATIONTYPEID        = ce.CertificationTypeID
         AND  pce.certificateid              = ce.certificateid;

        IF li_totalCertificates > 0 THEN
            lc_Exist:='y';
        ELSE
            lc_Exist:='n';
        END IF;

        RETURN lc_Exist;

   END CheckIfCertificateContainsSKU;

   FUNCTION GetLatestSkuIdBySKU(ps_Matl_Num IN VARCHAR2) RETURN NUMBER
   AS
  /******************************************************************************
   NAME:       GetLatestSkuIdBySKU
   PURPOSE:    Get the latest SKUID of the given matl_num

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0
   1.1        10/04/2012    Harini         1.Replaced ps_SKU with ps_Matl_Num.
                                             Replaced SKU with Matl_Num in where
                                             condition.
******************************************************************************/
   li_SKUID NUMBER;

   BEGIN
       SELECT NVL(MAX(SKUID),0)
         INTO li_SKUID
         FROM PRODUCT
        WHERE Matl_Num = LPAD(ps_Matl_Num,18,0);

        RETURN li_SKUID;
   END;

   function GetReportNumber(ps_CErtificateNumber in varchar2,pi_CertificationTypeID in Number) return varchar2 as
    --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);

      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);

      ls_ReportNumber varchar2(50);

   begin

       SELECT SUBSTR(sku,9,4) || '-' ||
               p.singloadindex || 'H' || '-' ||
                (case
                    when p.mudsnowyn ='y' then 'Y'
                    when p.mudsnowyn ='n' then 'N'
                 end
                )  as ReportNumber into ls_reportnumber
      FROM Certificate ce
            inner join ProductCertificate pce on
                  ce.certificateid   = pce.certificateid and
                  ce.certificationtypeid = pce.certificationtypeid
            inner join product p on
                  pce.skuid = p.skuid
      WHERE lower(ce.certificatenumber) = lower(ps_CErtificateNumber) And
            ce.certificationtypeid = pi_CertificationTypeID;

       return ls_reportnumber;

   end GetReportNumber;

   PROCEDURE CheckIfSKUExists(ps_Matl_Num IN VARCHAR2,ps_MatlExist OUT VARCHAR2)
   AS
    /******************************************************************************
   NAME:       CheckIfSKUExists
   PURPOSE:    Check whether the Matl_Num exists

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0
   1.1        10/04/2012    Harini         1.Replaced ps_SKU with ps_Matl_Num.
                                             SKUMAIN_PRODUCT_VIEW is replaced with
                                             the below query given in TD.
 ******************************************************************************/
      --Exception variables
      li_ParametersAreNull EXCEPTION;

      -- link the exception to the error number
      PRAGMA exception_init( li_ParametersAreNull,-20005);

      --variable
      ls_MachineId  VARCHAR2(50) := NULL;
      ls_OperatorId VARCHAR2(50) := 'ICSDEV';
      LS_ERRORMSG   varchar2(4000);
      ls_Matl_Num Product.Matl_Num%TYPE;

      li_Matlexist INTEGER;

   BEGIN
        IF ps_Matl_Num IS NULL THEN
            RAISE li_ParametersAreNull;
        END IF;

        ls_Matl_Num := LPAD(ps_Matl_Num,18,0);
         SELECT COUNT(Matl_Num) INTO li_Matlexist
         from  (select MATL_NUM from PRODUCT
                WHERE Matl_Num = ls_Matl_Num
                  UNION
                SELECT Matl_Num FROM CMDR_DATA.Material_Class_Link
                WHERE Matl_Num = ls_Matl_Num);

        IF li_Matlexist > 0 THEN
            ps_MatlExist := 'y';
        ELSE
            ps_MatlExist := 'n';
       END IF;
     EXCEPTION
        WHEN li_ParametersAreNull THEN
           ls_ErrorMsg:=  sqlerrm || ' - CheckIfSKUExists. There are null parameters.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID    => ls_OperatorId,
                AD_DATERECORDED  => SYSDATE,
                AS_PROCESSNAME   => '  ICS_COMMON_FUNCTIONS.CheckIfSKUExists',
                AX_RECORDDATA    => 'There is at least one parameters null..',
                AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                AS_MESSAGE       => ls_ErrorMsg);
               Raise_Application_Error (-20005,ls_ErrorMsg);

         WHEN OTHERS THEN

              ls_ErrorMsg:=  sqlerrm || ' - CheckIfSKUExists.  An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID    => ls_OperatorId,
                      AD_DATERECORDED  => SYSDATE,
                      AS_PROCESSNAME   =>'  ICS_COMMON_FUNCTIONS.CheckIfSKUExists',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                      AS_MESSAGE       =>ls_ErrorMsg);
               Raise_Application_Error (-20007,ls_ErrorMsg);

   END CheckIfSKUExists;

   function CheckCertDateSubmitted(pi_CertificateID in number) return varchar2 as
    --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);

      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);

      li_DateSubmittedExists integer;
      ls_DateSubmittedExists varchar2(1);

   begin
        if pi_CertificateID is null then
            raise li_ParametersAreNull;
        end if ;

        SELECT COUNT(1) INTO li_DateSubmittedExists
        FROM productcertificate
        WHERE certificateid = pi_certificateId AND datesubmitted IS NOT NULL;
        --SELECT Count(1) into li_DateSubmittedExists
       -- FROM  Certificate ce
        --WHERE ce.certificateid = pi_CertificateID AND Not ce.datesubmited Is Null;

        if li_DateSubmittedExists > 0 then
          ls_DateSubmittedExists:='y';
        else
          ls_DateSubmittedExists:='n';
        end if;

        return ls_DateSubmittedExists;

     EXCEPTION
        when li_ParametersAreNull then

            ls_ErrorMsg:=  sqlerrm || '- CheckCertDateSubmitted. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => '  ics_common_functions.CheckCertDateSubmitted',
                AX_RECORDDATA    => 'There is at least one parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
                raise_application_error (-20005,ls_ErrorMsg);

         when others then

              ls_ErrorMsg:=  sqlerrm || '- CheckCertDateSubmitted. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>'  ics_common_functions.CheckCertDateSubmitted',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
                      raise_application_error (-20007,ls_ErrorMsg);

   end CheckCertDateSubmitted;

    FUNCTION CheckIfCertificateExists(ps_CertificateNumber IN VARCHAR2, pi_CertificationTypeID IN INTEGER) RETURN VARCHAR2 AS

    lc_exists VARCHAR2(1) := 'n';
    li_totalCertificates NUMBER;

    BEGIN
        /*IF pi_CertificationTypeID = 6 THEN  -- ECE117 could have e4 (Melksham) or E4, so ignore case
            SELECT COUNT(1) INTO li_totalCertificates
            FROM certificate c
            WHERE c.certificationtypeid = pi_CertificationTypeID AND c.certificatenumber = ps_CertificateNumber;
        ELSE*/
            SELECT COUNT(1) INTO li_totalCertificates
            FROM certificate c
            WHERE c.certificationtypeid = pi_CertificationTypeID AND UPPER(c.certificatenumber) = UPPER(ps_CertificateNumber);
       -- END IF;

        IF li_totalCertificates > 0 THEN
            lc_exists := 'y';
        ELSE
            lc_exists := 'n';
        END IF;

        RETURN lc_exists;

    END CheckIfCertificateExists;

    procedure CheckIfCertificateNumberExists(ps_CertificateNumber in varchar2,ps_CertificateNumberExists out varchar2 ) as
    --Exception variables
      li_ParametersAreNull exception;
      li_DuplicateCertNumbers exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);

      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);

      li_CertificateNumberExists integer;

   begin
        if ps_CertificateNumber is null then
            raise li_ParametersAreNull;
        end if ;

        SELECT Count(*) into li_CertificateNumberExists
        FROM  Certificate ce
        WHERE Lower(ce.certificatenumber) = lower(ps_CertificateNumber);

        if li_CertificateNumberExists > 1 Then
            raise li_DuplicateCertNumbers;
        Elsif li_CertificateNumberExists < 1 Then
             ps_CertificateNumberExists:='n';
        Else
             ps_CertificateNumberExists:='y';
        end if;

     EXCEPTION
        when li_ParametersAreNull then

            ls_ErrorMsg:=  sqlerrm || '- CheckIfCertificateNumberExists. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => '  ics_common_functions.CheckIfCertificateNumberExists',
                AX_RECORDDATA    => 'There is at least one parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
                raise_application_error (-20005,ls_ErrorMsg);

        when li_DuplicateCertNumbers then

            ls_ErrorMsg:=  sqlerrm || '- CheckIfCertificateNumberExists. Multiple certification numbers found.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => '  ics_common_functions.CheckIfCertificateNumberExists',
                AX_RECORDDATA    => 'Multiple certification numbers found..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
                raise_application_error (-20005,ls_ErrorMsg);

         when others then

              ls_ErrorMsg:=  sqlerrm || '- CheckIfCertificateNumberExists. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>'  ics_common_functions.CheckIfCertificateNumberExists',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
                      raise_application_error (-20007,ls_ErrorMsg);

   end CheckIfCertificateNumberExists;

   FUNCTION GetLatestImarkCertificateId RETURN NUMBER AS

   li_certificateId NUMBER;
   li_total NUMBER;

   BEGIN

        SELECT COUNT(c.certificateid) into li_total
        FROM certificate c
        WHERE c.certificationtypeid = 4 ;
          --AND c.certificatenumber LIKE '%I033%';   jeseitz 04/06/16

        IF li_total > 0 THEN
            SELECT c.certificateid INTO li_certificateID
            FROM certificate c
            ---jeseitz 04/06/2016WHERE c.certificationtypeid = 4 AND c.certificatenumber LIKE '%I033%' AND UPPER(c.mostrecentcert) = 'Y' ;
             WHERE c.certificationtypeid = 4 AND UPPER(c.mostrecentcert) = 'Y' ;

            RETURN  li_certificateId;
        ELSE
             RETURN 0;
        END IF;

   END GetLatestImarkCertificateId;

  FUNCTION GetLatestGSOCertificateNum RETURN VARCHAR2 AS

   ls_CertificateNumber VARCHAR2(100);
   ls_CurrYear VARCHAR(4);
   li_Increment PLS_INTEGER;
   li_Total PLS_INTEGER;

   BEGIN
        SELECT TO_CHAR(EXTRACT(YEAR FROM SYSDATE)) INTO ls_CurrYear
        FROM dual;

        SELECT COUNT(c.certificatenumber) INTO li_Total
        FROM certificate c
        WHERE c.certificationtypeid = 2 AND LOWER(c.certificatenumber) LIKE 'gso-%' AND LENGTH(c.certificatenumber) = 12 AND SUBSTR(c.certificatenumber, 5, 4) = ls_CurrYear;

        IF li_Total > 0 THEN
            SELECT MAX(c.certificatenumber) INTO ls_CertificateNumber
            FROM certificate c
            WHERE c.certificationtypeid = 2 AND LOWER(c.certificatenumber) LIKE 'gso-%' AND LENGTH(c.certificatenumber) = 12 AND SUBSTR(c.certificatenumber, 5, 4) = ls_CurrYear;

            li_Increment := TO_NUMBER(SUBSTR(ls_CertificateNumber, 10, 3));
            ls_CertificateNumber := REPLACE(ls_CertificateNumber, '-' || SUBSTR(ls_CertificateNumber, 10, 3), '-' || TRIM(TO_CHAR(li_Increment + 1, '009')));

            RETURN ls_CertificateNumber;
        ELSE
            ls_CertificateNumber := 'GSO-' || ls_CurrYear || '-000';

            RETURN ls_CertificateNumber;
        END IF;

   END GetLatestGSOCertificateNum;


   FUNCTION GetCertifiIDByCountry(pi_CountryID in Number) return number as
   li_CertificationTypeID  CERTIFICATIONTYPE.CERTIFICATIONTYPEID%TYPE;

   Begin
         SELECT nvl(c.certificationtypeid,'0') into li_certificationtypeid
         FROM COUNTRY c
         WHERE c.countryid = pi_countryid;

         return LI_CERTIFICATIONTYPEID;
   End GetCertifiIDByCountry;

   Function CheckIfProductCountryExists(pi_SkuID in number,pi_certificationtypeid IN Number) return varchar2 as
  /******************************************************************************
   NAME:       CheckIfProductCountryExists
   PURPOSE:    Check whether the Product countru exists

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0
   1.1        11/21/2012    Harini         1.Added pi_certificationtypeid in input
                                          and where clause
 ******************************************************************************/
   ls_TotalSkuids number;
   begin
        Select Count(SKUID) into ls_TotalSkuids
        From  ProductCountry
        Where skuid = pi_SkuID
        and   certificationtypeid = pi_certificationtypeid;

        if ls_TotalSkuids > 0 then
            return 'y';
        else
            return 'n';
        end if;

   end CheckIfProductCountryExists;

    Function CheckIfProductRequestExists(pi_SkuID in number,pi_certificationtypeid IN Number) return varchar2 as
  /******************************************************************************
   NAME:       CheckIfProductRequestExists
   PURPOSE:    Check whether the Product request exists

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0
   1.1        11/21/2012    Harini         1.Added pi_certificationtypeid in input
                                          and where clause
 ******************************************************************************/
   ls_TotalSkuids number;
   begin
        Select Count(SKUID) into ls_TotalSkuids
        From  ProductRequest
        Where skuid = pi_SkuID
        and   certificationtypeid = pi_certificationtypeid;

        if ls_TotalSkuids > 0 then
            return 'y';
        else
            return 'n';
        end if;

   end CheckIfProductRequestExists;




   Function GetCertifTypeIDByCountryID(pi_CountryID in number) return Number as

   li_CertificationTypeID number;
   begin
        Select co.certificationtypeid into li_CertificationTypeID
        From  Country co
        Where co.countryid = pi_CountryID;

        return li_CertificationTypeID;

   end GetCertifTypeIDByCountryID;

    Procedure GetCertificateIDByNumber(ps_CertificateNumber in varchar2,
                                       pi_CertificationTypeID in integer,
                                       ps_ExtensionNo in varchar2,
                                       pi_CertificateID out number
                                       )  as

   li_CertificateID certificate.certificateid%type;
   li_Total number;
   begin

           Select Count(1) into li_Total
           FROM  CERTIFICATE ce
           WHERE CE.CERTIFICATIONTYPEID = pi_CertificationTypeID And
                 lower(ce.certificatenumber)   = lower(ps_CertificateNumber) And lower(ce.extension_en) = lower(ps_ExtensionNo);

           if li_Total = 0 then
               li_CertificateID:=0;
           else
                 SELECT CertificateID INTO li_CertificateID
                  FROM  CERTIFICATE ce
                  WHERE CE.CERTIFICATIONTYPEID = pi_CertificationTypeID And
                        lower(ce.certificatenumber)   = lower(ps_CertificateNumber) And lower(ce.extension_en) = lower(ps_ExtensionNo);
           end if;

        pi_CertificateID:= li_CertificateID;

   end GetCertificateIDByNumber;

   Function GetCertificateID(ps_CertificateNumber in varchar2,pi_CertificationTypeID in integer) return certificate.certificateid%type as

   li_CertificateID certificate.certificateid%type;
   begin
       if ((ps_CertificateNumber <> '') or (ps_CertificateNumber is not null))
          and (ps_CertificateNumber <> 'NotFound') then

           SELECT CertificateID INTO li_CertificateID
            FROM  CERTIFICATE ce
            WHERE CE.CERTIFICATIONTYPEID = pi_CertificationTypeID And
                  lower(ce.certificatenumber)   = lower(ps_CertificateNumber);
       else
            li_CertificateID:=-1;
       end if;

        return li_CertificateID;

   end GetCertificateID;

  Function GetCertificateNumber(pi_CertificateID in number,pi_CertificationTypeID in number) return certificate.certificatenumber%type as

   ls_CertificateNumber certificate.certificatenumber%type;
   li_TotalID number;
  begin
        Select count(ce.CertificateID) into li_TotalID
        From Certificate ce
        where ce.certificateid=pi_CertificateID and
              ce.certificationtypeid=pi_CertificationTypeID;

        if li_TotalID  < 0 then

            Select ce.CertificateNumber into ls_CertificateNumber
            from certificate ce
            where ce.certificateid=pi_CertificateID and
                  ce.certificationtypeid=pi_CertificationTypeID;

            return ls_CertificateNumber;
        else
            return 'NotFound';
        end if;

  end GetCertificateNumber;

  Function GetRequestStatus(ps_CertificateNumber in varchar2) return varchar2 as

   ls_RequestStatus varchar2(50);
   ls_CertificationTypeID number;

  begin

      SELECT ce.certificationtypeid INTO ls_CertificationTypeID
      FROM certificate ce
      WHERE LOWER(ce.certificatenumber) = LOWER(ps_CertificateNumber)  AND ROWNUM < 2;

       IF ls_CertificationTypeID = 6 THEN
            ls_CertificationTypeID := 1;
       END IF;

--       SELECT
--                 distinct(
--          CASE
--          WHEN pc.RequestStatus  is not null  AND  pc.RequestStatus='I'  THEN 'InProgress'
--          WHEN pc.RequestStatus  is not null  AND  pc.RequestStatus='A'  THEN 'Approved'
--          WHEN pc.RequestStatus IS NOT NULL AND pc.RequestStatus='R' THEN 'Requested'
--          WHEN pc.RequestStatus  is null                                 THEN 'Requested'
--          END
--         ) AS State into ls_RequestStatus
--        FROM Certificate ce
--                inner join CertificationType ct on
--                     --ce.certificationtypeid = ct.certificationtypeid
--                     ct.certificationtypeid = ls_CertificationTypeID
--                inner join Country c on
--                     --c.certificationtypeid = ct.certificationtypeid
--                      c.certificationtypeid = ls_CertificationTypeID
--                inner join productCountry pc on
--                    c.countryid = pc.countryid
--         where lower(ce.certificatenumber) =lower(ps_CertificateNumber)  And Rownum < 2;
--
               SELECT
                 distinct(
          CASE
          WHEN pr.RequestStatus  is not null  AND  pr.RequestStatus='I'  THEN 'InProgress'
          WHEN pr.RequestStatus  is not null  AND  pr.RequestStatus='A'  THEN 'Approved'
          WHEN pr.RequestStatus IS NOT NULL AND pr.RequestStatus='R' THEN 'Requested'
          WHEN pr.RequestStatus  is null                                 THEN 'Requested'
          END
         ) AS State into ls_RequestStatus
        FROM Certificate ce
                inner join CertificationType ct on
                     --ce.certificationtypeid = ct.certificationtypeid
                     ct.certificationtypeid = ls_CertificationTypeID
                   inner join ics.productRequest pr on
                    CE.CERTIFICATIONTYPEID = pr.certificationtypeid
         where lower(ce.certificatenumber) =lower(ps_CertificateNumber)  And Rownum < 2;

       return ls_RequestStatus;

  end GetRequestStatus;


 /*Function get_columnvalue (
        vs_sku                  IN varchar ,
        vs_brandcode            IN varchar ,
        vs_columnname           IN varchar ,
        vs_tablename            IN varchar )
--        lls_SkuMainValue        out varchar(60))
 RETURN  varchar aS

ls_SkuMainValue varchar(200);
ls_Sql  varchar(5000);
BEGIN
   ls_Sql :='Select ' || vs_columnname || ' FROM SKUMAIN_MV WHERE SKU =:sku and brandcode =:b and rownum < 2';
   EXECUTE IMMEDIATE ls_Sql  into ls_SkuMainValue using vs_Sku,vs_BrandCode;
 return ls_SkuMainValue;
--SELECT vn_columnname
--    FROM


END get_columnvalue;*/

procedure GetCertificatesByType( pn_CertificationTypeID in number,ps_All in varchar2, pc_retCursor out retCursor) as
        ls_MachineId VARCHAR2(50):=null;
        ls_OperatorId VARCHAR2(50):='ICSDEV';
        ls_ErrorMsg VARCHAR2(4000);
    begin

        if upper(ps_all) = 'Y' then --- then all certificates
          Open pc_retCursor for
            select c.certificateid, C.CERTIFICATENUMBER, c.extension_en, C.MOSTRECENTCERT from ics.certificate c
              where C.CERTIFICATIONTYPEID = pn_CertificationTypeID
              order by certificatenumber,extension_en;
        else
           Open pc_retCursor for
                      select c.certificateid, C.CERTIFICATENUMBER, c.extension_en, C.MOSTRECENTCERT from ics.certificate c
              where C.CERTIFICATIONTYPEID = pn_CertificationTypeID and C.ARCHIVEDATE_CEGI is null
              order by certificatenumber,extension_en;
        end if;

        EXCEPTION
        when others then
            ls_ErrorMsg:=  sqlerrm || ' -  GetCertificatesByType. An error has ocurred.(when others)';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT
              (
                as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED => sysdate,
                AS_PROCESSNAME =>' ICS_COMMON_FUNCTIONS. GetCertificatesByType',
                AX_RECORDDATA    => 'An error haS ocurred.(when others)',
                AS_MESSAGECODE => to_char(sqlcode),
                AS_MESSAGE       =>sqlerrm
              );
            raise_application_error (-20007,ls_ErrorMsg);
    end GetCertificatesByType;



END ICS_COMMON_FUNCTIONS;
/

create or replace PACKAGE           ICS_CRUD AS
/******************************************************************************
   NAME:       ICS_CRUD
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0
   1.1        10/2/2012     Harini         1.Modified SearchBrand,CreateOrDeleteProductCountry,
                                           ProductCountry_Save procedures by replacing BrandCode
                                           with Brand and Brand_Line,SKu with Matl_num
                                           Created new procedure GetTireCharacteristicsAll for getting
                                           all the characteristics of tire for a given material.
   1.2        11/04/2013    Harini         1.As per IDEA 2706,Added ps_SevereWeatherInd  as output parameter
                                           in GetTireCharacteristicsAll procedure
   1.3       06/02/2016   JESEITZ    Added Procedures ProductRequestCert_Save and ProductRequest_Save for
                                                  MarketingNew screen that shows all certifications on one screen.
******************************************************************************/
 TYPE retCursor IS REF CURSOR;

  --    PROCEDURE get_query_source(pc_retCursor OUT retCursor);
 PROCEDURE imarkconformityupdate(pd_certdatesubmitted IN DATE);
 PROCEDURE manage_customer(ps_addnewcustomer IN VARCHAR2, pi_customerid IN NUMBER, ps_customer_n IN VARCHAR2, ps_customeraddress_n IN VARCHAR2, ps_actsigreq IN VARCHAR2, ret_customerid OUT NUMBER);
 PROCEDURE manage_importer(ps_addnewimporter IN VARCHAR2, pi_importerid IN NUMBER, ps_importer_n IN VARCHAR2, ps_importeraddress_n IN VARCHAR2, ps_importerrepresentative_n IN VARCHAR2, ps_countrylocation_n IN VARCHAR2, ret_importerid OUT NUMBER);
 PROCEDURE GetRegions( pc_retCursor out retCursor);
 PROCEDURE getcustomers(pc_customers OUT retCursor);
 PROCEDURE getimporters(pc_importers OUT retCursor);
 PROCEDURE GetRegionsAndCountries( pc_retCursor out retCursor);
 PROCEDURE GetCountriesByRegionID( pc_Countries out retCursor,pi_RegionId in integer);
 PROCEDURE GetCountriesByRegionName( pc_Countries out retCursor,ps_RegionName in varchar);
 PROCEDURE getsearchtypes(pc_retCursor OUT retCursor);
 procedure GetManufacturingLocs( pc_retCursor out retCursor);
 PROCEDURE GetCompanyNames(pc_retCursor OUT retCursor);
 PROCEDURE GetCertifications( pc_retCursor out retCursor);
 PROCEDURE SearchBrand(pc_BrandProduct out retCursor, pc_RegionsCertified out retCursor,pc_RegionNotCertified out retCursor, ps_Brand IN  VARCHAR2,ps_Brand_Line VARCHAR2);
 PROCEDURE SearchBrandRequests (pc_BrandProduct out retCursor,  ps_Brand IN  VARCHAR2,ps_Brand_Line VARCHAR2);
 PROCEDURE CreateOrDeleteProductCountry (ps_DeleteMe in char,ps_Matl_Num IN VARCHAR2,pi_skuId in integer,pi_Countryid in integer);
 PROCEDURE ProductCountry_Save (ps_DeleteMe in char,ps_Matl_Num in varchar2,pi_CertificationId in integer,pi_SKUId in integer);
 PROCEDURE productcertification_save
    (pi_certificationtypeid    IN  NUMBER,
     pi_skuid                  IN  NUMBER,
     pi_error_num              OUT NUMBER);
 --FUNCTION  GetCertificateState(ps_SKU in Varchar2,pi_CertifId in integer,pi_SKUID in Number) return varchar2 ;
 PROCEDURE ProductRequestCert_Save(ps_DeleteMe in char,ps_Matl_Num in varchar2,pi_CertificationId in integer,pi_SKUId in integer) ;
 PROCEDURE ProductRequest_Save
    (pi_certificationtypeid   IN   NUMBER,
     pi_skuid                     IN   NUMBER,
     pi_error_num            OUT NUMBER);
 PROCEDURE GetTireCharacteristicsAll
(
       ps_matl_num           IN  PRODUCT.MATL_NUM%TYPE,
       ps_Brand              OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_BrandLine          OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_SizeStamp          OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_TireTypeId         OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_PSN                OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_DiscontinueDate    OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_SpecNumber         OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_SpeedRating        OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_SingleLoadIndex    OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_DualLoadIndex      OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_TubelessSyn        OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_ReinforcedYN       OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_ExtraLoadYN        OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_UTQGTreadWear      OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_UTQGTraction       OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_UTQGTemp           OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_MudSnowYN          OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_SevereWeatherInd   OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_RimDiameter        OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_SerialDate         OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_LoadRange          OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_MeaRimWidth        OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_RegroovableInd     OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_PlantProduced      OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_MostRecentDate     OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_IMark              OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_InformeNumber      OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_FechaDate          OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_TreadPattern       OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_SpecialProtBrand   OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_NominalTireWidth   OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_AspectRatio        OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_TreadWearInd       OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_NameOfManufac      OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_Family             OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_DotSerialNumber    OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_TPN                OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_BiasBeltedRadial   OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_SKU                OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE
);
END ICS_CRUD;
/

create or replace PACKAGE BODY           ics_crud AS
/******************************************************************************
   NAME:       ICS_CRUD
   PURPOSE:
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0
   1.1        10/2/2012     Harini         1.Modified SearchBrand,CreateOrDeleteProductCountry,
                                           ProductCountry_Save procedures by replacing BrandCode
                                           with Brand and Brand_Line,SKu with Matl_num
                                           Created new procedure GetTireCharacteristicsAll for getting
                                           all the characteristics of tire for a given material.
   1.2        11/14/2012    Harini         2.Modfied SearchBrand procedure by adding SingLoadIndex,
                                           DualLoadIndex,SpeedRating in select list
   1.3        11/19/2012    Harini         3.Modified "from" query for pc_BrandProduct cursor
                                           as per Jill's email "material numbers and NEW PROBLEM"
									                         in SearchBrand procedure.
                                           4. Added Distinct and in "from" clause use Left outer join
                                           instead of inner join the Product table for PC_REGIONSCERTIFIED
                                           and  PC_REGIONNOTCERTIFIED cursors in SearchBrand procedure.
   1.4        11/26/2012     Harini       5.As per PRJ3617, Removed Distinct and in from clause use
                                            inner join instead of Left outer join the Product table
   1.5        12/03/2012     Harini       6. Retrieving the Aspect ratio by strip off leading zeros
   1.6        8/16/2013      JESEITZ      1. fixed productcountry_save and createordeleteproductcountry to not duplicate
                                          records if called multiple times in loop when more than one column is checked in grid
                                          2. Convert discontinued date to date field before inserting into product table
                                          3. process ECE3054 and ECE117 certification types separately.
   1.7        10/16/2013    Harini        1.Modified ProductCountry_Save and CreateOrDeleteProductCountry procedures by adding an else clause
                                          for updating the records if the records exists
   1.8        11/04/2013    Harini        1. As per IDEA 2706,Modified GetTireCharacteristicsAll procedure -Added ps_SevereWeatherInd  as output parameter
                                           in  procedure and retrieve it and pass the value to the declared variable
                                          2.Modified the call of GetTireCharacteristicsAll in CreateOrDeleteProductCountry and ProductCountry_Save
                                             procedures such that it retrieves ls_SevereWeatherInd and inserts/updates into
                                             Product table
   1.9       11/22/2013    Guru           1.Modified ProductCountry_Save,CreateOrDeleteProductCountry procedures for checking the current speed rating
   1.10      01/10/2014    Harini         1. Added exception when retrieving the speed rating and condition is modified such that both the speed ratings
                                            should not be null in ProductCountry_Save,CreateOrDeleteProductCountry procedures.
                                          2. Removed else part of ln_skuid =0 in both the ProductCountry_Save,CreateOrDeleteProductCountry procedures
   1.11      02/20/2014    Harini         1. Modified GetTireCharacteristicsAll by retrieving the Tread_Pattern_Design field from DESIGN_NUM
                                             attribute in the CMDR_DATA material_attribute view
   1.12      02/24/2014    Harini         1. Modified CreateOrDeleteProductCountry and ProductCountry_Save procedures for passing ln_skuid=0 if no record
                                            exists with input matl_num
   1.13       04/09/2014    jeseitz    fixed CreateOrDeleteProductCountry to not call GetTireCharacteristicsAll if  '999' legacy sku
   1.14       03/23/2015    jeseitz   SearchBrand - changed case statement for status so that it checks  if the productcountry status is
                                                null, it also must have a skuid that is not 0.  This is because of the left outer join - if there is no productcountry record
                                                we do not want the status to be 'Requested'
                 04/09/2015    jeseitz   added hint to searchbrand(thanks John R.)
                 4/10/2015     jeseitz    took out hint and added WITH clause
******************************************************************************/
--    PROCEDURE get_query_source(pc_retCursor OUT retCursor) AS
--
--        ls_machineId VARCHAR2(50) := NULL;
--        ls_operatorId VARCHAR2(50) := 'ICSDEV';
--        ls_errorMsg VARCHAR2(4000);
--
--    BEGIN
--        OPEN pc_retCursor FOR
--        SELECT e.skuid, e.sku, e.brand, e.sizestamp, e.reg3054number, e.reg3054approval, e.reg117number, e.reg117approval
--        FROM emark_overview_vw e;
--
--        EXCEPTION
--            WHEN OTHERS THEN
--                ls_errorMsg := SQLERRM || '- GET_QUERY_SOURCE.';
--                APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT
--              (
--                as_MachineId => ls_MachineId,
--                ad_OPERATORID => ls_OperatorId,
--                AD_DATERECORDED => SYSDATE,
--                AS_PROCESSNAME =>' ICS_CRUD.GET_QUERY_SOURCE',
--                AX_RECORDDATA    => 'An error have ocurred.(when others)',
--                AS_MESSAGECODE => TO_CHAR(SQLCODE),
--                AS_MESSAGE       => SQLERRM
--              );
--            raise_application_error (-20007,ls_ErrorMsg);
--    END get_query_source;
	procedure GetRegions( pc_retCursor out retCursor) as
		ls_MachineId VARCHAR2(50):=null;
		ls_OperatorId VARCHAR2(50):='ICSDEV';
    ls_ErrorMsg VARCHAR2(4000);
	begin
		Open pc_retCursor for
		Select REGIONID,RegionName from  Region;
		EXCEPTION
		when others then
            ls_ErrorMsg:=  sqlerrm || ' - GetRegions. An error have ocurred.(when others)';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT
              (
                as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED => sysdate,
                AS_PROCESSNAME =>' ICS_CRUD.GetRegions',
                AX_RECORDDATA    => 'An error have ocurred.(when others)',
                AS_MESSAGECODE => to_char(sqlcode),
                AS_MESSAGE       =>sqlerrm
              );
            raise_application_error (-20007,ls_ErrorMsg);
	end GetRegions;
  PROCEDURE imarkconformityupdate(pd_certdatesubmitted IN DATE) AS
  -- Declare
  li_certificateId NUMBER;
  li_skuid NUMBER;
  ld_skudateassigned DATE;
  ld_skudateremoved DATE;
  ld_skudatesubmitted DATE;
  ls_imarkchange VARCHAR2(1);
  -- Cusor to get the SKUID's attached to a specific certificate ID
  CURSOR c_prodcert(li_certificateId NUMBER) IS
  SELECT pc.dateassigned_egi, pc.dateremoved, pc.datesubmitted, pc.imarkchange
  FROM productcertificate pc
  WHERE pc.certificateid = li_certificateId;
  BEGIN
      IF pd_certdatesubmitted IS NOT NULL THEN
          -- Get the certificate id of the latest Imark extension
          SELECT MAX(c.certificateid) INTO li_certificateId
          FROM certificate c
          WHERE c.certificationtypeid = 4;
          IF li_certificateId > 0 THEN
              OPEN c_prodcert(li_certificateId);
              LOOP
                  FETCH c_prodcert INTO ld_skudateassigned, ld_skudateremoved, ld_skudatesubmitted, ls_imarkchange;
                  EXIT WHEN c_prodcert%NOTFOUND;
                  IF (ld_skudateassigned < pd_certdatesubmitted) OR (ld_skudateremoved < pd_certdatesubmitted) THEN
                      IF UPPER(ls_imarkchange) = 'I' AND ld_skudatesubmitted IS NULL THEN
                          UPDATE productcertificate pc
                          SET pc.datesubmitted = pd_certdatesubmitted;
                      END IF;
                  END IF;
              END LOOP;
              CLOSE c_prodcert;
          END IF;
      END IF;
  END imarkconformityupdate;

  PROCEDURE manage_customer(ps_addnewcustomer IN VARCHAR2, pi_customerid IN NUMBER, ps_customer_n IN VARCHAR2, ps_customeraddress_n IN VARCHAR2, ps_actsigreq IN VARCHAR2, ret_customerid OUT NUMBER) AS
      li_customerId NUMBER;
  BEGIN
      IF ps_addnewcustomer = 'y' OR pi_customerid = 0 THEN
          -- Insert new Customer record
          INSERT INTO customer (customerid, customer, customeraddress, signatureind)
          VALUES (customer_seq.NEXTVAL, ps_customer_n, ps_customeraddress_n, ps_actsigreq);
          -- Now get the importer id of the record we just inserted
          SELECT customer_seq.CURRVAL INTO li_customerId
          FROM dual;
          ret_customerid := li_customerId;
      ELSE
          -- Update existing customer record
          UPDATE customer
          SET customer = ps_customer_n,
              customeraddress = ps_customeraddress_n,
              signatureind = ps_actsigreq
          WHERE customerid = pi_customerid;
          ret_customerid := pi_customerid;
      END IF;
  END manage_customer;

  PROCEDURE manage_importer(ps_addnewimporter IN VARCHAR2, pi_importerid IN NUMBER, ps_importer_n IN VARCHAR2, ps_importeraddress_n IN VARCHAR2, ps_importerrepresentative_n IN VARCHAR2, ps_countrylocation_n IN VARCHAR2, ret_importerId OUT NUMBER) AS
      li_importerId NUMBER;
  BEGIN
       IF ps_addnewimporter = 'y' OR  pi_importerid = 0 THEN
              -- Insert new Importer record
              INSERT INTO importer (importerid, importer, importeraddress, importerrepresentative, countrylocation)
              VALUES (importer_seq.NEXTVAL, ps_importer_n, ps_importeraddress_n, ps_importerrepresentative_n, ps_countrylocation_n);
              -- Now get the importer id of the record we just inserted
              SELECT importer_seq.CURRVAL INTO li_ImporterId
              FROM dual;
              ret_importerid := li_importerId;
       ELSE
              -- Update existing Importer record
              UPDATE importer
              SET importer = ps_importer_n,
                  importeraddress = ps_importeraddress_n,
                  importerrepresentative = ps_importerrepresentative_n,
                  countrylocation = ps_countrylocation_n
              WHERE importerid = pi_ImporterId;
              ret_importerid := pi_importerid;
       END IF;
  END manage_importer;

  PROCEDURE getcustomers(pc_customers OUT retCursor) AS
      ls_machineId VARCHAR2(50) := NULL;
      ls_operatorId VARCHAR2(50) := 'ICSDEV';
      ls_errorMsg VARCHAR2(4000);
  BEGIN
      OPEN pc_customers FOR
      SELECT DISTINCT customer, customerid
      FROM customer
      ORDER BY customer ASC;
      EXCEPTION
          WHEN OTHERS THEN
              ls_errorMsg := SQLERRM || '- getcustomers.';
              APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT
            (
              as_MachineId => ls_MachineId,
              ad_OPERATORID => ls_OperatorId,
              AD_DATERECORDED => sysdate,
              AS_PROCESSNAME =>' ICS_CRUD.GetCustomers',
              AX_RECORDDATA    => 'An error have ocurred.(when others)',
              AS_MESSAGECODE => to_char(sqlcode),
              AS_MESSAGE       =>sqlerrm
            );
          raise_application_error (-20007,ls_ErrorMsg);
  END getcustomers;

  PROCEDURE getimporters(pc_importers OUT retCursor) AS
      ls_machineId VARCHAR2(50) := NULL;
      ls_operatorId VARCHAR2(50) := 'ICSDEV';
      ls_errorMsg VARCHAR2(4000);
  BEGIN
      OPEN pc_importers FOR
      SELECT DISTINCT importer, importerid
      FROM importer
      ORDER BY importer ASC;
      EXCEPTION
          WHEN OTHERS THEN
              ls_errorMsg := SQLERRM || '- getimporters.';
              APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT
            (
              as_MachineId => ls_MachineId,
              ad_OPERATORID => ls_OperatorId,
              AD_DATERECORDED => sysdate,
              AS_PROCESSNAME =>' ICS_CRUD.GetImporters',
              AX_RECORDDATA    => 'An error have ocurred.(when others)',
              AS_MESSAGECODE => to_char(sqlcode),
              AS_MESSAGE       =>sqlerrm
            );
          raise_application_error (-20007,ls_ErrorMsg);
  END getimporters;

  procedure GetRegionsAndCountries( pc_retCursor out retCursor) as
	  ls_MachineId VARCHAR2(50):=null;
    ls_OperatorId VARCHAR2(50):='ICSDEV';
    ls_ErrorMsg VARCHAR2(4000);
  begin
    Open pc_retCursor for
	SELECT
			CountryId,
			COUNTRYNAME ,
			CE.CERTIFICATIONTYPEID,
			CE.CERTIFICATIONTYPENAME,
			R.REGIONID,
			R.REGIONNAME
	FROM
		 Country Co,
		 CertificationType ce,
		 Region R
	WHERE
		R.RegionId = Co.REGIONID And
		Co.CertificationTypeID = ce.CertificationTypeID
	ORDER BY R.REGIONNAME,Co.COUNTRYNAME ASC;
    EXCEPTION
      when others then
          ls_ErrorMsg:=  sqlerrm || ' - GetRegionsAndCountries. An error have ocurred.(when others)';
          APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(
              as_MachineId => ls_MachineId,
				      ad_OPERATORID => ls_OperatorId,
              AD_DATERECORDED => sysdate,
              AS_PROCESSNAME =>' ICS_CRUD.GetRegionsAndCountries',
              AX_RECORDDATA    => 'An error have ocurred.(when others)',
              AS_MESSAGECODE => to_char(sqlcode),
              AS_MESSAGE       =>sqlerrm
            );
            raise_application_error (-20007,ls_ErrorMsg);
  end GetRegionsAndCountries;

 procedure GetCountriesByRegionID( pc_Countries out retCursor,pi_RegionId in integer) as
    --Exception variables
      li_IdNull exception;
      li_IdInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_IdNull,-20005);
      pragma exception_init( li_IdInvalid,-20006);
    ls_MachineId VARCHAR2(50):=null;
    ls_OperatorId VARCHAR2(50):='ICSDEV';
    ls_ErrorMsg varchar2(4000);
 begin
        if  pi_RegionId is null then
            raise li_IdNull;
        end if;
        if  pi_RegionId <=0 then
            raise li_IdInvalid;
        end if;
        Open pc_Countries for
        SELECT CO.COUNTRYID,
               CO.COUNTRYNAME,
               CO.REGIONID,
               CO.CertificationTypeId as CertificationID,
               CE.CertificationTypeId as CertificationID,
               CE.CERTIFICATIONTYPENAME as CertificationName
        FROM  COUNTRY CO INNER JOIN  CERTIFICATIONTYPE CE ON
                    CO.CertificationTypeId = ce.CertificationTypeId
        WHERE co.regionid = pi_RegionId;
    EXCEPTION
		  when li_IdNull then
		      ls_ErrorMsg:=  sqlerrm || ' - GetCountriesByRegion. pi_RegionId is null.';
			   APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
				      ad_OPERATORID => ls_OperatorId,
				  AD_DATERECORDED  => sysdate,
				  AS_PROCESSNAME   => ' ICS_CRUD.GetCountriesByRegion',
				  AX_RECORDDATA    => 'pi_RegionId is null.',
				  AS_MESSAGECODE   => to_char(sqlcode),
				  AS_MESSAGE       => ls_ErrorMsg);
				  raise_application_error (-20005,ls_ErrorMsg);
		  when li_IdInvalid then
		       ls_ErrorMsg:=  sqlerrm || ' - GetCountriesByRegion. pi_RegionId is Invalid.';
			    APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT( as_MachineId => ls_MachineId,
				      ad_OPERATORID => ls_OperatorId,
				  AD_DATERECORDED  => sysdate,
				  AS_PROCESSNAME   => ' ICS_CRUD.GetCountriesByRegion',
				  AX_RECORDDATA    => 'pi_RegionId is Invalid.',
				  AS_MESSAGECODE   => to_char(sqlcode),
				  AS_MESSAGE      => ls_ErrorMsg);
			   raise_application_error (-20006,ls_ErrorMsg);
		   when others then
		    ls_ErrorMsg:=  sqlerrm || ' - GetCountriesByRegion. An error have ocurred.(when others)';
			 APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
          ad_OPERATORID => ls_OperatorId,
				  AD_DATERECORDED  => sysdate,
				  AS_PROCESSNAME   =>' ICS_CRUD.GetCountriesByRegion',
				  AX_RECORDDATA    => 'An error have ocurred.(when others)',
				  AS_MESSAGECODE   => to_char(sqlcode),
				  AS_MESSAGE       =>ls_ErrorMsg);
			 raise_application_error (-20007,ls_ErrorMsg);
 end GetCountriesByRegionID;

  procedure GetCountriesByRegionName( pc_Countries out retCursor,ps_RegionName in varchar) as
    --Exception variables
      li_IdNull exception;
      li_IdInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_IdNull,-20005);
      pragma exception_init( li_IdInvalid,-20006);
    ls_MachineId VARCHAR2(50):=null;
    ls_OperatorId VARCHAR2(50):='ICSDEV';
    ls_ErrorMsg varchar2(4000);
 begin
         if  ps_RegionName is null then
            raise li_IdNull;
        end if;
        Open pc_Countries for
           SELECT CO.COUNTRYID,
                 CO.COUNTRYNAME,
                  CO.REGIONID,
                  r.regionname,
                  ce.CertificationTypeId as CertificationID,
                  Ce.CERTIFICATIONTypeNAME as CERTIFICATIONNAME
           FROM  COUNTRY CO inner join  Region r on
                                          co.regionid = r.regionid
                              LEFT JOIN  CERTIFICATIONTYPE CE on
                                         co.CertificationTypeId = ce.CertificationTypeId
        WHERE lower(r.regionname) like  '%' || lower(ps_RegionName) || '%' ;
    EXCEPTION
		  when li_IdNull then
		      ls_ErrorMsg:=  sqlerrm || ' ps_RegionName is null.';
			   APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
				      ad_OPERATORID => ls_OperatorId,
				  AD_DATERECORDED  => sysdate,
				  AS_PROCESSNAME   => ' ICS_CRUD.GetCountriesByRegionName',
				  AX_RECORDDATA    => 'ps_RegionName is null.',
				  AS_MESSAGECODE   => to_char(sqlcode),
				  AS_MESSAGE       => ls_ErrorMsg);
				raise_application_error (-20005,ls_ErrorMsg);
		  when li_IdInvalid then
		       ls_ErrorMsg:=  sqlerrm || ' ps_RegionName is Invalid.';
			    APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT( as_MachineId => ls_MachineId,
				      ad_OPERATORID => ls_OperatorId,
				  AD_DATERECORDED  => sysdate,
				  AS_PROCESSNAME   => ' ICS_CRUD.GetCountriesByRegionName',
				  AX_RECORDDATA    => ' ps_RegionName is Invalid.',
				  AS_MESSAGECODE   => to_char(sqlcode),
				  AS_MESSAGE      => ls_ErrorMsg);
			   raise_application_error (-20006,ls_ErrorMsg);
		   when others then
		    ls_ErrorMsg:=  sqlerrm || ' An error have ocurred.(when others)';
			 APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
          ad_OPERATORID => ls_OperatorId,
				  AD_DATERECORDED  => sysdate,
				  AS_PROCESSNAME   =>' ICS_CRUD.GetCountriesByRegionName',
				  AX_RECORDDATA    => 'An error have ocurred.(when others)',
				  AS_MESSAGECODE   => to_char(sqlcode),
				  AS_MESSAGE       =>ls_ErrorMsg);
			 raise_application_error (-20007,ls_ErrorMsg);
 end GetCountriesByRegionName;

PROCEDURE getsearchtypes(pc_retCursor OUT retCursor) AS
    ls_machineId VARCHAR2(50) := NULL;
    ls_operatorId VARCHAR2(50) := 'ICSDEV';
    ls_errorMsg VARCHAR2(4000);
BEGIN
    OPEN pc_retCursor FOR
    SELECT s.typeid, s.typename
    FROM searchtype s;
    EXCEPTION
        WHEN OTHERS THEN
            ls_errorMsg := SQLERRM || ' - Error in ics_crud.getsearchtypes';
            app_message_operations.app_message_insert(ls_machineId, ls_operatorId, SYSDATE, 'ics_crud.getsearchtypes', 'Error', TO_CHAR(SQLCODE), SQLERRM);
            raise_application_error(-20007, ls_errorMsg);
END getsearchtypes;

  procedure GetManufacturingLocs( pc_retCursor out retCursor) as
       ls_MachineId VARCHAR2(50):=null;
     ls_OperatorId VARCHAR2(50):='ICSDEV';
     ls_ErrorMsg varchar2(4000);
  begin
    Open pc_retCursor for
    SELECT plant_id AS locationid, plant_name AS locationname
    FROM BOM_DATA.plant;
    EXCEPTION
      when others then
      ls_ErrorMsg:=  sqlerrm || ' - GetManufacturingLocs. An error have ocurred.(when others)';
         APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT
          (
              as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
              AD_DATERECORDED => sysdate,
              AS_PROCESSNAME =>' ICS_CRUD.GetManufacturingLocs',
               AX_RECORDDATA    => 'An error have ocurred.(when others)',
              AS_MESSAGECODE => to_char(sqlcode),
              AS_MESSAGE       =>sqlerrm
            );
         raise_application_error (-20007,ls_ErrorMsg);
  end GetManufacturingLocs;

PROCEDURE GetCompanyNames(pc_retCursor OUT retCursor) AS
    ls_machineId VARCHAR2(50) := NULL;
    ls_operatorId VARCHAR2(50) := 'ICSDEV';
    ls_errorMsg VARCHAR2(4000);
BEGIN
    OPEN pc_retCursor FOR
    SELECT company As CompanyName
    FROM company;
    EXCEPTION
        WHEN OTHERS THEN
            ls_errorMsg := SQLERRM || ' - GetCompanyNames. An error has occurred.';
            APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT
          (
              as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
              AD_DATERECORDED => sysdate,
              AS_PROCESSNAME =>' ICS_CRUD.GetCompanyNames',
               AX_RECORDDATA    => 'An error have ocurred.(when others)',
              AS_MESSAGECODE => to_char(sqlcode),
              AS_MESSAGE       =>sqlerrm
            );
         raise_application_error (-20007,ls_ErrorMsg);
END GetCompanyNames;

PROCEDURE getcertifications(pc_retCursor OUT retCursor) AS
    ls_machineId VARCHAR2(50) := NULL;
    ls_operatorId VARCHAR2(50) := 'ICSDEV';
    ls_errorMsg VARCHAR2(4000);
BEGIN
    OPEN pc_retCursor FOR
    SELECT c.certificationtypeid AS certificationid, c.certificationtypename AS certificationname
    FROM certificationtype c
    ORDER BY certificationtypename ASC;
EXCEPTION
    WHEN OTHERS THEN
        ls_errorMsg := SQLERRM || ' - Error in ics_crud.getcertifications';
        app_message_operations.app_message_insert(ls_machineId, ls_operatorId, SYSDATE, 'ics_crud.getcertifications', 'Error', TO_CHAR(SQLCODE), SQLERRM);
        raise_application_error(-20007, ls_errorMsg);
END getcertifications;

 PROCEDURE SearchBrand (pc_BrandProduct out retCursor, pc_RegionsCertified out retCursor,pc_RegionNotCertified out retCursor,  ps_Brand IN  VARCHAR2,ps_Brand_Line VARCHAR2)
 as
 /***************************************************************************************************
   NAME:       SearchBrand
   PURPOSE:
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0
   1.1        10/2/2012     Harini         1.Replaced ps_BrandCode with ps_Brand and ps_brandLine.
                                           2.Removed referring to BrandDetails_Mv
                                           and SKUMain_Latest_Views
   1.2        11/14/2012    Harini         3.Added SingleLoadIndex,DualLoadIndex,SpeedRating in
                                             select list
   1.3        11/19/2012    Harini         4.Modified the "from" query for pc_BrandProduct cursor
                                           as per Jill's email "material numbers and NEW PROBLEM".
                                           5. Added Distinct and in "from" clause use Left outer join
                                           instead of inner join the Product table for PC_REGIONSCERTIFIED
                                           and  PC_REGIONNOTCERTIFIED cursors.
   1.4        11/26/2012     Harini       6.As per PRJ3617, Removed Distinct and in from clause use
                                            inner join instead of Left outer join the Product table
   1.5        3/23/2015      jeseitz    changed case statement for status so that it checks  if the productcountry status is
                                                null, it also must have a skuid that is not 0.  This is because of the left outer join - if there is no productcountry record
                                                we do not want the status to be 'Requested'
                                                also, commented out SKU - no longer needed.
               4/8/2015       jeseitz  -- added hint to searh(thanks John R.)
               4/10/2015       jeseitz -- took out hint and added WITH clause

*************************************************************************************************/
      --Exception variables
      LI_IDNULL EXCEPTION;
      -- link the exception to the error number
      pragma exception_init( li_IdNull,-20005);
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
	begin
        if  (PS_BRAND is null or PS_BRAND_LINE is null) then     -- As per PRJ3617,Checking ps_Brand and ps_Brand_Line are null,instead of ps_BrandCode
            RAISE li_IdNull;
        END IF;
        -- As per PRJ3617,MOdified this cursor by removing Brand_Details_Mv and SKUMAINPRODUCT_LATEST_VIEW
        --Search the brand and the product based on the brand name
        OPEN pc_BrandProduct FOR
        WITH PRODUCT_DATA AS                            ---JESEITZ 4/10/15 added WITH to improve speed (a lot)
             (SELECT * FROM PRODUCT WHERE
               BRAND = ps_Brand
               AND BRAND_LINE = ps_Brand_Line)
        SELECT mpv.Matl_Num,
                    mpv.Brand,
                    mpv.Brand_Line,
                 --mpv.BrandDesc brandname,
                    mpv.SkuId ,
                 --mpv.Sku,
                    '' SKU,
                    mpv.SizeStamp,
                    ce.CertificationTypeId   AS CertificationId,
                    ce.Certificationtypename AS CertificationName,
                    c.CountryId,
                    c.CountryName,
                 ( CASE
                     WHEN pc.RequestStatus IS NOT NULL AND  pc.RequestStatus='I' THEN 'InProgress'
                     WHEN pc.RequestStatus IS NOT NULL AND  pc.RequestStatus='A' THEN 'Approved'
                     WHEN pc.RequestStatus IS NOT NULL AND  pc.RequestStatus='R' THEN 'Requested'
                     WHEN pc.RequestStatus IS NULL  AND pc.skuid <> 0             THEN 'Requested'  -- jeseitz added check for skuid  is not null to differentiate between
                     ELSE 'Uncertified'                                                                                                                   --   productcountry record having a null status and no productcountry record
                 END ) AS State,
                     mpv.SingLoadIndex, -- As per PRJ3617,Added SingLoadIndex,DualLoadIndex,SpeedRating in select list
                     mpv.DualLoadIndex,
                      mpv.SpeedRating
              FROM
                  ( (SELECT LPAD(ma3.Matl_Num,18,0) Matl_Num,
                          ma2.Attrib_Value SizeStamp,
                          ma3.Attrib_Value Brand,
                          ma3.Brand_Line,
                          NVL(PD.SKUID,0) SKUID,
                          PD.BRANDDESC,
                          ma5.attrib_value SingLoadIndex, -- As per PRJ3617,Added SingLoadIndex,DualLoadIndex,SpeedRating in select list
                          ma6.attrib_value DualLoadIndex,
                          MA7.ATTRIB_VALUE SPEEDRATING
                       from (  SELECT  MA.*, MAA.ATTRIB_VALUE Brand_Line FROM
                                      CMDR_DATA.MATERIAL_CLASS_LINK CL, CMDR_DATA.MATERIAL_ATTRIBUTE MA,
                                      CMDR_DATA.MATERIAL_ATTRIBUTE MAA
                                    WHERE  MA.MATL_NUM = CL.MATL_NUM
                                       AND MAA.MATL_NUM = MA.MATL_NUM
                                       AND  MA.ATTRIB_NAME = 'BRAND' AND MA.Attrib_Value = ps_Brand
                                       AND  MAA.ATTRIB_NAME = 'BRAND_LINE' AND MAA.Attrib_Value = ps_Brand_Line
                                       AND CL.CLASS_TYPE = 'Z01'
                                       AND (CL.CLASS_NAME = 'TIRE' OR
                                               CL.CLASS_NAME = 'TIRE_LEGACY')) ma3
                       LEFT OUTER JOIN   CMDR_DATA.Material_Attribute MA2
                          ON ma2.Matl_Num  = ma3.Matl_Num
                          AND ma2.Attrib_Name = 'TIRE_SIZE'
                       LEFT OUTER JOIN   CMDR_DATA.Material_Attribute MA5
                          ON  ma5.Matl_Num  = ma3.Matl_Num
                          AND ma5.Attrib_Name = 'STAMPED_SINGLE_LOAD_INDEX'
                       LEFT OUTER JOIN   CMDR_DATA.Material_Attribute MA6
                          ON MA6.Matl_Num  =ma3.Matl_Num
                          AND ma6.Attrib_Name = 'STAMPED_DUAL_LOAD_INDEX'
                       LEFT OUTER JOIN   CMDR_DATA.Material_Attribute MA7
                          ON  ma7.Matl_Num  =ma3.Matl_Num
                          AND ma7.Attrib_Name = 'SPEED_RATING'
                       LEFT OUTER JOIN  PRODUCT_DATA PD
                          ON PD.Matl_Num =ma3.Matl_Num)
                  union ---ADDED JES 2/25/13
                   (SELECT LPAD(P.Matl_Num,18,0) Matl_Num,
                        TRIM(P.SIZESTAMP) SizeStamp,
                        P.BRAND Brand,
                        P.BRAND_LINE Brand_Line,
                        P.SKUID SKUID,
                        P.BRANDDESC,
                        P.SINGLOADINDEX SingLoadIndex, -- As per PRJ3617,Added SingLoadIndex,DualLoadIndex,SpeedRating in select list
                        P.DUALLOADINDEX DualLoadIndex,
                        P.SPEEDRATING SPEEDRATING
                      from product_DATA P ) )  mpv
             LEFT JOIN ProductCountry pc ON
                           pc.skuid = mpv.skuid
             LEFT JOIN Country c ON
                           pc.countryid = c.countryid
             LEFT JOIN CertificationType ce ON
                           c.certificationtypeid = ce.certificationtypeid
          WHERE mpv.Matl_Num  IS NOT NULL-- AND spalv.skuid <> 0
          ORDER BY mpv.Matl_Num;
          --Regions that contains countries that use any certification
          --As per PRJ3617, Removed Distinct and in from clause use inner join instead of Left outer join the Product table
        open PC_REGIONSCERTIFIED for
          Select DISTINCT r.regionid,
                 r.regionname,
                 co.COUNTRYID,
                 co.countryname
            FROM  Region r
                 inner join  Country co on r.regionid = co.regionid
                 inner join  PRODUCTCOUNTRY pc on
                                  CO.COUNTRYID = PC.COUNTRYID
                 INNER JOIN product p on
                        pc.skuid=p.skuid and
                        (p.Brand = ps_Brand AND p.Brand_Line = ps_Brand_Line) -- AS per PRJ3617,Brandcode is replaced with Brand and Brand_Line
                              -- lower(p.brandcode)= lower(ps_BrandCode)
            Order by r.regionname,CO.COUNTRYNAME;
              --Regions that contains countries that don't use certifications
              --As per PRJ3617, Removed Distinct and in from clause use inner join instead of Left outer join the Product table
        open PC_REGIONNOTCERTIFIED for
           Select DISTINCT  r.regionid,r.regionname,co.countryid,co.countryname
              FROM  REGION r,
                 COUNTRY co
              where r.regionid = co.regionid and
                        r.regionid not in (Select distinct(r.regionid)
                                FROM Region r
                                        inner join  Country co on
                                                 r.regionid = co.regionid
                                        inner join  PRODUCTCOUNTRY pc on
                                                 co.countryid = pc.countryid
                                        INNER JOIN  product p on
                                                 pc.skuid=p.skuid and
                                        p.Brand = ps_Brand AND p.Brand_Line = ps_Brand_Line) -- AS per PRJ3617,Brandcode is replaced with Brand and Brand_Line
               order by r.regionid;
    EXCEPTION
		  when li_IdNull then
		      ls_ErrorMsg:=  sqlerrm || ' ps_Brand or ps_BrandLine is null.';
			   APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
				      ad_OPERATORID => ls_OperatorId,
				  AD_DATERECORDED  => sysdate,
				  AS_PROCESSNAME   => ' ICS_CRUD.SearchBrand',
				  AX_RECORDDATA    => 'ps_Brand or ps_BrandLine is null.',
				  AS_MESSAGECODE   => to_char(sqlcode),
				  AS_MESSAGE       => ls_ErrorMsg);
				raise_application_error (-20005,ls_ErrorMsg);
	       when others then
					ls_ErrorMsg:=  sqlerrm || ' An error have ocurred.(when others)';
					 APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
				  ad_OPERATORID => ls_OperatorId,
						  AD_DATERECORDED  => sysdate,
						  AS_PROCESSNAME   =>' ICS_CRUD.SearchBrand',
						  AX_RECORDDATA    => 'An error have ocurred.(when others)',
						  AS_MESSAGECODE   => to_char(sqlcode),
						  AS_MESSAGE       =>ls_ErrorMsg);
					raise_application_error (-20007,ls_ErrorMsg);
  END SearchBrand;
 PROCEDURE SearchBrandRequests (pc_BrandProduct out retCursor,  ps_Brand IN  VARCHAR2,ps_Brand_Line VARCHAR2)
 as
 /***************************************************************************************************
   NAME:       SearchBrandRequests
   PURPOSE:
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0      5/25/2016   jeseitz            initial version

*************************************************************************************************/
      --Exception variables
      LI_IDNULL EXCEPTION;
      -- link the exception to the error number
      pragma exception_init( li_IdNull,-20005);
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
    begin
        if  (PS_BRAND is null or PS_BRAND_LINE is null) then     -- As per PRJ3617,Checking ps_Brand and ps_Brand_Line are null,instead of ps_BrandCode
            RAISE li_IdNull;
        END IF;

        OPEN pc_BrandProduct FOR
        WITH PRODUCT_DATA AS                            ---JESEITZ 4/10/15 added WITH to improve speed (a lot)
             (SELECT * FROM PRODUCT WHERE
               BRAND = ps_Brand
               AND BRAND_LINE = ps_Brand_Line)
        SELECT mpv.Matl_Num,
                    mpv.Brand,
                    mpv.Brand_Line,
                 --mpv.BrandDesc brandname,
                    mpv.SkuId ,
                 --mpv.Sku,
                    '' SKU,
                    mpv.SizeStamp,
                    ce.CertificationTypeId   AS CertificationId,
                    ce.Certificationtypename AS CertificationName,
                    ' ' CountryId,
                    ' ' CountryName,
                 ( CASE
                     WHEN pr.RequestStatus IS NOT NULL AND  pr.RequestStatus='I' THEN 'InProgress'
                     WHEN pr.RequestStatus IS NOT NULL AND  pr.RequestStatus='A' THEN 'Approved'
                     WHEN pr.RequestStatus IS NOT NULL AND  pr.RequestStatus='R' THEN 'Requested'
                     WHEN pr.RequestStatus IS NULL  AND pr.skuid <> 0                   THEN 'Requested'  -- jeseitz added check for skuid  is not null to differentiate between
                     ELSE 'Uncertified'                                                                                                                   --   productcountry record having a null status and no productcountry record
                 END ) AS State,
                     mpv.SingLoadIndex, -- As per PRJ3617,Added SingLoadIndex,DualLoadIndex,SpeedRating in select list
                     mpv.DualLoadIndex,
                      mpv.SpeedRating
              FROM
                  ( (SELECT LPAD(ma3.Matl_Num,18,0) Matl_Num,
                          ma2.Attrib_Value SizeStamp,
                          ma3.Attrib_Value Brand,
                          ma3.Brand_Line,
                          NVL(PD.SKUID,0) SKUID,
                          PD.BRANDDESC,
                          ma5.attrib_value SingLoadIndex, -- As per PRJ3617,Added SingLoadIndex,DualLoadIndex,SpeedRating in select list
                          ma6.attrib_value DualLoadIndex,
                          MA7.ATTRIB_VALUE SPEEDRATING
                       from (  SELECT  MA.*, MAA.ATTRIB_VALUE Brand_Line FROM
                                      CMDR_DATA.MATERIAL_CLASS_LINK CL, CMDR_DATA.MATERIAL_ATTRIBUTE MA,
                                      CMDR_DATA.MATERIAL_ATTRIBUTE MAA
                                    WHERE  MA.MATL_NUM = CL.MATL_NUM
                                       AND MAA.MATL_NUM = MA.MATL_NUM
                                       AND  MA.ATTRIB_NAME = 'BRAND' AND MA.Attrib_Value = ps_Brand
                                       AND  MAA.ATTRIB_NAME = 'BRAND_LINE' AND MAA.Attrib_Value = ps_Brand_Line
                                       AND CL.CLASS_TYPE = 'Z01'
                                       AND (CL.CLASS_NAME = 'TIRE' OR
                                               CL.CLASS_NAME = 'TIRE_LEGACY')) ma3
                       LEFT OUTER JOIN   CMDR_DATA.Material_Attribute MA2
                          ON ma2.Matl_Num  = ma3.Matl_Num
                          AND ma2.Attrib_Name = 'TIRE_SIZE'
                       LEFT OUTER JOIN   CMDR_DATA.Material_Attribute MA5
                          ON  ma5.Matl_Num  = ma3.Matl_Num
                          AND ma5.Attrib_Name = 'STAMPED_SINGLE_LOAD_INDEX'
                       LEFT OUTER JOIN   CMDR_DATA.Material_Attribute MA6
                          ON MA6.Matl_Num  =ma3.Matl_Num
                          AND ma6.Attrib_Name = 'STAMPED_DUAL_LOAD_INDEX'
                       LEFT OUTER JOIN   CMDR_DATA.Material_Attribute MA7
                          ON  ma7.Matl_Num  =ma3.Matl_Num
                          AND ma7.Attrib_Name = 'SPEED_RATING'
                       LEFT OUTER JOIN  PRODUCT_DATA PD
                          ON PD.Matl_Num =ma3.Matl_Num)
                  union ---ADDED JES 2/25/13
                   (SELECT LPAD(P.Matl_Num,18,0) Matl_Num,
                        TRIM(P.SIZESTAMP) SizeStamp,
                        P.BRAND Brand,
                        P.BRAND_LINE Brand_Line,
                        P.SKUID SKUID,
                        P.BRANDDESC,
                        P.SINGLOADINDEX SingLoadIndex, -- As per PRJ3617,Added SingLoadIndex,DualLoadIndex,SpeedRating in select list
                        P.DUALLOADINDEX DualLoadIndex,
                        P.SPEEDRATING SPEEDRATING
                      from product_DATA P ) )  mpv
             LEFT JOIN ics.ProductRequest pr ON
                           pr.skuid = mpv.skuid
             LEFT JOIN CertificationType ce ON
                           ce.certificationtypeid = pr.certificationtypeid
          WHERE mpv.Matl_Num  IS NOT NULL-- AND spalv.skuid <> 0
          ORDER BY mpv.Matl_Num;

    EXCEPTION
          when li_IdNull then
              ls_ErrorMsg:=  sqlerrm || ' ps_Brand or ps_BrandLine is null.';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                  AD_DATERECORDED  => sysdate,
                  AS_PROCESSNAME   => ' ICS_CRUD.SearchBrandRequests',
                  AX_RECORDDATA    => 'ps_Brand or ps_BrandLine is null.',
                  AS_MESSAGECODE   => to_char(sqlcode),
                  AS_MESSAGE       => ls_ErrorMsg);
                raise_application_error (-20005,ls_ErrorMsg);
           when others then
                    ls_ErrorMsg:=  sqlerrm || ' An error have ocurred.(when others)';
                     APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                  ad_OPERATORID => ls_OperatorId,
                          AD_DATERECORDED  => sysdate,
                          AS_PROCESSNAME   =>' ICS_CRUD.SearchBrandRequests',
                          AX_RECORDDATA    => 'An error has ocurred.(when others)',
                          AS_MESSAGECODE   => to_char(sqlcode),
                          AS_MESSAGE       =>ls_ErrorMsg);
                    raise_application_error (-20007,ls_ErrorMsg);
  END SearchBrandRequests;


 PROCEDURE CreateOrDeleteProductCountry (ps_DeleteMe in char,ps_Matl_Num IN VARCHAR2,pi_skuId in integer,pi_Countryid in integer) as
    /******************************************************************************
     NAME:       CreateOrDeleteProductCountry
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0
     1.1        10/2/2012     Harini         1.Replaced ps_SKU with ps_Matl_Num.
                                             2.Removed referring SKUMain_Latest_View
                                             and call GetTireCharactyeristicsAll proc
     1.2        10/16/2013    Harini         1.Modified the call of GetTireCharacteristicsAll
                                             before IF ln_skuid = 0 and added else part for this
                                             to update the data if record exists.
     1.3        11/04/2013    Harini         1.As per IDEA2706,Modified the call of GetTireCharacteristicsAll
                                             such that it retrieves ls_SevereWeatherInd and inserts/updates into
                                             Product table
     1.4        11/22/2013    Guru           1.In the else part of SKUID existance checking,check for the current
                                             speed rating.
     1.5        01/10/2014    Harini         1. Removed else part of ln_skuid= 0 after GetTireCharacteristicsAll call
                                              and checking for both product speedrating and Sap speedrating not null
     1.6        02/24/2014    Harini         1. If null is retrieved when getting the max(skuid) from product table,
                                                assign ln_skuid=0
     1.7         04/07/2014   jeseitz -  don't call GetTireCharacteristicsAll for a '999' legacy sku tire.
  ******************************************************************************/
   --Exception variables
      li_ParametersAreNull exception;
      li_ParametersArInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      pragma exception_init( li_ParametersArInvalid,-20006);
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      li_TotalSkuWithCountryIdFound integer;
      li_TotalSKUID number;
      LI_SKUID  product.skuid%type;
      li_CertificationTypeId number;
      ls_CertificateNumber VARCHAR2(200);
      li_certificateId NUMBER;
      ln_skuid Integer;
      ls_IMarkfamily                 ICS.PRODUCT_IMARK_FAMILY.FAMILYID%type; --jeseitz 4/5/2016
       ls_Brand               CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_BrandLine           CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_SizeStamp           CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_TireTypeId          CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_PSN                 CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_DiscontinueDate     CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_SpecNumber          CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_SpeedRating         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_SingleLoadIndex     CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_DualLoadIndex       CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_TubelessSyn         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_ReinforcedYN        CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_ExtraLoadYN         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_UTQGTreadWear       CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_UTQGTraction        CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_UTQGTemp            CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_MudSnowYN           CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_SevereWeatherInd    CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_RimDiameter         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_SerialDate          CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_LoadRange           CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_MeaRimWidth         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_RegroovableInd      CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_PlantProduced       CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_MostRecentDate      CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_IMark               CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_InformeNumber       CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_FechaDate           CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_TreadPattern        CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_SpecialProtBrand    CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_NominalTireWidth    CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_AspectRatio         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_TreadWearInd        CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_NameOfManufac       CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_Family              CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_DotSerialNumber     CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_TPN                 CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_BiasBeltedRadial    CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_SKU                 CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_SAPSpeedRating      CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_ProdSpeedRating     PRODUCT.SpeedRating%TYPE;
  begin
        if (ps_DeleteMe is null or pi_Countryid is null)then
           raise li_ParametersAreNull;
        end if;
        if pi_skuId is null then
            ln_skuId := 0;
        else
            ln_skuid := pi_skuID;
        end if;
         if (ps_DeleteMe = '' or pi_Countryid <=0) then
           raise li_ParametersArInvalid;
        end if;
        ---ADDED TO GET CERTIFICATIONTYPEID -  JESEITZ 11/26/2012
         li_CertificationTypeId:= ICS_COMMON_FUNCTIONS.GETCERTIFTYPEIDBYCOUNTRYID(
                                                PI_COUNTRYID => PI_COUNTRYID);
        if  substr(ps_Matl_Num,1,8) <> '00000999' then  --- jeseitz added 4/8/2014 - can't get sap data for a 999 tire (doesn't exist in SAP)
        GetTireCharacteristicsAll(ps_Matl_Num,ls_Brand,ls_BrandLine,ls_SizeStamp,ls_TireTypeId,ls_PSN,
                                  ls_DiscontinueDate,ls_SpecNumber,ls_SpeedRating,ls_SingleLoadIndex,ls_DualLoadIndex ,ls_TubelessSyn,
                                  ls_ReinforcedYN ,ls_ExtraLoadYN,ls_UTQGTreadWear,ls_UTQGTraction,ls_UTQGTemp,ls_MudSnowYN,ls_SevereWeatherInd,
                                  ls_RimDiameter,ls_SerialDate,ls_LoadRange,ls_MeaRimWidth,ls_RegroovableInd,ls_PlantProduced,ls_MostRecentDate,
                                  ls_IMark ,ls_InformeNumber,ls_FechaDate,ls_TreadPattern,ls_SpecialProtBrand,ls_NominalTireWidth,
                                  ls_AspectRatio,ls_TreadWearInd,ls_NameOfManufac,ls_Family ,ls_DotSerialNumber,ls_TPN ,ls_BiasBeltedRadial,ls_SKU);

       --Make sure material number wasn't j ust created (in marketing grid, the skuid would get created on the first checked column if there are multiple columns checked)
       IF ln_skuid = 0 THEN
          SELECT NVL(MAX(skuid),0) INTO ln_skuid FROM product WHERE matl_Num = LPAD(ps_Matl_Num,18,0);
       END IF;

		--need to check if the speedrating on the record passed in is current.
		IF ln_skuid <> 0 THEN
			  SELECT P.SPEEDRATING INTO ls_ProdSpeedRating FROM PRODUCT P WHERE P.SKUID = ln_SKUID;

			  ---add exception block here
			 BEGIN
					SELECT MA.ATTRIB_VALUE INTO ls_SAPSpeedRating FROM   CMDR_DATA.MATERIAL_ATTRIBUTE MA WHERE MA.ATTRIB_NAME = 'SPEED_RATING' AND MA.MATL_NUM = ps_Matl_Num;

			 EXCEPTION
				   WHEN NO_DATA_FOUND THEN
						ls_SAPSpeedRating:= NULL;
			 END;

			 IF ls_ProdSpeedRating IS NOT NULL AND ls_SAPSpeedRating IS NOT NULL AND ls_ProdSpeedRating <> ls_SAPSpeedRating THEN
					  --- re-set ln_skuid = 0 so that a new current product record will be created.
					 ln_skuid := 0;
			 END IF;
		END IF;
       end if;
       if  ps_DeleteMe= 'y' or ps_DeleteMe= 'Y' then
         DELETE FROM  PRODUCTCOUNTRY pc WHERE PC.SKUID =ln_skuId  AND   COUNTRYID = pi_Countryid;
      else
        --create the product record if it doesn't exist.
         if ln_skuid = 0 then
              select  SKUID_Seq.nextVal into  ln_SKUID from dual;
                    --Skuid Does not exist in Product,So we insert into product first

                     -- As per PRJ3617,Modified the paramters
                      INSERT INTO Product (skuid, brand,brand_line, sku,Branddesc,Matl_Num, sizestamp, tiretypeid, psn, discontinueddate,
                                           specnumber, speedrating,singloadindex, dualloadindex, tubelessyn, reinforcedyn,
                                           extraloadyn, utqgtreadwear, utqgtraction, utqgtemp,mudsnowyn, rimdiameter, serialdate,
                                           loadrange, mearimwidth, regroovableind, plantproduced, mostrecenttestdate,-- imark,
                                           informenumber, fechadate, treadpattern, specialprotectiveband, nominaltirewidth,
                                           aspectratio, treadwearindicators, nameofmanufacturer, --family,
                                            dotserialnumber, tpn, biasbeltedradial,severeweatherind)
                            VALUES(ln_SKUID,ls_Brand,ls_BrandLine,ls_SKU,NULL,LPAD(ps_Matl_Num,18,0),ls_SizeStamp,ls_TireTypeId,ls_PSN,
                                  DECODE(ls_DiscontinueDate,NULL,NULL,TO_DATE(ls_DiscontinueDate,'MM/DD/YYYY')),ls_SpecNumber,ls_SpeedRating,ls_SingleLoadIndex,ls_DualLoadIndex ,ls_TubelessSyn,
                                  ls_ReinforcedYN ,ls_ExtraLoadYN,ls_UTQGTreadWear,ls_UTQGTraction,ls_UTQGTemp,ls_MudSnowYN,ls_RimDiameter,
                                  ls_SerialDate,ls_LoadRange,ls_MeaRimWidth,ls_RegroovableInd,ls_PlantProduced,ls_MostRecentDate,
                                 -- ls_IMark ,
                                 ls_InformeNumber,ls_FechaDate,ls_TreadPattern,ls_SpecialProtBrand,ls_NominalTireWidth,
                                  ls_AspectRatio,ls_TreadWearInd,ls_NameOfManufac,--ls_Family ,
                                  ls_DotSerialNumber,ls_TPN ,ls_BiasBeltedRadial,ls_SevereWeatherInd);
                        commit;

                        -- we don't worry about assigning a family until attaching to a certificate
                        --JES 7/12/12 took FAMILY out of insert statement because of MUTATING error
                        --   ls_IMarkfamily := BOM_ATTRIBUTES.GET_IMARK_FAMILY(ps_Matl_Num); -- As per PRJ3617,replaced ps_SKU with ps_Matl_Num
  --                        UPDATE PRODUCT
  --                            SET FAMILY = ls_IMarkfamily
  --                            WHERE Matl_Num = ps_Matl_Num;  -- AS per PRJ3617,replaced SKU with Matl_Num in where condition
  --                         COMMIT;

                          ---JES 1/23/13 need to find family separate -- needs to be after product record is inserted. - was inserting blank family into product record.
--                           ls_family :=  BOM_ATTRIBUTES.GET_IMARK_FAMILY(LPAD(ps_Matl_Num,18,0));
--                           UPDATE PRODUCT_IMARK_FAMILY
--                                     SET FAMILYID = ls_family,
--                                            IMARK = ls_Imark
--                                        WHERE SKUID =  ln_SkuId
--                                             and certificateid = (select max(certificateid) from certificate
--                                               where certificationtypeid =4 and upper(mostrecentcert) = 'Y' and
--                                               archivedate_cegi is null and upper(activestatus) = 'Y');
--                            COMMIT;


          end if;

            --Checks if the sku and countryid already exists on the ProductCountry table
             SELECT count(1) as total into li_TotalSkuWithCountryIdFound
                FROM  PRODUCTCOUNTRY pc
                WHERE pc.skuid=ln_skuId  and
                  pc.countryid = pi_Countryid;
                --- and PC.CERTIFICATIONTYPEID = li_CertificationTypeId  ;

            if li_TotalSkuWithCountryIdFound = 0 then

                         INSERT INTO  PRODUCTCOUNTRY (SKUID, COUNTRYID,CERTIFICATIONTYPEID)
                         VALUES (ln_SKUID,pi_Countryid,nvl(li_CertificationTypeId,0) );--JESEITZ ADDED CERTIFICATIONTYPEID 11/26/2012
            end if;
--           commented out to handle imark certificate same as emark.
--           if li_CertificationTypeId = 4 then
--                li_certificateId:=ICS_COMMON_FUNCTIONS.GETLATESTIMARKCERTIFICATEID();
--                if li_certificateId <> 0 then
--                    CERTIFICATION_CRUD.ADDNEWSKUSTOIMARKCERTIFICATE(
--                                              PI_SKUID =>  ln_SKUID, --- pi_skuId - was zero if adding new product
--                                              PI_COUNTRYID => pi_Countryid
--                                            );
--               end if;
--           end if;
        end if;
   EXCEPTION
      when li_ParametersAreNull then
            ls_ErrorMsg:=  sqlerrm || ' At least one of the parameters is.';
                   APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                            ad_OPERATORID => ls_OperatorId,
              AD_DATERECORDED  => sysdate,
              AS_PROCESSNAME   => ' ICS_CRUD.CreateOrDeleteProductCountry',
              AX_RECORDDATA     => 'ps_DeleteMe  is null or pi_Countryid is null or ps_Matl_Num  is null.',
              AS_MESSAGECODE   => to_char(sqlcode),
              AS_MESSAGE       =>ln_skuid||' '|| ls_ErrorMsg);
           raise_application_error (-20005,ls_ErrorMsg);
      when li_ParametersArInvalid then
            ls_ErrorMsg:=  sqlerrm || ' At least one of the parameters isinvalid .';
                   APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                  ad_OPERATORID => ls_OperatorId,
                  AD_DATERECORDED  => sysdate,
                  AS_PROCESSNAME   => ' ICS_CRUD.CreateOrDeleteProductCountry',
                  AX_RECORDDATA    => 'ps_DeleteMe  is null or pi_Countryid is invalid or ps_Matl_Num  is invalid.',
                  AS_MESSAGECODE   => to_char(sqlcode),
                  AS_MESSAGE       =>ln_skuid||' '|| ls_ErrorMsg);
           raise_application_error (-20006,ls_ErrorMsg);
      when others then
            ls_ErrorMsg:=  sqlerrm || ' An error have ocurred.(when others)';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                    ad_OPERATORID => ls_OperatorId,
                    AD_DATERECORDED  => sysdate,
                    AS_PROCESSNAME   =>' ICS_CRUD.CreateOrDeleteProductCountry',
                    AX_RECORDDATA    => 'An error have ocurred.(when others)',
                    AS_MESSAGECODE   => ln_skuid||' '|| pi_Countryid||' '|| to_char(sqlcode),
                    AS_MESSAGE       =>ls_ErrorMsg);
              raise_application_error (-20007,ls_ErrorMsg);
  END CreateOrDeleteProductCountry;


 procedure ProductCountry_Save (ps_DeleteMe in char,ps_Matl_Num in varchar2,pi_CertificationId in integer,pi_SKUId in integer) as
    /******************************************************************************
     NAME:       ProductCountry_Save
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0
     1.1        10/2/2012     Harini         1.Replaced ps_SKU with ps_Matl_Num.
                                             2.Removed referring SKUMain_Latest_View
                                             and call GetTireCharactyeristicsAl proc
     1.2        10/16/2013    Harini         1.Modified the call of GetTireCharacteristicsAll
                                             before IF ln_skuid = 0 and added else part for this
                                             to update the data if record exists.
     1.3        11/04/2013    Harini         1.As per IDEA2706,Modified the call of GetTireCharacteristicsAll
                                             such that it retrieves ls_SevereWeatherInd and inserts/updates into
                                             Product table
     1.4        11/22/2013    Guru           1.In the else part of SKUID existance checking,check for the current
                                             speed rating.
     1.5        01/10/2014    Harini         1. Removed else part of ln_skuid= 0 after GetTireCharacteristicsAll call
                                              and checking for both product speedrating and Sap speedrating not null
     1.6        02/24/2014    Harini         1. If null is retrieved when getting the max(skuid) from product table,
                                                assign ln_skuid=0
     1.7        04/07/2013  jeseitz  don't call GetTireCharacteristicsAll for a '999' legacy sku tire.
  ******************************************************************************/
    --varible
      ls_MachineId           VARCHAR2(50):=null;
      ls_OperatorId          VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg            VARCHAR2(4000);
      ln_ErrorNum            NUMBER(1);
      ln_SkuID               ics.product.skuid%TYPE;
      ls_IMarkfamily         ICS.PRODUCT_IMARK_FAMILY.FAMILYID%type;
      le_Done                EXCEPTION;
      ls_Brand               CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_BrandLine           CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_SizeStamp           CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_TireTypeId          CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_PSN                 CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_DiscontinueDate     CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_SpecNumber          CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_SpeedRating         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_SingleLoadIndex     CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_DualLoadIndex       CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_TubelessSyn         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_ReinforcedYN        CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_ExtraLoadYN         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_UTQGTreadWear       CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_UTQGTraction        CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_UTQGTemp            CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_MudSnowYN           CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_SevereWeatherInd    CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_RimDiameter         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_SerialDate          CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_LoadRange           CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_MeaRimWidth         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_RegroovableInd      CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_PlantProduced       CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_MostRecentDate      CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_IMark               CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_InformeNumber       CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_FechaDate           CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_TreadPattern        CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_SpecialProtBrand    CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_NominalTireWidth    CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_AspectRatio         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_TreadWearInd        CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_NameOfManufac       CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_Family              CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_DotSerialNumber     CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_TPN                 CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_BiasBeltedRadial    CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_SKU                 CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_ProdSpeedRating     PRODUCT.SPEEDRATING%TYPE;
      ls_SAPSpeedRating      CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
BEGIN

     --Make sure material number wasn't just created (in marketing grid, the skuid would get created on the first checked column if there are multiple columns checked)
     ln_skuid := NVL(pi_skuid,0);
     IF ln_skuid = 0 THEN
         SELECT NVL(MAX(skuid),0) INTO ln_skuid FROM product WHERE matl_Num = LPAD(ps_Matl_Num,18,0);
     END IF;

	--need to check if the speedrating on the record passed in is current.
	IF ln_skuid <> 0 and substr(ps_Matl_Num,1,8) <> '00000999' THEN -- jeseitz added 4/7/2014 can't check against SAP for tire not in sap
		  SELECT P.SPEEDRATING INTO ls_ProdSpeedRating FROM PRODUCT P WHERE P.SKUID = ln_SKUID;

		  ---add exception block here
		 BEGIN
				SELECT MA.ATTRIB_VALUE INTO ls_SAPSpeedRating FROM   CMDR_DATA.MATERIAL_ATTRIBUTE MA WHERE MA.ATTRIB_NAME = 'SPEED_RATING' AND MA.MATL_NUM = ps_Matl_Num;

		 EXCEPTION
			   WHEN NO_DATA_FOUND THEN
					ls_SAPSpeedRating := NULL;
		 END;

		 IF ls_ProdSpeedRating IS NOT NULL AND ls_SAPSpeedRating IS NOT NULL AND ls_ProdSpeedRating <> ls_SAPSpeedRating THEN
				  --- re-set ln_skuid = 0 so that a new current product record will be created.
				 ln_skuid := 0;
		 END IF;
	END IF;


    --  Clear olld records to pick up any changes
--    IF pi_CertificationID = 6 THEN
--            DELETE
--              FROM productcountry
--            WHERE certificationtypeid IN (1,6)
--                AND skuid =ln_Skuid;
--            COMMIT;
--    ELSE
            DELETE
              FROM productcountry
            WHERE certificationtypeid = pi_CertificationID
                AND skuid = ln_Skuid;
            COMMIT;
--     END IF;
     --  If only deleting coutnries exit now
      IF UPPER(ps_deleteme) = 'Y' THEN
             RAISE le_Done;
     END IF;

--      --Make sure material number wasn't just created (in marketing grid, the skuid would get created on the first checked column if there are multiple columns checked)
--      ln_skuid := NVL(pi_skuid,0);
--     IF ln_skuid = 0 THEN
--            begin
--              select skuid into ln_skuid from product where matl_Num = LPAD(ps_Matl_Num,18,0);
--            exception
--              when others then
--              ln_skuid := 0;
--            end;
--       end if;
--


    IF ln_skuid = 0 THEN
          --Skuid Does not exist in Product,So we insert into product first

          GetTireCharacteristicsAll(ps_Matl_Num,ls_Brand,ls_BrandLine,ls_SizeStamp,ls_TireTypeId,ls_PSN,
                            ls_DiscontinueDate,ls_SpecNumber,ls_SpeedRating,ls_SingleLoadIndex,ls_DualLoadIndex ,ls_TubelessSyn,
                            ls_ReinforcedYN ,ls_ExtraLoadYN,ls_UTQGTreadWear,ls_UTQGTraction,ls_UTQGTemp,ls_MudSnowYN,ls_SevereWeatherInd,ls_RimDiameter,
                            ls_SerialDate,ls_LoadRange,ls_MeaRimWidth,ls_RegroovableInd,ls_PlantProduced,ls_MostRecentDate,
                            ls_IMark ,ls_InformeNumber,ls_FechaDate,ls_TreadPattern,ls_SpecialProtBrand,ls_NominalTireWidth,
                            ls_AspectRatio,ls_TreadWearInd,ls_NameOfManufac,ls_Family ,ls_DotSerialNumber,ls_TPN ,ls_BiasBeltedRadial,ls_SKU);

           SELECT  SKUID_Seq.NextVal INTO ln_SkuId FROM DUAL;
          ---INSERT INTO product
          ---      (skuid,BRANDCODE,SKU,SIZESTAMP, TIRETYPEID)
          ---       Select ln_SkuId, BrandCode, SKU, SizeStamp, TIRETYPEID
          ---        From SKUMain_vw
          ---     Where SKU = ps_sku;
          --- jes 08/05/2011 - fields were being left blank when new product record was created. Change insert statement
          --- to include all the fields in the insert in CREATEORDELETEPRODUCTCOUNTRY routine above.

         -- As per PRJ3617,Modified the paramters
          INSERT INTO Product (skuid, brand,brand_line, sku,Branddesc,Matl_Num, sizestamp, tiretypeid, psn, discontinueddate,
                               specnumber, speedrating,singloadindex, dualloadindex, tubelessyn, reinforcedyn,
                               extraloadyn, utqgtreadwear, utqgtraction, utqgtemp,mudsnowyn, rimdiameter, serialdate,
                               loadrange, mearimwidth, regroovableind, plantproduced, mostrecenttestdate, ---imark,
                               informenumber, fechadate, treadpattern, specialprotectiveband, nominaltirewidth,
                               aspectratio, treadwearindicators, nameofmanufacturer,--family,
                               dotserialnumber, tpn, biasbeltedradial,severeweatherind)
                VALUES(ln_SkuId,ls_Brand,ls_BrandLine,ls_SKU,NULL,LPAD(ps_Matl_Num,18,0),ls_SizeStamp,ls_TireTypeId,ls_PSN,
                       DECODE(ls_DiscontinueDate,NULL,NULL,TO_DATE(ls_DiscontinueDate,'MM/DD/YYYY')),ls_SpecNumber,ls_SpeedRating,ls_SingleLoadIndex,ls_DualLoadIndex ,ls_TubelessSyn,
                      ls_ReinforcedYN ,ls_ExtraLoadYN,ls_UTQGTreadWear,ls_UTQGTraction,ls_UTQGTemp,ls_MudSnowYN,ls_RimDiameter,
                      ls_SerialDate,ls_LoadRange,ls_MeaRimWidth,ls_RegroovableInd,ls_PlantProduced,ls_MostRecentDate,
                      --ls_IMark ,
                      ls_InformeNumber,ls_FechaDate,ls_TreadPattern,ls_SpecialProtBrand,ls_NominalTireWidth,
                      ls_AspectRatio,ls_TreadWearInd,ls_NameOfManufac,---ls_Family ,
                      ls_DotSerialNumber,ls_TPN ,ls_BiasBeltedRadial,ls_SevereWeatherInd);
                        commit;
            -- Commented for Test
--            INSERT INTO product (skuid, brandcode, sku, sizestamp, tiretypeid, nprid, discontinueddate, specnumber, speedrating,
--                    singloadindex, dualloadindex, tubelessyn, reinforcedyn, extraloadyn, utqgtreadwear, utqgtraction, utqgtemp,
--                    mudsnowyn, rimdiameter, serialdate, branddesc, loadrange, mearimwidth, regroovableind, plantproduced,
--                    mostrecenttestdate, imark, informenumber, fechadate, treadpattern, specialprotectiveband, nominaltirewidth,
--                    aspectratio, treadwearindicators, nameofmanufacturer, dotserialnumber, ppn, biasbeltedradial)
--                    SELECT ln_SkuId, brandcode, sku, sizestamp, tiretypeid, nprid, discontinuedate, specnumber, speedrating,
--                    singloadindex, dualloadindex, tubelessyn, reinforcedyn, extraloadyn, utqgtreadwear, utqgtraction, utqgtemp,
--                    mudsnowyn, rimdiameter, serialdate, branddesc, loadrange, mearimwidth, regroovableind, plantproduced,
--                    mostrecenttestdate, imark, informenumber, fechadate, treadpattern, specialprotectiveband, nominaltirewidth,
--                    aspectratio, treadwearindicators, nameofmanufacturer,  dotserialnumber, ppn, biasbeltedradial
--                    FROM skumain_vw
--                    WHERE sku = ps_sku;
--
 --           COMMIT;
           ---JES 7/121/12 took FAMILY out of insert statement because of MUTATING error
--              ls_family :=  BOM_ATTRIBUTES.GET_IMARK_FAMILY(PS_SKU);
--               UPDATE PRODUCT
--                      SET FAMILY = ls_family
--                WHERE SKUID =  ln_SkuId;
--               COMMIT;

          -- jes 4/13/2016 - don't worry about assigning to a family until attaching to a certificate
          ---JES 1/23/13 need to find family separate -- needs to be after product record is inserted. - was inserting blank family into product record.
--             ls_family :=  BOM_ATTRIBUTES.GET_IMARK_FAMILY(LPAD(ps_Matl_Num,18,0));
--               UPDATE PRODUCT_IMARK_FAMILY
--                      SET FAMILYID = ls_family,
--                             IMARK = ls_Imark
--                 WHERE SKUID =  ln_SkuId
--                                             and certificateid = (select max(certificateid) from certificate
--                                               where certificationtypeid =4 and upper(mostrecentcert) = 'Y' and
--                                               archivedate_cegi is null and upper(activestatus) = 'Y');
--               COMMIT;


---    ELSE
---            ln_SkuId := pi_SkuId;
    -- Added else part to update the record if the Skuid exists
    END IF;
      --  Create Appropriate Country and SKU Records
--     IF pi_CertificationID = 6 THEN
--            ProductCertification_Save (1, ln_SkuID, ln_ErrorNum);
--            ProductCertification_Save (6, ln_SkuID, ln_ErrorNum);
--     ELSE
            ProductCertification_Save ( pi_CertificationId, ln_SkuId, ln_ErrorNum);
--    END IF;
EXCEPTION
      WHEN le_Done THEN
            COMMIT;
    WHEN OTHERS THEN
        DECLARE
            lsErrorMsg VARCHAR2(300) := SQLERRM;
        BEGIN
             INSERT INTO ICS.LOAD_ERROR
                (table_loaded, key_field_data_1, key_field_data_2, error_date)
                 VALUES
                ('PRODUCT_CERTIFICATE', TO_CHAR(pi_certificationid) || '-' || TO_CHAR(pi_Skuid),
                  SUBSTR(lsErrorMsg, 1, 50), SYSDATE);
         END;
END;

PROCEDURE productcertification_save
--CALLED BY CERTIFICATION_CRUD.CERTIFCATE_SAVE
    (pi_certificationtypeid   IN   NUMBER,
     pi_skuid                     IN   NUMBER,
     pi_error_num            OUT NUMBER)
IS
    ls_RequestStatus        VARCHAR2(1);
   CURSOR lcr_Certs IS
        SELECT cer.certificateid,
              ( Case
                  ---jeseitz 7/27/12 -- fixed case statement -- nom does not get date approved, only date submitted.
                  WHEN pce.SKUID  is not null  AND  (pce.dateapproved_cegi is not null or CER.CERTDATEAPPROVED  is not null) THEN 'A'
                  WHEN PCE.SKUID is not null and ((PCE.DATESUBMITTED is not null or CER.CERTDATESUBMITTED is not null) and PCE.CERTIFICATIONTYPEID = 3) THEN 'A'
                  WHEN PCE.SKUID is not null and (PCE.DATESUBMITTED is not null or  CER.CERTDATESUBMITTED  is not null) THEN 'I'
                  ---WHEN pce.SKUID  is not null  AND (pce.dateapproved_cegi is null or pce.datesubmitted is null)   THEN 'I'
                  ---WHEN pce.SKUID  is not null  AND  (pce.dateapproved_cegi is not null or pce.datesubmitted is not null) THEN 'A'
                  else 'R'
               end ) as state
         FROM Certificate cer, ProductCertificate pce
        WHERE pce.certificationtypeid = pi_certificationtypeid
            AND pce.skuid=pi_SkuId
            AND pce.certificationtypeid = cer.certificationtypeid
            AND pce.certificateid = cer.certificateid
            AND NVL(UPPER(cer.activestatus),'N') = 'Y'
        ORDER BY STATE;
BEGIN
    pi_error_num := 0;
    ls_RequestStatus := 'R';
    FOR lcr_CertsRec IN lcr_Certs LOOP
        -- Since request status (state) is ordered
        -- Then the following will provide best result
        -- ls_RequestStatus := lcr_CertsRec.state;
        IF lcr_CertsRec.state = 'A' THEN
                ls_RequestStatus := 'A';
                EXIT;
        END IF;
        IF lcr_CertsRec.state =  'I' THEN
                ls_RequestStatus := 'I';
                EXIT;
         END IF;
     END LOOP;
    INSERT INTO  ICS.PRODUCTREQUEST (CERTIFICATIONTYPEID, SKUID, REQUESTSTATUS)
         VALUES(pi_CertificationTypeId, pi_Skuid, ls_RequestStatus);

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        DECLARE
            lsErrorMsg VARCHAR2(300) := SQLERRM;
        BEGIN
            pi_error_num := 3;
             INSERT INTO ICS.LOAD_ERROR
                (table_loaded, key_field_data_1, key_field_data_2, error_date)
                 VALUES
                ('PRODUCTREQUEST', TO_CHAR(pi_certificationtypeid) || '-' || TO_CHAR(pi_Skuid),
                  SUBSTR(lsErrorMsg, 1, 50), SYSDATE);
         END;
END;
--  Function  GetCertificateState(ps_SKU in Varchar2,pi_CertifId in integer,pi_SKUID in Number) return varchar2 is
--  --Exception variables
--      li_ParametersAreNull exception;
--      -- link the exception to the error number
--      pragma exception_init( li_ParametersAreNull,-20005);
--      --varible
--      ls_MachineId VARCHAR2(50):=null;
--      ls_OperatorId VARCHAR2(50):='ICSDEV';
--      ls_ErrorMsg varchar2(4000);
--      ls_result varchar2(30);
--  begin
--         if ps_SKU is null or pi_CertifId is null then
--            raise li_ParametersAreNull;
--         end if;
--           SELECT
--                CASE
--                    WHEN pc.RequestStatus  is not null  AND  pc.RequestStatus='I'  THEN 'InProgress'
--                    WHEN pc.RequestStatus  is not null  AND  pc.RequestStatus='A'  THEN 'Approved'
--                    WHEN pc.RequestStatus  is null                                 THEN 'Requested'
--                END as CertificateState into ls_result
--          FROM  ProductCountry pc
--          WHERE pc.SKUID =  pi_SKUID and
--                pc.certificationTypeId = pi_CertifId And
--                pc.skuid=pi_skuid;
--          if ls_result is null or nvl(ls_result,'')='' then
--             ls_result:=null;
--          end if;
--          return ls_result;
--     EXCEPTION
--		  when li_ParametersAreNull then
--          ls_ErrorMsg:=  sqlerrm || ' At least one of the parameters is.';
--			     APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
--				      ad_OPERATORID => ls_OperatorId,
--              AD_DATERECORDED  => sysdate,
--              AS_PROCESSNAME   => ' ICS_CRUD.CreateProductCountry',
--              AX_RECORDDATA    => 'ps_DeleteMe  is null or pi_Countryid is null or ps_sku  is null.',
--              AS_MESSAGECODE   => to_char(sqlcode),
--              AS_MESSAGE       => ls_ErrorMsg);
--          raise_application_error (-20005,ls_ErrorMsg);
--		   when others then
--            ls_ErrorMsg:=  sqlerrm || ' An error have ocurred.(when others)';
--             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
--                    ad_OPERATORID => ls_OperatorId,
--                    AD_DATERECORDED  => sysdate,
--                    AS_PROCESSNAME   =>' ICS_CRUD.SearchBrand',
--                    AX_RECORDDATA    => 'An error have ocurred.(when others)',
--                    AS_MESSAGECODE   => to_char(sqlcode),
--                    AS_MESSAGE       =>ls_ErrorMsg);
--             raise_application_error (-20007,ls_ErrorMsg);
--  end GetCertificateState;

PROCEDURE ProductRequestCert_Save(ps_DeleteMe in char,ps_Matl_Num in varchar2,pi_CertificationId in integer,pi_SKUId in integer) as
    /******************************************************************************
     NAME:       ProductRequestCert_Save
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0         06/02/2016  jeseitz        uses for MarketingNew screen that shows all certification types on one screen.

  ******************************************************************************/

      ls_MachineId           VARCHAR2(50):=null;
      ls_OperatorId          VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg            VARCHAR2(4000);
      ln_ErrorNum            NUMBER(1);
      ln_SkuID               ics.product.skuid%TYPE;
      ls_IMarkfamily         ICS.PRODUCT_IMARK_FAMILY.FAMILYID%type;
      le_Done                EXCEPTION;
      ls_Brand               CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_BrandLine           CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_SizeStamp           CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_TireTypeId          CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_PSN                 CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_DiscontinueDate     CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_SpecNumber          CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_SpeedRating         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_SingleLoadIndex     CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_DualLoadIndex       CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_TubelessSyn         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_ReinforcedYN        CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_ExtraLoadYN         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_UTQGTreadWear       CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_UTQGTraction        CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_UTQGTemp            CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_MudSnowYN           CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_SevereWeatherInd    CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_RimDiameter         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_SerialDate          CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_LoadRange           CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_MeaRimWidth         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_RegroovableInd      CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_PlantProduced       CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_MostRecentDate      CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_IMark               CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_InformeNumber       CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_FechaDate           CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_TreadPattern        CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_SpecialProtBrand    CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_NominalTireWidth    CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_AspectRatio         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_TreadWearInd        CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_NameOfManufac       CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_Family              CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_DotSerialNumber     CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_TPN                 CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_BiasBeltedRadial    CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_SKU                 CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_ProdSpeedRating     PRODUCT.SPEEDRATING%TYPE;
      ls_SAPSpeedRating      CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
BEGIN

     --Make sure material number wasn't just created (in marketing grid, the skuid would get created on the first checked column if there are multiple columns checked)
     ln_skuid := NVL(pi_skuid,0);
     IF ln_skuid = 0 THEN
         SELECT NVL(MAX(skuid),0) INTO ln_skuid FROM product WHERE matl_Num = LPAD(ps_Matl_Num,18,0);
     END IF;

    --need to check if the speedrating on the record passed in is current.
    IF ln_skuid <> 0 and substr(ps_Matl_Num,1,8) <> '00000999' THEN -- jeseitz added 4/7/2014 can't check against SAP for tire not in sap
          SELECT P.SPEEDRATING INTO ls_ProdSpeedRating FROM PRODUCT P WHERE P.SKUID = ln_SKUID;

          ---add exception block here
         BEGIN
                SELECT MA.ATTRIB_VALUE INTO ls_SAPSpeedRating FROM   CMDR_DATA.MATERIAL_ATTRIBUTE MA WHERE MA.ATTRIB_NAME = 'SPEED_RATING' AND MA.MATL_NUM = ps_Matl_Num;

         EXCEPTION
               WHEN NO_DATA_FOUND THEN
                    ls_SAPSpeedRating := NULL;
         END;

         IF ls_ProdSpeedRating IS NOT NULL AND ls_SAPSpeedRating IS NOT NULL AND ls_ProdSpeedRating <> ls_SAPSpeedRating THEN
                  --- re-set ln_skuid = 0 so that a new current product record will be created.
                 ln_skuid := 0;
         END IF;
    END IF;



            DELETE
              FROM ics.ProductRequest
            WHERE certificationtypeid = pi_CertificationID
                AND skuid = ln_Skuid;
            COMMIT;

     --  If only deleting certifications, exit now (not sure this is used)
      IF UPPER(ps_deleteme) = 'Y' THEN
             RAISE le_Done;
     END IF;



    IF ln_skuid = 0 THEN
          --Skuid Does not exist in Product,So we insert into product first

          GetTireCharacteristicsAll(ps_Matl_Num,ls_Brand,ls_BrandLine,ls_SizeStamp,ls_TireTypeId,ls_PSN,
                            ls_DiscontinueDate,ls_SpecNumber,ls_SpeedRating,ls_SingleLoadIndex,ls_DualLoadIndex ,ls_TubelessSyn,
                            ls_ReinforcedYN ,ls_ExtraLoadYN,ls_UTQGTreadWear,ls_UTQGTraction,ls_UTQGTemp,ls_MudSnowYN,ls_SevereWeatherInd,ls_RimDiameter,
                            ls_SerialDate,ls_LoadRange,ls_MeaRimWidth,ls_RegroovableInd,ls_PlantProduced,ls_MostRecentDate,
                            ls_IMark ,ls_InformeNumber,ls_FechaDate,ls_TreadPattern,ls_SpecialProtBrand,ls_NominalTireWidth,
                            ls_AspectRatio,ls_TreadWearInd,ls_NameOfManufac,ls_Family ,ls_DotSerialNumber,ls_TPN ,ls_BiasBeltedRadial,ls_SKU);

           SELECT  SKUID_Seq.NextVal INTO ln_SkuId FROM DUAL;

         -- As per PRJ3617,Modified the paramters
          INSERT INTO Product (skuid, brand,brand_line, sku,Branddesc,Matl_Num, sizestamp, tiretypeid, psn, discontinueddate,
                               specnumber, speedrating,singloadindex, dualloadindex, tubelessyn, reinforcedyn,
                               extraloadyn, utqgtreadwear, utqgtraction, utqgtemp,mudsnowyn, rimdiameter, serialdate,
                               loadrange, mearimwidth, regroovableind, plantproduced, mostrecenttestdate, ---imark,
                               informenumber, fechadate, treadpattern, specialprotectiveband, nominaltirewidth,
                               aspectratio, treadwearindicators, nameofmanufacturer,--family,
                               dotserialnumber, tpn, biasbeltedradial,severeweatherind)
                VALUES(ln_SkuId,ls_Brand,ls_BrandLine,ls_SKU,NULL,LPAD(ps_Matl_Num,18,0),ls_SizeStamp,ls_TireTypeId,ls_PSN,
                       DECODE(ls_DiscontinueDate,NULL,NULL,TO_DATE(ls_DiscontinueDate,'MM/DD/YYYY')),ls_SpecNumber,ls_SpeedRating,ls_SingleLoadIndex,ls_DualLoadIndex ,ls_TubelessSyn,
                      ls_ReinforcedYN ,ls_ExtraLoadYN,ls_UTQGTreadWear,ls_UTQGTraction,ls_UTQGTemp,ls_MudSnowYN,ls_RimDiameter,
                      ls_SerialDate,ls_LoadRange,ls_MeaRimWidth,ls_RegroovableInd,ls_PlantProduced,ls_MostRecentDate,
                      --ls_IMark ,
                      ls_InformeNumber,ls_FechaDate,ls_TreadPattern,ls_SpecialProtBrand,ls_NominalTireWidth,
                      ls_AspectRatio,ls_TreadWearInd,ls_NameOfManufac,---ls_Family ,
                      ls_DotSerialNumber,ls_TPN ,ls_BiasBeltedRadial,ls_SevereWeatherInd);
                        commit;

    END IF;
      --  Create Appropriate ProductRequest records
            ProductRequest_Save ( pi_CertificationId, ln_SkuId, ln_ErrorNum);

EXCEPTION
      WHEN le_Done THEN
            COMMIT;
    WHEN OTHERS THEN
        DECLARE
            lsErrorMsg VARCHAR2(300) := SQLERRM;
        BEGIN
             INSERT INTO ICS.LOAD_ERROR
                (table_loaded, key_field_data_1, key_field_data_2, error_date)
                 VALUES
                ('PRODUCT_REQUEST', TO_CHAR(pi_certificationid) || '-' || TO_CHAR(pi_Skuid),
                  SUBSTR(lsErrorMsg, 1, 50), SYSDATE);
         END;


END ProductRequestCert_Save;

PROCEDURE ProductRequest_Save
    (pi_certificationtypeid   IN   NUMBER,
     pi_skuid                     IN   NUMBER,
     pi_error_num            OUT NUMBER)
   /******************************************************************************
     NAME:       ProductRequest_Save
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0         06/02/2016  jeseitz        uses for MarketingNew screen that shows all certification types on one screen.

  ******************************************************************************/


IS
    ls_RequestStatus        VARCHAR2(1);
   CURSOR lcr_Certs IS
        SELECT cer.certificateid,
              ( Case
                  ---jeseitz 7/27/12 -- fixed case statement -- nom does not get date approved, only date submitted.
                  WHEN pce.SKUID  is not null  AND  (pce.dateapproved_cegi is not null or CER.CERTDATEAPPROVED  is not null) THEN 'A'
                  WHEN PCE.SKUID is not null and ((PCE.DATESUBMITTED is not null or CER.CERTDATESUBMITTED is not null) and PCE.CERTIFICATIONTYPEID = 3) THEN 'A'
                  WHEN PCE.SKUID is not null and (PCE.DATESUBMITTED is not null or  CER.CERTDATESUBMITTED  is not null) THEN 'I'
                  ---WHEN pce.SKUID  is not null  AND (pce.dateapproved_cegi is null or pce.datesubmitted is null)   THEN 'I'
                  ---WHEN pce.SKUID  is not null  AND  (pce.dateapproved_cegi is not null or pce.datesubmitted is not null) THEN 'A'
                  else 'R'
               end ) as state
         FROM Certificate cer, ProductCertificate pce
        WHERE pce.certificationtypeid = pi_certificationtypeid
            AND pce.skuid=pi_SkuId
            AND pce.certificationtypeid = cer.certificationtypeid
            AND pce.certificateid = cer.certificateid
            AND NVL(UPPER(cer.activestatus),'N') = 'Y'
        ORDER BY STATE;
BEGIN
    pi_error_num := 0;
    ls_RequestStatus := 'R';
    FOR lcr_CertsRec IN lcr_Certs LOOP
        -- Since request status (state) is ordered
        -- Then the following will provide best result
        -- ls_RequestStatus := lcr_CertsRec.state;
        IF lcr_CertsRec.state = 'A' THEN
                ls_RequestStatus := 'A';
                EXIT;
        END IF;
        IF lcr_CertsRec.state =  'I' THEN
                ls_RequestStatus := 'I';
                EXIT;
         END IF;
     END LOOP;
    INSERT INTO  ICS.PRODUCTREQUEST(SKUID,  CERTIFICATIONTYPEID, REQUESTSTATUS)
         values (pi_Skuid, pi_CertificationTypeId, ls_RequestStatus);

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        DECLARE
            lsErrorMsg VARCHAR2(300) := SQLERRM;
        BEGIN
            pi_error_num := 3;
             INSERT INTO ICS.LOAD_ERROR
                (table_loaded, key_field_data_1, key_field_data_2, error_date)
                 VALUES
                ('PRODUCT_COUNTRY', TO_CHAR(pi_certificationtypeid) || '-' || TO_CHAR(pi_Skuid),
                  SUBSTR(lsErrorMsg, 1, 50), SYSDATE);
         END;
END  ProductRequest_Save;

PROCEDURE GetTireCharacteristicsAll
(
       ps_Matl_Num           IN  PRODUCT.MATL_NUM%TYPE,
       ps_Brand              OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_BrandLine          OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_SizeStamp          OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_TireTypeId         OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_PSN                OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_DiscontinueDate    OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_SpecNumber         OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_SpeedRating        OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_SingleLoadIndex    OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_DualLoadIndex      OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_TubelessSyn        OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_ReinforcedYN       OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_ExtraLoadYN        OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_UTQGTreadWear      OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_UTQGTraction       OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_UTQGTemp           OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_MudSnowYN          OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_SevereWeatherInd   OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_RimDiameter        OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_SerialDate         OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_LoadRange          OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_MeaRimWidth        OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_RegroovableInd     OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_PlantProduced      OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_MostRecentDate     OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_IMark              OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_InformeNumber      OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_FechaDate          OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_TreadPattern       OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_SpecialProtBrand   OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_NominalTireWidth   OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_AspectRatio        OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_TreadWearInd       OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_NameOfManufac      OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_Family             OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_DotSerialNumber    OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_TPN                OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_BiasBeltedRadial   OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE,
       ps_SKU                OUT CMDR_DATA.Material_Attribute.Attrib_Value%TYPE
)
IS
/******************************************************************************
   NAME:       GetTireCharacteristicsAll
   PURPOSE:    This procedure is used to get all the tire characteristics of the
               given Matl_Num.
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        10/01/2012   Harini       1. Created this procedure.
   1.1        10/06/2012   Harini       1. Added SKU as output to insert for new
                                           material
   1.2        12/03/2012   Harini       1. Retrieving the Aspect ratio by strip off
                                          leading zeros
   1.3        11/04/2013   Harini       1. As per IDEA 2706,Modified GetTireCharacteristicsAll
                                        procedure -Added ps_SevereWeatherInd as output parameter
                                        in  procedure and retrieve it and pass the value
                                        to the declared variable
   1.4        02/20/2014   Harini       1.The Tread_Pattern_Design field should be retrieved from
                                        DESIGN_NUM attribute in the CMDR_DATA material_attribute view
*******************************************************************************/
BEGIN
    SELECT
        Brand
        ,Brand_Line
        ,Size_Stamp
        ,CASE WHEN  Product_Type = 'LIGHT TRUCK TIRE' THEN 3
              WHEN  Product_Type = 'SPECIALTY TIRE'   THEN 4
              WHEN  Product_Type = 'PASSENGER TIRE'   THEN 1
              WHEN  Product_Type = 'CYCLE TIRE'       THEN 0
              WHEN  Product_Type = 'TRUCK & BUS TIRE'        THEN 7
          END  TireTypeId
         ,PSN
         ,De_Authorization_Date
         ,SpecNumber
         ,Speed_Rating
         ,Single_Load_Index
         ,Dual_Load_Index
         --,DECODE(Tube_Type,'TUBELESS','N','Y') JESEITZ 10/31/12
         ,DECODE(Tube_Type,'TUBELESS','Y','N')
         ,DECODE(NVL(ReinforcedYN,' '),'RE','Y','N') ReinforcedYN
         ,UTQG_Treadwear
         ,NVL(UTQG_Traction,0)
         ,UTQG_Temperature
         ,DECODE(Mud_Snow_Stamping,'M+S','Y','N')  Mud_Snow_Stamping
         ,DECODE(Severe_Weather_Symbol,'YES','Y','N') Severe_Weather_Symbol
         ,Rim_Diameter
         ,SerialDate
         ,Load_Range
         ,Measuring_Rim_Width
         ,DECODE(Regroovable,'YES','Y','N')  Regroovable
         ,Plant_Produced
         ,Most_Recent_Date
         ,I_Mark
         ,Informe_Number
         ,FechaDate
         ,Tread_Pattern_Design
         ,Special_Protective_Band
         ,Nominal_Section_Width
         ,TRIM(LEADING 0 FROM Aspect_Ratio) Aspect_Ratio
         ,Treadwear_Indicators
         ,Name_Of_Manufacturer
         ,Family
         ,Dot_Serial_Number
         ,Technical_Platform
         ,DECODE(Rma_Tire_Ply_Construction,'BIAS-BELTED','BELTED','R','RADIAL','2','BIAS','3','BELTED',Rma_Tire_Ply_Construction)
         ,nvl(Legacy_SKU,substr( Matl_Num,9)) Legacy_SKU --- use last 10 characters of material number if sku is null -- jes - 1/24/13
    INTO
          ps_Brand,
          ps_BrandLine,
          ps_SizeStamp,
          ps_TireTypeId,
          ps_PSN,
          ps_DiscontinueDate,
          ps_SpecNumber,
          ps_SpeedRating,
          ps_SingleLoadIndex,
          ps_DualLoadIndex,
          ps_TubelessSyn,
          ps_ReinforcedYN,
          ps_UTQGTreadWear,
          ps_UTQGTraction,
          ps_UTQGTemp,
          ps_MudSnowYN,
          ps_SevereWeatherInd,
          ps_RimDiameter,
          ps_Serialdate,
          ps_LoadRange,
          ps_MeaRimWidth,
          ps_RegroovableInd,
          ps_PlantProduced,
          ps_MostRecentDate,
          ps_IMark,
          ps_InformeNumber,
          ps_FechaDate,
          ps_TreadPattern,
          ps_SpecialProtBrand,
          ps_NominalTireWidth,
          ps_AspectRatio,
          ps_TreadWearInd,
          ps_NameOfManufac,
          ps_Family,
          ps_DotSerialNumber,
          ps_TPN,
          ps_BiasBeltedRadial,
          ps_SKU
     FROM
     (
      SELECT   LPAD(Matl_Num,18,0) Matl_Num
             ,MAX(DECODE(Attrib_Name,'BRAND',Attrib_Value))                     AS Brand
             ,MAX(DECODE(Attrib_Name,'BRAND_LINE',Attrib_Value))                AS Brand_Line
             ,MAX(DECODE(Attrib_Name,'TIRE_SIZE',Attrib_Value))                 AS Size_Stamp
             ,MAX(DECODE(Attrib_Name,'PRODUCT_TYPE',Attrib_Value))              AS Product_Type
             -- NULL                                                                                     AS PSN
             ,MAX(DECODE(attrib_name,'NPR_ID',attrib_Value))                      AS PSN  -- NPR_ID added in CMDR 1/23/2013 -- JES
             ,MAX(DECODE(Attrib_Name,'DE_AUTHORIZATION_DATE',Attrib_Value))     AS De_Authorization_Date
             ,NULL                                                              AS SpecNumber
             ,MAX(DECODE(Attrib_Name,'SPEED_RATING',Attrib_Value))              AS Speed_Rating
             ,MAX(DECODE(Attrib_Name,'STAMPED_SINGLE_LOAD_INDEX',Attrib_Value)) AS Single_Load_Index
             ,MAX(DECODE(Attrib_Name,'STAMPED_DUAL_LOAD_INDEX',Attrib_Value))   AS Dual_Load_Index
             ,MAX(DECODE(Attrib_Name,'TUBE_TYPE',Attrib_Value))                 AS Tube_Type
             ,MAX(DECODE(Attrib_Name,'LOAD_RANGE',Attrib_Value))                AS ReinforcedYN
             ,MAX(DECODE(Attrib_Name,'UTQG_TREADWEAR',Attrib_Value))            AS UTQG_Treadwear
             ,MAX(DECODE(Attrib_Name,'UTQG_TRACTION',Attrib_Value))             AS UTQG_Traction
             ,MAX(DECODE(Attrib_Name,'UTQG_TEMPERATURE',Attrib_Value))          AS UTQG_Temperature
             ,MAX(DECODE(Attrib_Name,'MUD_SNOW_STAMPING',Attrib_Value))         AS Mud_Snow_Stamping
             ,MAX(DECODE(Attrib_Name,'SEVERE_WEATHER_SYMBOL',Attrib_Value))     AS Severe_Weather_Symbol
             ,MAX(DECODE(Attrib_Name,'RIM_DIAMETER',Attrib_Value))              AS Rim_Diameter
             ,NULL                                                              AS SerialDate
             ,MAX(DECODE(Attrib_Name,'LOAD_RANGE',Attrib_Value))                AS Load_Range
             ,MAX(DECODE(Attrib_Name,'MEASURING_RIM_WIDTH',REPLACE(Attrib_Value,'MT','')))       AS Measuring_Rim_Width
             ,MAX(DECODE(Attrib_Name,'REGROOVABLE',Attrib_Value))               AS Regroovable
             ,NULL                                                              AS Plant_Produced
             ,NULL                                                              AS Most_Recent_Date
             ,MAX(DECODE(Attrib_Name,'I_MARK',Attrib_Value))                    AS I_Mark
             ,NULL                                                              AS Informe_Number
             ,NULL                                                              AS FechaDate
             ,MAX(DECODE(Attrib_Name,'DESIGN_NUM',Attrib_Value))                AS Tread_Pattern_Design
             ,NULL                                                              AS Special_Protective_Band
             ,MAX(DECODE(Attrib_Name,'NOMINAL_SECTION_WIDTH',Attrib_Value))     AS Nominal_Section_Width
             ,MAX(DECODE(Attrib_Name,'ASPECT_RATIO',Attrib_Value))              AS Aspect_Ratio
             ,NULL                                                              AS Treadwear_Indicators
             ,NULL                                                              AS Name_Of_Manufacturer
             ,NULL                                                              AS Family
             ,NULL                                                              AS Dot_Serial_Number
             ,MAX(DECODE(Attrib_Name,'TECHNICAL_PLATFORM',Attrib_Value))        AS Technical_Platform
             ,MAX(DECODE(Attrib_Name,'RMA_TIRE_PLY_CONSTRUCTION',Attrib_Value)) AS Rma_Tire_Ply_Construction
             ,MAX(DECODE(Attrib_Name,'LEGACY_COOPER_SKU',Attrib_Value))         AS Legacy_SKU
     FROM ( SELECT ma.*,
                   DENSE_RANK() OVER(PARTITION BY ma.Matl_Num, ma.Attrib_Name ORDER BY ma.Counter DESC) rk
              FROM Material_Attribute ma
             WHERE Attrib_Name IN ('BRAND' ,'BRAND_LINE' ,'TIRE_SIZE','PRODUCT_TYPE','DE_AUTHORIZATION_DATE',
                                   'SPEED_RATING','STAMPED_SINGLE_LOAD_INDEX','STAMPED_DUAL_LOAD_INDEX','TUBE_TYPE',
                                   'LOAD_RANGE','UTQG_TREADWEAR','UTQG_TRACTION','UTQG_TEMPERATURE','MUD_SNOW_STAMPING',
                                   'SEVERE_WEATHER_SYMBOL','RIM_DIAMETER','MEASURING_RIM_WIDTH','REGROOVABLE','I_MARK' ,
                                   'DESIGN_NUM','NOMINAL_SECTION_WIDTH','ASPECT_RATIO','TECHNICAL_PLATFORM',
                                   'RMA_TIRE_PLY_CONSTRUCTION','LEGACY_COOPER_SKU','NPR_ID')
               AND Matl_Num = LPAD(ps_Matl_Num,18,0) )
    WHERE rk = 1
    GROUP BY LPAD(Matl_Num,18,0));
    IF NVL(ps_LoadRange, ' ') = 'C' AND ps_TIRETYPEID =  1 THEN
              ps_EXTRALOADYN := 'Y';
     ELSIF NVL (ps_LoadRange, ' ') = 'XL'  THEN
              ps_EXTRALOADYN := 'Y';
     ELSE
             ps_EXTRALOADYN :=  'N';
     END IF;
    --do we need to do this?
    ps_Family := BOM_ATTRIBUTES.Get_IMark_Family(ps_Matl_Num,0);
   EXCEPTION
      WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END GetTireCharacteristicsAll;

END ICS_CRUD;
/

create or replace PACKAGE           ICS_MAINTENANCE
AS
/******************************************************************************
   NAME:       ICS_MAINTENANCE

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        02/28/2013  Krishna          Initial Version
   1.1        10/16/2013  Harini           Created GetFamilies,SaveFamily,Delete Family
                                           and  CheckIfFamilyExists procedures
   1.2        11/19/2013  Guru             Added GET_MATERIALS,COPY_PRODUCT,EDIT_PRODUCT,
                                           ATTACH_PRODUCT procedures
   1.3        11/21/2013  Harini           Added new function to retrieve the most recent ext
                                           number "GetCertificateRecentExtNumber"
   1.4        01/10/2014  Harini           Added new procedure "Refresh_Product"
   1.5        09/12/2019  JESEITZ          GET_PRODUCT_INFO Moved from TRACS.ics_support package on technical database
******************************************************************************/

FUNCTION GetCertificateExtNumber (pn_CertificationTypeId   IN certificate.CertificationTypeId%TYPE,
                                  ps_CertificateNumber     IN  Certificate.CertificateNumber%TYPE)
RETURN VARCHAR2;

--
FUNCTION CheckIfCertificateExists (pn_CertificationTypeId   IN  Certificate.CertificationTypeId%TYPE,
                                   ps_CertificateNumber     IN  Certificate.CertificateNumber%TYPE,
                                   ps_Extension_En          IN  Certificate.Extension_En%TYPE)
RETURN VARCHAR2;

--
PROCEDURE SetMostRecentCert (pn_CertificationTypeId IN  Certificate.CertificationTypeId%TYPE,
                             ps_CertificateNumber   IN  Certificate.CertificateNumber%TYPE,
                             ps_OperatorName        IN VARCHAR2);

--
PROCEDURE GetCertificateMatlCount ( pn_CertificationTypeId   IN  Certificate.CertificationTypeId%TYPE,
                                    ps_CertificateNumber     IN  Certificate.CertificateNumber%TYPE,
                                    ps_Extension_En          IN  Certificate.Extension_En%TYPE,
                                    pn_Matl_Cnt              OUT NUMBER);

--
PROCEDURE RenameCertificate ( pn_CertificationTypeId  IN Certificate.CertificationTypeId%TYPE,
                              ps_OldCertificateNumber IN Certificate.CertificateNumber%TYPE,
                              ps_OldExtension_En      IN Certificate.Extension_En%TYPE,
                              Ps_NewCertificateNumber IN Certificate.CertificateNumber%TYPE,
                              Ps_NewExtension_En      IN Certificate.Extension_En%TYPE,
                              ps_OperatorName         IN VARCHAR2);

--
PROCEDURE DeleteProductCountry (pn_SkuId                 IN  ProductCertificate.SkuId%TYPE,
                                pn_CertificationTypeId   IN  Certificate.CertificationTypeId%TYPE,
                                ps_OperatorName          IN  VARCHAR2);

--
PROCEDURE DeleteCertReferences (pn_CertificationTypeId   IN  Certificate.CertificationTypeId%TYPE,
                                pn_CertificateId         IN  Certificate.CertificateId%TYPE,
                                ps_Table_Name            IN  VARCHAR2,
                                ps_OperatorName          IN  VARCHAR2);

--
PROCEDURE DeleteCertificate (pn_CertificationTypeId   IN  Certificate.CertificationTypeId%TYPE,
                             ps_CertificateNumber     IN  Certificate.CertificateNumber%TYPE,
                             ps_Extension_En          IN  Certificate.Extension_En%TYPE,
                             ps_OperatorName          IN  VARCHAR2);

--
PROCEDURE GetCertificateMatls ( pn_CertificationTypeId   IN  Certificate.CertificationTypeId%TYPE,
                                ps_CertificateNumber     IN  Certificate.CertificateNumber%TYPE,
                                ps_Extension_En          IN  Certificate.Extension_En%TYPE,
                                Pc_cursor                OUT SYS_REFCURSOR);

--
PROCEDURE DetachCertificate (pn_SkuId          IN  Product.SkuId%TYPE,
                             pn_CertificateId  IN  Certificate.CertificateId%TYPE);

--
PROCEDURE MoveCertificate ( pn_CertificationTypeId   IN Certificate.CertificationTypeId%TYPE,
                            ps_NewCertificateNumber  IN Certificate.CertificateNumber%TYPE,
                            ps_NewExtension_En       IN Certificate.Extension_En%TYPE,
                            pn_SkuId                 IN Product.Skuid%TYPE,
                            pn_CertificateId         IN Certificate.CertificateId%TYPE,
                             ps_OperatorName          IN VARCHAR2);

--

PROCEDURE GetDuplicateCert (ps_Matl_Num    IN  Product.Matl_Num%TYPE,
                            ps_SpeedRating IN  Product.SpeedRating%TYPE,
                            ps_Result      OUT SYS_REFCURSOR) ;

--
PROCEDURE RemoveDuplicateCert(pn_SkuId IN Product.SkuId%TYPE);

--
PROCEDURE GetFamilies (pn_Certificateid in ics.imark_family.certificateid%type,
                                     ps_Result           OUT  SYS_REFCURSOR);

--
PROCEDURE SaveFamily (pn_Certificateid in ics.imark_family.certificateid%type,
                      pn_FamilyID           IN IMark_Family.Family_Id%TYPE,
                      ps_FamilyCode          IN IMark_Family.Family_Code%TYPE,
                      ps_FamilyDesc         IN IMark_Family.Family_Desc%TYPE,
                      ps_ApplicationCat     IN IMark_Family.Application_Cat%TYPE,
                      ps_ConstructionType   IN IMark_Family.Construction_Type%TYPE,
                      ps_StructureType      IN IMark_Family.Structure_Type%TYPE,
                      ps_MountingType       IN IMark_Family.Mounting_Type%TYPE,
                      ps_AspectRatioCat     IN IMark_Family.Aspect_Ratio_Cat%TYPE,
                      ps_SpeedRatingCat     IN IMark_Family.Speed_Rating_Cat%TYPE,
                      ps_LoadIndexCat       IN IMark_Family.Load_Index_Cat%TYPE,
                      ps_UserName           IN IMark_Family.CreatedBy%TYPE);

--
PROCEDURE DeleteFamily(pn_Certificateid in ics.imark_family.certificateid%type,
                                       pn_FamilyID          IN IMark_Family.Family_Id%TYPE);
--
 PROCEDURE CheckIfFamilyExists (pn_Certificateid in ics.imark_family.certificateid%type,
                                pn_FamilyID          IN   IMark_Family.Family_Id%TYPE,
                                ps_Family_Exist      OUT  VARCHAR2,
                                ps_Family_Desc       OUT  VARCHAR2);
--
PROCEDURE GET_MATERIALS(ps_Matl_num         IN   PRODUCT.MATL_NUM%TYPE,
                         pc_Cursor          OUT  SYS_REFCURSOR);
--
PROCEDURE COPY_PRODUCT(ps_MATL_NUM          IN   PRODUCT.MATL_NUM%TYPE);
--
PROCEDURE EDIT_PRODUCT(pn_SKUID             IN   PRODUCT.SKUID%TYPE,
                       ps_speedrating       IN   PRODUCT.SPEEDRATING%TYPE);
--

PROCEDURE ATTACH_PRODUCT(pn_skuid                 IN   PRODUCT.SKUID%TYPE,
                         ps_certificateNumber     IN   certificate.CertificateNumber%TYPE,
                         ps_Extension_EN          IN   certificate.extension_EN%TYPE,
                         pn_certificationtypeid   IN   certificate.certificationtypeid%TYPE,
                         ps_ErrorMsg              OUT  VARCHAR2);

--
FUNCTION GetCertificateRecentExtNumber (pn_CertificationTypeId   IN  Certificate.CertificationTypeId%TYPE,
                                        ps_CertificateNumber     IN  Certificate.CertificateNumber%TYPE)
RETURN VARCHAR2;

PROCEDURE Refresh_Product(ps_MATL_NUM          IN   PRODUCT.MATL_NUM%TYPE,
                          pn_ErrorNum          OUT  NUMBER,
                          ps_ErrorMsg          OUT  VARCHAR2);
                          
PROCEDURE DeleteProductImarkFamily (pn_SkuId                 IN  ProductCertificate.SkuId%TYPE,
                           pn_CertificateId   IN  Certificate.CertificateId%TYPE);
						   
PROCEDURE GET_PRODUCT_INFO (ps_MATL_NUM IN   PRODUCT.MATL_NUM%TYPE,
                            pc_product   OUT  SYS_REFCURSOR,
                            pn_error_num OUT  NUMBER,
                            ps_error_desc OUT VARCHAR2);                         

END ICS_MAINTENANCE;
/


create or replace PACKAGE BODY           ICS_MAINTENANCE
AS

FUNCTION GetCertificateExtNumber (Pn_CertificationTypeId   In certificate.CertificationTypeId%TYPE,
                                  Ps_CertificateNumber     In  Certificate.CertificateNumber%TYPE)
RETURN VARCHAR2
AS
/******************************************************************************
   NAME:       GetCertificateExtNumber
   PURPOSE:    Returns certificate extension  for given Certificate number and certificate type

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        02/28/2013  Krishna          Initial Version
******************************************************************************/
ls_Extension_En Certificate.Extension_En%TYPE;

BEGIN

     SELECT Max(TO_NUMBER(Extension_En))
       INTO ls_Extension_En
       FROM Certificate
      WHERE CertificationTypeId = Pn_CertificationTypeId
        AND UPPER(CertificateNumber) = UPPER(Ps_CertificateNumber);

      RETURN NVL(Ls_Extension_En,'0');

EXCEPTION

  WHEN No_Data_Found THEN
    ls_Extension_En := '0';
     RETURN Ls_Extension_En;

END  Getcertificateextnumber;

FUNCTION CheckIfCertificateExists (pn_CertificationTypeId   IN  Certificate.CertificationTypeId%TYPE,
                                   ps_CertificateNumber     IN  Certificate.CertificateNumber%TYPE,
                                   ps_Extension_En          IN  Certificate.Extension_En%TYPE)
RETURN VARCHAR2
AS
/******************************************************************************
   NAME:       CheckIfCertificateExists
   PURPOSE:    Certificate exist return 'Y' else 'N'

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        02/28/2013  Krishna          Initial Version
******************************************************************************/
ln_CertificateExist VARCHAR2(1);
ln_CertificateId NUMBER;

BEGIN

 IF (pn_CertificationTypeId = 1 OR pn_CertificationTypeId = 6)
     AND ps_Extension_En IS NOT NULL THEN
      -- Get the CertificateId
      ICS_COMMON_FUNCTIONS.GetCertificateIdByNumber(ps_CertificateNumber,
                                                    pn_CertificationTypeId,
                                                    ps_Extension_En,
                                                    ln_CertificateId);

      ln_CertificateExist := CASE WHEN ln_CertificateId = 0
                                  THEN 'N'
                                  ELSE 'Y' END;

      RETURN ln_CertificateExist;

 ELSE
      -- Check whether Certificate exist or not
      ln_CertificateExist := ICS_COMMON_FUNCTIONS.CheckIfCertificateExists(ps_CertificateNumber,
                                                                           pn_CertificationTypeId);
      RETURN ln_CertificateExist;
 END IF;

END CheckIfCertificateExists;


PROCEDURE SetMostRecentCert (pn_CertificationTypeId  IN  Certificate.CertificationTypeId%TYPE,
                             ps_CertificateNumber    IN  Certificate.CertificateNumber%TYPE,
                             ps_OperatorName         IN VARCHAR2)
AS
/******************************************************************************
   NAME:       SetMostRecentCert
   PURPOSE:    Update MostRecentCert to  Y when maximum of extension and given
               certificatenumber and certificationtypeid else N

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        02/28/2013  Krishna          Initial Version
******************************************************************************/
ln_Max_Ext NUMBER;
ls_ErrorMsg VARCHAR2(4000);
ls_OperatorId VARCHAR2(50) := 'ICSDEV';

BEGIN

  IF ps_OperatorName IS NOT NULL THEN
     ls_OperatorId := ps_OperatorName;
  END IF;

    SELECT NVL(MAX(TO_NUMBER(Extension_En)),0)
      INTO ln_Max_Ext
      FROM Certificate
     WHERE  UPPER(CertificateNumber) = UPPER(Ps_CertificateNumber)
       AND CertificationTypeId = pn_CertificationTypeId;


    UPDATE Certificate
       SET MostRecentCert = (CASE WHEN Extension_En = ln_Max_Ext THEN 'Y' ELSE 'N' END),
           ModifiedBy     = ls_OperatorId,
           ModifiedOn     = SYSDATE
     WHERE  UPPER(CertificateNumber) = UPPER(Ps_CertificateNumber)
       AND CertificationTypeId = pn_CertificationTypeId ;

EXCEPTION

    WHEN OTHERS THEN
       ls_ErrorMsg:=  SQLERRM || '- SetMostRecentCert. An error have ocurred.(when others)';

       --Insert record into exception table
       APP_MESSAGE_OPERATIONS.App_Message_Insert(AS_MACHINEID     => NULL,
                                                 AD_OPERATORID    => ls_OperatorId,
                                                 AD_DATERECORDED  => SYSDATE,
                                                 AS_PROCESSNAME   => 'ICS_MAINTENANCE.SetMostRecentCert',
                                                 AX_RECORDDATA    => 'An error have ocurred.(when others)',
                                                 AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                                 AS_MESSAGE       => ls_ErrorMsg);

       Raise_Application_Error (-20007,ls_ErrorMsg);

END SetMostRecentCert;

PROCEDURE GetCertificateMatlCount ( pn_CertificationTypeId   IN  Certificate.CertificationTypeId%TYPE,
                                    ps_CertificateNumber     IN  Certificate.CertificateNumber%TYPE,
                                    ps_Extension_En          IN  Certificate.Extension_En%TYPE,
                                    pn_Matl_Cnt              OUT NUMBER)
AS

/******************************************************************************
   NAME:       GetCertificateMatlCount
   PURPOSE:    Returns material count for given Certificate number and certificate type

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        02/28/2013  Krishna          Initial Version
******************************************************************************/

Ex_CertificateNotExist EXCEPTION;
ln_CertificateExist VARCHAR2(1);
ls_ErrorMsg VARCHAR2(4000);
ls_Extension_En Certificate.Extension_En%TYPE;

BEGIN
   --Checks given certificate exist or not
   ln_CertificateExist := ICS_MAINTENANCE.CheckIfCertificateExists (pn_CertificationTypeId,
                                                                    ps_CertificateNumber,
                                                                    ps_Extension_En);

       IF UPPER(ln_CertificateExist) = 'Y' THEN

                  IF (pn_CertificationTypeId = 1 OR
                      pn_CertificationTypeId = 6) THEN

                            IF ps_Extension_En IS NULL THEN
                              -- Get the Extension number
                              ls_Extension_En := ICS_MAINTENANCE.GetCertificateExtNumber(pn_CertificationTypeId,
                                                                                         ps_CertificateNumber);
                            ELSE
                              ls_Extension_En := ps_Extension_En;
                            END IF;

                          -- Pull Material count for given certificate
                            SELECT COUNT(DISTINCT p.Matl_Num)
                              INTO pn_Matl_Cnt
                              FROM Certificate c,
                                   Product p,
                                   ProductCertificate pc
                             WHERE c.CertificateId = pc.CertificateId
                               AND Pc.SkuId = P.SkuId
                               AND UPPER(C.CertificateNumber) = UPPER(ps_CertificateNumber)
                               AND C.CertificationTypeId = pn_CertificationTypeId
                               AND C.Extension_En = ls_Extension_En;

                     ELSE
                              -- Pull Material count for given certificate
                                SELECT COUNT(DISTINCT p.Matl_Num)
                                  INTO pn_Matl_Cnt
                                  FROM Certificate c,
                                       Product p,
                                       ProductCertificate pc
                                 WHERE c.CertificateId = pc.CertificateId
                                   AND Pc.SkuId = P.SkuId
                                   AND UPPER(C.CertificateNumber) = UPPER(ps_CertificateNumber)
                                   AND C.CertificationTypeId = pn_CertificationTypeId ;
                      END IF;

       ELSE
             -- Raise an exception when certificate not found
             RAISE Ex_CertificateNotExist;

       END IF;


EXCEPTION
  WHEN Ex_CertificateNotExist THEN
      ls_ErrorMsg:=  SQLERRM || '- GetCertificateMatlCount. Certificate Number - '||ps_CertificateNumber||' not exist.';

      RAISE_APPLICATION_ERROR (-20001,ls_ErrorMsg);

    WHEN OTHERS THEN
       ls_ErrorMsg:=  SQLERRM || '- GetCertificateMatlCount. An error have ocurred.(when others)';

       --Insert record into exception table
       APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(AS_MACHINEID     => NULL,
                                                 AD_OPERATORID    => 'ICSDEV',
                                                 AD_DATERECORDED  => SYSDATE,
                                                 AS_PROCESSNAME   => 'ICS_MAINTENANCE.GetCertificateMatlCount',
                                                 AX_RECORDDATA    => 'An error have ocurred.(when others)',
                                                 AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                                 AS_MESSAGE       => ls_ErrorMsg);

              RAISE_APPLICATION_ERROR (-20007,ls_ErrorMsg);


END GetCertificateMatlCount;


Procedure RenameCertificate ( pn_CertificationTypeId  IN Certificate.CertificationTypeId%TYPE,
                              ps_OldCertificateNumber IN Certificate.CertificateNumber%TYPE,
                              ps_OldExtension_En      IN Certificate.Extension_En%TYPE,
                              ps_NewCertificateNumber IN Certificate.CertificateNumber%TYPE,
                              ps_NewExtension_En      IN Certificate.Extension_En%TYPE,
                              ps_OperatorName         IN VARCHAR2)
AS
/******************************************************************************
   NAME:       RenameCertificate
   PURPOSE:    Rename Old Certificate Number to New certificate number

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        02/28/2013  Krishna          Initial Version
******************************************************************************/

ex_CertificateIfExist EXCEPTION;
ls_OperatorId VARCHAR2(50) := 'ICSDEV';
ls_ErrorMsg VARCHAR2(4000);
ln_NewCertificateExist VARCHAR2(1);
ln_OldCertificateExist VARCHAR2(1);
ls_OldExtension_En Certificate.Extension_En%TYPE;
ls_NewExtension_En Certificate.Extension_En%TYPE;

BEGIN

  IF ps_OperatorName IS NOT NULL THEN
     ls_OperatorId := ps_OperatorName;
  END IF;

  -- Check old certificate number exist ot not
  ln_OldCertificateExist := ICS_MAINTENANCE.CheckIfcertificateExists (pn_CertificationTypeId,
                                                                      ps_OldCertificateNumber,
                                                                      ps_OldExtension_En);
  -- Check New certificate number exist ot not
  ln_NewCertificateExist := ICS_MAINTENANCE.CheckIfcertificateExists (pn_CertificationTypeId,
                                                                      ps_NewCertificateNumber,
                                                                      ps_NewExtension_En);

       IF UPPER(ln_OldCertificateExist) ='Y' AND
          UPPER(ln_NewCertificateExist) = 'N' THEN

                  IF (pn_CertificationTypeId = 1 OR
                      pn_CertificationTypeId = 6) THEN

                            IF ps_OldExtension_En IS NULL THEN
                                 -- Get extension number for old certificate
                                 ls_OldExtension_En := ICS_MAINTENANCE.GetCertificateExtNumber(pn_CertificationTypeId,
                                                                                               ps_OldCertificateNumber);
                            ELSE
                                 ls_OldExtension_En := ps_OldExtension_En;
                            END IF;

                            IF ps_NewExtension_En IS NULL THEN
                                 -- Get extension number for new certificate
                                 ls_NewExtension_En := ICS_MAINTENANCE.GetCertificateExtNumber(pn_CertificationTypeId,
                                                                                               ps_NewCertificateNumber);
                            ELSE
                                ls_NewExtension_En := Ps_NewExtension_En;
                            End If;

                          -- Update old certificate number to new certificate number with extension
                          UPDATE Certificate
                             SET CertificateNumber = Ps_NewCertificateNumber,
                                 Extension_en      = ls_NewExtension_En,
                                 ModifiedBy        = ls_OperatorId,
                                 ModifiedOn        = SYSDATE
                           WHERE UPPER(CertificateNumber) = UPPER(ps_OldCertificateNumber)
                             AND Certificationtypeid =pn_CertificationTypeId
                             AND Extension_En = ls_OldExtension_En ;

                    ELSE
                          -- Update old certificate number to new certificate number without extension
                          UPDATE Certificate
                             SET CertificateNumber = Ps_NewCertificateNumber,
                                 ModifiedBy        = ls_OperatorId,
                                 ModifiedOn        = SYSDATE
                           WHERE UPPER(CertificateNumber) = UPPER(ps_OldCertificateNumber)
                             AND Certificationtypeid =pn_CertificationTypeId;
                    END IF;

                    -- Update the MostRecentCert column in Certificate table
                    ICS_MAINTENANCE.SetMostRecentCert(pn_CertificationTypeId,
                                                      Ps_NewCertificateNumber,
                                                      ls_OperatorId);

                   -- Update the MostRecentCert column in  Certificate table for old certificate in case we deleted a higher extension and there
                   -- are still lower ones -- jeseitz 3/15/13
                    ICS_MAINTENANCE.SetMostRecentCert(pn_CertificationTypeId,
                                                     ps_OldCertificateNumber,
                                                      ls_OperatorId);
           ELSE
                RAISE  ex_CertificateIfExist;

           END IF;
    COMMIT;
EXCEPTION

WHEN ex_CertificateIfExist THEN
  --Insert into excpetion record
     ls_errormsg:=  sqlerrm || '- RenameCertificate. New Certificate Number - '||Ps_NewCertificateNumber||' exist.'
                            ||' OR Old Certificate Number - '||ps_OldCertificateNumber||' not exist'      ;

     --Insert record into exception table
     APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(AS_MACHINEID     => NULL,
                                               AD_OPERATORID    => ls_operatorId,
                                               AD_DATERECORDED  => SYSDATE,
                                               AS_PROCESSNAME   => 'ICS_MAINTENANCE.RenameCertificate',
                                               AX_RECORDDATA    => 'pn_CertificationTypeId - '||pn_CertificationTypeId||',ps_OldCertificateNumber - '||ps_OldCertificateNumber
                                                                    ||', Ps_NewCertificateNumber - '||Ps_NewCertificateNumber||',Ps_NewExtension_En - '||Ps_NewExtension_En
                                                                    ||',ps_OldExtension_En - '||ps_OldExtension_En,
                                               AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                               AS_MESSAGE       => ls_ErrorMsg);

      RAISE_APPLICATION_ERROR (-20001,ls_ErrorMsg);

    WHEN OTHERS THEN
       ls_ErrorMsg:=  SQLERRM || '- RenameCertificate. An error have ocurred.(when others)';

       --Insert record into exception table
       APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(AS_MACHINEID     => NULL,
                                                 AD_OPERATORID    => ls_operatorId,
                                                 AD_DATERECORDED  => SYSDATE,
                                                 AS_PROCESSNAME   => 'ICS_MAINTENANCE.RenameCertificate',
                                                 AX_RECORDDATA    => 'An error have ocurred.(when others)',
                                                 AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                                 AS_MESSAGE       => ls_ErrorMsg);

       RAISE_APPLICATION_ERROR (-20007,ls_ErrorMsg);

END Renamecertificate;

PROCEDURE DeleteProductCountry (pn_SkuId                 IN  ProductCertificate.SkuId%TYPE,
                                pn_CertificationTypeId   IN  Certificate.CertificationTypeId%TYPE,
                                ps_OperatorName          IN  VARCHAR2)
AS
/******************************************************************************
   NAME:       DeleteProductCountry
   PURPOSE:    Delete records from productreqeust table for given skuid and certification type

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        02/28/2013  Krishna          Initial Version
                06/20/2016 jeseitz            changed to use productrequest table
******************************************************************************/
 CURSOR lcr_Certs IS
        SELECT cer.CertificateId,
              ( CASE
                  ---jeseitz 7/27/12 -- fixed case statement -- nom does not get date approved, only date submitted.
                  WHEN pce.SkuId  IS NOT NULL
                       AND  (pce.DateApproved_Cegi IS NOT NULL
                        OR cer.CertDateApproved  IS NOT NULL)
                  THEN 'A'
                  WHEN pce.SkuId IS NOT NULL
                        AND ((pce.DateSubmitted IS NOT NULL
                              OR cer.CertDateSubmitted IS NOT NULL)
                        AND pce.CertificationTypeId = 3)
                  THEN 'A'
                  WHEN pce.SkuId IS NOT NULL
                       AND (pce.DateSubmitted IS NOT NULL
                            OR  cer.CertDateSubmitted  IS NOT NULL)
                  THEN 'I'
                  ---WHEN pce.SkuId  is not null  AND (pce.DateApproved_Cegi is null or pce.DateSubmitted is null)   THEN 'I'
                  ---WHEN pce.SkuId  is not null  AND  (pce.DateApproved_Cegi is not null or pce.DateSubmitted is not null) THEN 'A'
                  ELSE 'R'
                  END ) AS State
          FROM Certificate cer,
                ProductCertificate pce
          WHERE pce.CertificationTypeId = Pn_Certificationtypeid
            AND pce.SkuId=pn_SkuId
            AND pce.CertificationTypeId = cer.CertificationTypeId
            AND pce.CertificateId = cer.CertificateId
            AND NVL(UPPER(cer.ActiveStatus),'N') = 'Y'
        ORDER BY State;

 ln_Cnt NUMBER;
 --ls_RequestStatus ProductCountry.RequestStatus%TYPE;
  ls_RequestStatus ProductRequest.RequestStatus%TYPE;

BEGIN

--  DELETE  FROM ProductCountry
--         WHERE SkuId = pn_SkuId
--           AND CertificationTypeId = Pn_Certificationtypeid;
    DELETE  FROM ProductRequest
         WHERE SkuId = pn_SkuId
           AND CertificationTypeId = Pn_Certificationtypeid;
  ---now check if that material is on other certificates of the same type.
  ---keep a count of records in cursor - we just need to know if there are any.
  ln_Cnt := 0;
  FOR lcr_CertsRec IN lcr_Certs LOOP
          -- Since request status (state) is ordered
          -- Then the following will provide best result
          -- ls_RequestStatus := lcr_CertsRec.state;
          IF lcr_CertsRec.State = 'A' THEN
                  ls_RequestStatus := 'A';
                  ln_Cnt := ln_Cnt + 1;
                  EXIT;
          END IF;
          IF lcr_CertsRec.State =  'I' THEN
                  ls_RequestStatus := 'I';
                  ln_Cnt := ln_Cnt + 1;
                  EXIT;
           END IF;

  END LOOP;
  IF ln_Cnt > 0 THEN
     -- Insert records into ProductCountry table
--     INSERT INTO  ProductCountry (SkuId,
--                                  CountryId,
--                                  CertificationTypeId,
--                                  RequestStatus,
--                                  CreatedBy,
--                                  CreatedOn,
--                                  ModifiedBy,
--                                  ModifiedOn)
--                    ( SELECT pn_SkuId,
--                             co.CountryId,
--                             ce.CertificationTypeId,
--                             ls_RequestStatus,
--                             ps_OperatorName,
--                             SYSDATE,
--                             ps_OperatorName,
--                             SYSDATE
--                        FROM Country co ,
--                             CertificationType ce
--                       WHERE co.CertificationTypeId = ce.CertificationTypeId
--                         AND ce.CertificationTypeId=pn_Certificationtypeid);
 INSERT INTO  ProductRequest (CertificationTypeId,SkuId, RequestStatus, 
                                  CreatedBy, CreatedOn, ModifiedBy, ModifiedOn)
                   values(pn_Certificationtypeid, pn_SkuId,  ls_RequestStatus,
                       ps_OperatorName,  SYSDATE, ps_OperatorName,
                             SYSDATE);
  
  END IF;

END DeleteProductCountry;


PROCEDURE DeleteCertReferences (pn_CertificationTypeId   IN  Certificate.CertificationTypeId%type,
                                pn_CertificateId         IN  Certificate.CertificateId%type,
                                ps_Table_Name            IN VARCHAR2,
                                ps_OperatorName          IN  VARCHAR2)
AS
/******************************************************************************
   NAME:       DeleteCertReferences
   PURPOSE:    Delete records from HDR or Details or Certificate or ProductCertificate tables
               based on table name, certificate id and type

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        02/28/2013  Krishna          Initial Version
******************************************************************************/
ls_Sql VARCHAR2(2000);
ls_HdrColName VARCHAR2(30);
ln_HdrColValue NUMBER;
ls_DtlTableName VARCHAR2(30);
ls_ErrorMsg VARCHAR2(4000);
ln_Count NUMBER := 0;

CURSOR lcr_SkuId IS
  SELECT SkuId
    FROM ProductCertificate
   WHERE CertificationTypeId =pn_CertificationTypeId
     AND CertificateId = pn_CertificateId;

BEGIN

 IF UPPER(ps_Table_Name) <> 'CERTIFICATE' AND
    UPPER(ps_Table_Name) <> 'PRODUCTCERTIFICATE' THEN

      IF UPPER(ps_Table_Name) = 'ENDURANCEHDR' THEN
         ls_HdrColName := 'ENDURANCEID';
         ls_DtlTableName := 'ENDURANCEDTL';
      ELSIF UPPER(ps_Table_Name) = 'MEASUREHDR' THEN
         ls_HdrColName := 'MEASUREID';
         ls_DtlTableName := 'MEASUREDTL';
      ELSIF UPPER(ps_Table_Name) = 'PLUNGERHDR' THEN
         ls_HdrColName := 'PLUNGERID';
         ls_DtlTableName := 'PLUNGERDTL';
      ELSIF UPPER(ps_Table_Name) = 'SOUNDHDR' THEN
         ls_HdrColName := 'SOUNDID';
         ls_DtlTableName := 'SOUNDDETAIL';
      ELSIF UPPER(ps_Table_Name) = 'TREADWEARHDR' THEN
         ls_HdrColName := 'TREADWEARID';
         ls_DtlTableName := 'TREADWEARDTL';
      ELSIF UPPER(ps_Table_Name) = 'WETGRIPHDR' THEN
         ls_HdrColName := 'WETGRIPID';
         ls_DtlTableName := 'WETGRIPHDR';
      ELSIF UPPER(ps_Table_Name) = 'HIGHSPEEDHDR' THEN
         ls_HdrColName := 'HIGHSPEEDID';
         ls_DtlTableName := 'HIGHSPEEDDTL';
      ELSIF UPPER(ps_Table_Name) = 'BEADUNSEATHDR' THEN
         ls_HdrColName := 'BEADUNSEATID';
         ls_DtlTableName := 'BEADUNSEATDTL';
      END IF;

      ls_Sql := '  SELECT '||ls_HdrColName||
               '    FROM '||ps_Table_Name||
               '   WHERE CertificationTypeId = '||pn_CertificationTypeId||
               '     AND CertificateId = '||pn_CertificateId;

       BEGIN
           EXECUTE IMMEDIATE ls_Sql INTO  ln_HdrColValue;
       EXCEPTION
           WHEN NO_DATA_FOUND THEN
               ln_HdrColValue := NULL;
       END;

        IF ln_HdrColValue IS NOT NULL THEN

             ls_Sql := '  DELETE FROM '||ls_DtlTableName||
                       '        WHERE '||ls_HdrColName||' = '||ln_HdrColValue;

             EXECUTE IMMEDIATE ls_Sql;

             ls_Sql := '  DELETE FROM '||ps_Table_Name||
                       '        WHERE '||ls_HdrColName||' = '||ln_HdrColValue;
            EXECUTE IMMEDIATE ls_Sql;

        END IF;

ELSE

   IF UPPER(ps_Table_Name) = 'PRODUCTCERTIFICATE' THEN

          FOR lcr_SkuIdRec IN lcr_SkuId LOOP
              BEGIN
                   ICS_MAINTENANCE.DeleteProductCountry (lcr_SkuIdRec.SkuId,pn_CertificationTypeId,ps_OperatorName); --deletes from productrequest
                   EXCEPTION
                  WHEN OTHERS THEN
                     ls_ErrorMsg:=  SQLERRM || '- DeleteCertReferences. An error have ocurred.(when others)';

                     --Insert record into exception table
                     APP_MESSAGE_OPERATIONS.App_Message_Insert(as_MachineId     => NULL,
                                                               ad_OperatorId    => ps_OperatorName,
                                                               ad_DateRecorded  => SYSDATE,
                                                               as_ProcessName   => 'ICS_MAINTENANCE.DeleteCertReferences',
                                                               ax_RecordData    => 'An error have ocurred.(when others)'||', SkuId - '||
                                                                                    lcr_SkuIdRec.SkuId||',CertificationTypeId'||pn_CertificationTypeId,
                                                               as_MessageCode   => TO_CHAR(SQLCODE),
                                                               as_Message       => ls_ErrorMsg);

                     --Raise_Application_Error (-20007,ls_ErrorMsg);

                      ln_Count := ln_Count + 1 ;
              END;
              if  pn_CertificationTypeId = 4 then -- Imark certificate -- jeseitz 4/14/2016
              BEGIN
                   ICS_MAINTENANCE.DeleteProductImarkFamily (lcr_SkuIdRec.SkuId,pn_CertificateId);
              EXCEPTION
                  WHEN OTHERS THEN
                     ls_ErrorMsg:=  SQLERRM || '- DeleteCertReferences. An error has ocurred.(when others)';

                     --Insert record into exception table
                     APP_MESSAGE_OPERATIONS.App_Message_Insert(as_MachineId     => NULL,
                                                               ad_OperatorId    => ps_OperatorName,
                                                               ad_DateRecorded  => SYSDATE,
                                                               as_ProcessName   => 'ICS_MAINTENANCE.DeleteCertReferences',
                                                               ax_RecordData    => 'An error have ocurred.(when others) DeleteProductImarkFamily'||', SkuId = '||
                                                                                    lcr_SkuIdRec.SkuId||', CertificateId='||pn_CertificateId,
                                                               as_MessageCode   => TO_CHAR(SQLCODE),
                                                               as_Message       => ls_ErrorMsg);

                     --Raise_Application_Error (-20007,ls_ErrorMsg);

                      ln_Count := ln_Count + 1 ;
              END;
            end if;
              
              

          END LOOP;

      IF ln_Count > 0 THEN
         RAISE_APPLICATION_ERROR (-20001,'There is an exception while executing sub procedures - Ics_Maintenance.Deleteproductcountry or DeleteProductImarkFamily');
      END IF;

   END IF;
    ls_Sql := ' DELETE FROM '|| ps_Table_Name ||
              ' WHERE CertificateId = '||  pn_CertificateId;

     EXECUTE IMMEDIATE ls_Sql;


END IF;

END DeleteCertReferences;


PROCEDURE DeleteCertificate (pn_CertificationTypeId   IN  Certificate.CertificationTypeId%TYPE,
                             ps_CertificateNumber     In  Certificate.CertificateNumber%Type,
                             ps_Extension_En          IN  Certificate.Extension_En%TYPE,
                             ps_OperatorName          IN  VARCHAR2)
/******************************************************************************
   NAME:       DeleteCertificate
   PURPOSE:    Delete records from Certificate table

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        02/28/2013  Krishna          Initial Version
******************************************************************************/
AS

ex_CertificateNotExist EXCEPTION;
ls_OperatorId VARCHAR2(50) := 'ICSDEV';
ls_CertificateId Certificate.CertificateId%TYPE;
ls_ErrorMsg VARCHAR2(4000);
ls_Extension_En Certificate.Extension_En%TYPE;
ln_CertificateExist VARCHAR2(1);

BEGIN

     IF ps_OperatorName IS NOT NULL THEN
        ls_OperatorId := ps_OperatorName;
     END IF;

   -- Checks whether certificate exist or not
   ln_CertificateExist := ICS_MAINTENANCE.CheckifCertificateExists (pn_CertificationTypeId,
                                                                    ps_CertificateNumber,
                                                                    ps_Extension_En);
   IF UPPER(ln_CertificateExist) = 'Y' THEN

        IF (pn_CertificationTypeId = 1 OR
           pn_CertificationTypeId = 6) THEN

              IF ps_Extension_En IS NULL THEN

                  ls_Extension_En := ICS_MAINTENANCE.GetcertificateExtNumber(pn_CertificationTypeId,
                                                                             ps_CertificateNumber);
              ELSE
                  ls_Extension_En :=   ps_Extension_En ;
              END IF;
              -- Get the certificate Id
              SELECT CertificateId
                INTO ls_CertificateId
                FROM Certificate
               WHERE UPPER(CertificateNumber) = UPPER(ps_CertificateNumber)
                 AND CertificationTypeId = pn_CertificationTypeId
                 AND Extension_En =  ls_Extension_En;

         ELSE

              ls_Extension_En :=   NULL;
              -- Get the certificate Id
              SELECT CertificateId
                INTO ls_CertificateId
                FROM Certificate
               WHERE UPPER(CertificateNumber) = UPPER(ps_CertificateNumber)
                 AND CertificationTypeId = pn_CertificationTypeId;

         END IF;

           -- Deleting Header and detail Records
           ICS_MAINTENANCE.DeleteCertReferences (pn_CertificationTypeId,ls_CertificateId,'ENDURANCEHDR',ls_OperatorId);
           ICS_MAINTENANCE.DeleteCertReferences (pn_CertificationTypeId,ls_CertificateId,'MEASUREHDR',ls_OperatorId);
           ICS_MAINTENANCE.DeleteCertReferences (pn_CertificationTypeId,ls_CertificateId,'PLUNGERHDR',ls_OperatorId);
           ICS_MAINTENANCE.DeleteCertReferences (pn_CertificationTypeId,ls_CertificateId,'SOUNDHDR',ls_OperatorId);
           ICS_MAINTENANCE.DeleteCertReferences (pn_CertificationTypeId,ls_CertificateId,'TREADWEARHDR',ls_OperatorId);
           ICS_MAINTENANCE.DeleteCertReferences (pn_CertificationTypeId,ls_CertificateId,'WETGRIPHDR',ls_OperatorId);
           ICS_MAINTENANCE.DeleteCertReferences (pn_CertificationTypeId,ls_CertificateId,'HIGHSPEEDHDR',ls_OperatorId);
           ICS_MAINTENANCE.DeleteCertReferences (pn_CertificationTypeId,ls_CertificateId,'BEADUNSEATHDR',ls_OperatorId);
           -- Deleting ProductCertificate and Certificate Records
           ICS_MAINTENANCE.DeleteCertReferences (pn_CertificationTypeId,ls_CertificateId,'PRODUCTCERTIFICATE',ls_OperatorId);
           ICS_MAINTENANCE.DeleteCertReferences (pn_CertificationTypeId,ls_CertificateId,'CERTIFICATE',ls_OperatorId);

            -- Update the MostRecentCert column in Certificate table
            ICS_MAINTENANCE.SetMostRecentCert(pn_CertificationTypeId,
                                              ps_CertificateNumber,
                                              ls_OperatorId);

       COMMIT;

   ELSE
        RAISE ex_CertificateNotExist;
   END IF;

EXCEPTION

    WHEN ex_CertificateNotExist THEN
       ls_ErrorMsg:=  SQLERRM || '- DeleteCertificate. Certificate - '||ps_CertificateNumber||' Not Found';

       --Insert record into exception table
       APP_MESSAGE_OPERATIONS.App_Message_Insert(AS_MACHINEID     => NULL,
                                                 AD_OPERATORID    => ls_OperatorId,
                                                 AD_DATERECORDED  => SYSDATE,
                                                 AS_PROCESSNAME   => 'ICS_MAINTENANCE.DeleteCertificate',
                                                 AX_RECORDDATA    => 'ps_CertificateNumber - '||ps_CertificateNumber||',pn_CertificationTypeId - '
                                                                      ||pn_CertificationTypeId||',ps_Extension_En -'||ps_Extension_En ,
                                                 AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                                 AS_MESSAGE       => ls_ErrorMsg);

       RAISE_APPLICATION_ERROR (-20001,ls_ErrorMsg);



    WHEN OTHERS THEN
       ls_ErrorMsg:=  SQLERRM || '- DeleteCertificate. An error have ocurred.(when others)';

       --Insert record into exception table
       APP_MESSAGE_OPERATIONS.App_Message_Insert(AS_MACHINEID     => NULL,
                                                 AD_OPERATORID    => ls_OperatorId,
                                                 AD_DATERECORDED  => SYSDATE,
                                                 AS_PROCESSNAME   => 'ICS_MAINTENANCE.DeleteCertificate',
                                                 AX_RECORDDATA    => 'An error have ocurred.(when others)',
                                                 AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                                 AS_MESSAGE       => ls_ErrorMsg);

       Raise_Application_Error (-20007,ls_ErrorMsg);


END DeleteCertificate;


PROCEDURE GetCertificateMatls ( pn_CertificationTypeId   IN  Certificate.CertificationTypeId%TYPE,
                                ps_CertificateNumber     IN  Certificate.CertificateNumber%TYPE,
                                ps_Extension_En          IN  Certificate.Extension_En%TYPE,
                                pc_Cursor                OUT SYS_REFCURSOR)
AS

/******************************************************************************
   NAME:       GetCertificateMatls
   PURPOSE:    Returns material for given Certificate number and certificate type

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        02/28/2013  Krishna          Initial Version
******************************************************************************/

ex_CertificateNotExist EXCEPTION;

ln_CertificateExist VARCHAR2(1);
ls_ErrorMsg VARCHAR2(4000);
ln_CertificateId NUMBER;
ls_Extension_En Certificate.Extension_En%TYPE;

BEGIN
   -- Checks whether certificate exist or not
   ln_CertificateExist := ICS_MAINTENANCE.CheckIfCertificateExists (pn_CertificationTypeId,
                                                                    ps_CertificateNumber,
                                                                    ps_Extension_En);

       IF UPPER(ln_CertificateExist) = 'Y' THEN

                  IF (pn_CertificationTypeId = 1 OR
                      pn_CertificationTypeId = 6) THEN

                            IF ps_Extension_En IS NULL THEN
                                -- Get the extension for certificate
                                ls_Extension_En := ICS_MAINTENANCE.GetCertificateExtNumber(pn_CertificationTypeId,
                                                                                           ps_CertificateNumber);
                            ELSE
                                ls_Extension_En := ps_Extension_En;
                            END IF;

                           -- Get the Certificate id
                           ICS_COMMON_FUNCTIONS.GetCertificateIdByNumber(ps_CertificateNumber,
                                                                         pn_CertificationTypeId,
                                                                         ls_Extension_En,
                                                                         ln_CertificateId);

                           -- Returns material for the certificate
                           OPEN pc_Cursor  FOR
                                SELECT t.CertificationTypeName,
                                       c.CertificateNumber,
                                       c.CertificateId,
                                       c.Extension_En,
                                       LTRIM( p.Matl_Num, '0') AS Matl_Num,   -- jeseitz added ltrim 3/14/13
                                       p.SpeedRating,
                                       p.SkuId
                                FROM Certificate c,
                                     CertificationType t,
                                     Product p,
                                     ProductCertificate pc
                                WHERE c.CertificateId = Pc.CertificateId
                                  AND p.SkuId = pc.SkuId
                                  AND t.CertificationTypeId = c.CertificationTypeId
                                  AND c.CertificateId = ln_CertificateId
                                  AND c.Extension_En = ls_Extension_En
                             ORDER BY Matl_Num;

                     ELSE
                          -- Get the Certificate Id
                          ln_CertificateId := ICS_COMMON_FUNCTIONS.GetCertificateID(ps_CertificateNumber,
                                                                                    pn_CertificationTypeId);
                          -- Returns material for the certificate
                          OPEN pc_Cursor  FOR
                            SELECT t.CertificationTypeName,
                                   c.CertificateNumber,
                                   c.CertificateId,
                                   c.Extension_En,
                                   LTRIM(p.Matl_Num,'0') AS Matl_Num,     -- jeseitz added ltrim 3/14/13
                                   p.SpeedRating,
                                   p.SkuId
                            FROM Certificate c,
                                 CertificationType t,
                                 Product p,
                                 ProductCertificate pc
                            WHERE c.Certificateid = Pc.CertificateId
                              AND p.Skuid = Pc.SkuId
                              AND t.Certificationtypeid = c.CertificationTypeId
                              AND c.Certificateid = ln_CertificateId
                         ORDER BY Matl_Num;
                      END IF;
       ELSE
             -- Raise an exception when certificate not found
             RAISE ex_CertificateNotExist;

       END IF;


EXCEPTION
  WHEN ex_CertificateNotExist THEN
     ls_ErrorMsg:=  SQLERRM || '- GetCertificateMatls. Certificate NUMBER - '||ps_CertificateNumber||' not exist.';

     --Insert record into exception table
     APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(AS_MACHINEID     => NULL,
                                               AD_OPERATORID    => 'ICSDEV',
                                               AD_DATERECORDED  => SYSDATE,
                                               AS_PROCESSNAME   => 'ICS_MAINTENANCE.GetCertificateMatls',
                                               AX_RECORDDATA    => 'pn_CertificationTypeId - '||pn_CertificationTypeId||',ps_CertificateNumber - '||
                                                                    ps_CertificateNumber||',ps_Extension_En - '||ps_Extension_En,
                                               AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                               AS_MESSAGE       => ls_ErrorMsg);

            RAISE_APPLICATION_ERROR (-20001,ls_ErrorMsg);

    WHEN OTHERS THEN
       ls_ErrorMsg:=  SQLERRM || '- GetCertificateMatls. An error have ocurred.(when others)';

       --Insert record into exception table
       APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(AS_MACHINEID     => NULL,
                                                 AD_OPERATORID    => 'ICSDEV',
                                                 AD_DATERECORDED  => SYSDATE,
                                                 AS_PROCESSNAME   => 'ICS_MAINTENANCE.GetCertificateMatls',
                                                 AX_RECORDDATA    => 'An error have ocurred.(when others)',
                                                 AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                                 AS_MESSAGE       => ls_ErrorMsg);

              RAISE_APPLICATION_ERROR (-20007,ls_ErrorMsg);

END GetCertificateMatls;

PROCEDURE DetachCertificate (pn_SkuId          IN  Product.SkuId%TYPE,
                             pn_CertificateId  IN  Certificate.CertificateId%TYPE)
AS
/******************************************************************************
   NAME:       DetachCertificate
   PURPOSE:    Detach materials from certificate

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        02/28/2013  Krishna          Initial Version
   1.1       04/08/2014   JESEITZ        added call to delete product country records if detaching from certificate.
   1.2       04/14/16      JESEITZ         added call to delete product imark family records if detaching from certificate
******************************************************************************/
ex_CertificateNotFound EXCEPTION;

ln_CertificationTypeID  NUMBER;
ln_Cnt NUMBER;
ls_ErrorMsg VARCHAR2(4000);

BEGIN

  SELECT COUNT(*)
    INTO ln_Cnt
    FROM ProductCertificate
   WHERE SkuId = pn_SkuId
     AND CertificateId = pn_CertificateId ;

   IF   ln_Cnt > 0 THEN
      select certificationtypeid INTO ln_CertificationTypeID from ProductCertificate  -- JESEITZ added 4/7/2014
            WHERE Skuid = pn_SkuId
              AND Certificateid = pn_CertificateId;
              
       --jeseitz added 4/14/2016 to clear out productimarkfamily records.
       IF  ln_CertificationTypeID = 4 THEN
             ICS_MAINTENANCE.DeleteProductImarkFamily(pn_skuid,pn_CertificateId);
       end if;       
      commit;
      DELETE FROM ProductCertificate
            WHERE Skuid = pn_SkuId
              AND Certificateid = pn_CertificateId;

      COMMIT;
      --jeseitz added 4/7/14 to clear out productrequestrecords.
       ICS_MAINTENANCE.DeleteProductCountry (pn_SkuId,ln_CertificationTypeID,'ICSDEV');
     
   ELSE
       RAISE Ex_Certificatenotfound;
   END IF;


EXCEPTION

  WHEN Ex_CertificateNotFound THEN
     ls_ErrorMsg:=  SQLERRM || '- DetachCertificate. Skuid - '||pn_SkuId||',Certificateid - '|| pn_CertificateId||' not exist.';

     --Insert record into exception table
     APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(AS_MACHINEID     => NULL,
                                               AD_OPERATORID    => 'ICSDEV',
                                               AD_DATERECORDED  => SYSDATE,
                                               As_Processname   => 'ICS_MAINTENANCE.Detachcertificate',
                                               AX_RECORDDATA    => 'pn_SkuId - '||pn_SkuId||',pn_CertificateId - '|| pn_CertificateId,
                                               AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                               AS_MESSAGE       => ls_ErrorMsg);

            RAISE_APPLICATION_ERROR (-20001,ls_ErrorMsg);

    WHEN OTHERS THEN
       ls_ErrorMsg:=  SQLERRM || '- Detachcertificate. An error have ocurred.(when others)';

       --Insert record into exception table
       APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(AS_MACHINEID     => NULL,
                                                 AD_OPERATORID    => 'ICSDEV',
                                                 AD_DATERECORDED  => SYSDATE,
                                                 AS_PROCESSNAME   => 'ICS_MAINTENANCE.Detachcertificate',
                                                 AX_RECORDDATA    => 'An error have ocurred.(when others)',
                                                 AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                                 AS_MESSAGE       => ls_ErrorMsg);

              RAISE_APPLICATION_ERROR (-20007,ls_ErrorMsg);


END DetachCertificate;

PROCEDURE MoveCertificate ( pn_CertificationTypeId   IN Certificate.CertificationTypeId%TYPE,
                            ps_NewCertificateNumber  IN Certificate.CertificateNumber%TYPE,
                            ps_NewExtension_En       IN Certificate.Extension_En%TYPE,
                            pn_SkuId                 IN Product.Skuid%TYPE,
                            pn_CertificateId         IN Certificate.CertificateId%TYPE,
                            ps_OperatorName          IN VARCHAR2)
Is
/******************************************************************************
   NAME:       MoveCertificate
   PURPOSE:    Move certificate to another certificate

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        02/28/2013  Krishna          Initial Version
******************************************************************************/
ex_CertificateNotExist EXCEPTION;
ls_OperatorId VARCHAR2(50) := 'ICSDEV';
ln_CertificateId NUMBER := 0;
ls_ErrorMsg VARCHAR2(4000);
ln_CertificateExist VARCHAR2(1);
ls_NewExtension_En Certificate.Extension_En%TYPE;

BEGIN

     IF ps_OperatorName IS NOT NULL THEN
        ls_OperatorId := ps_OperatorName;
     END IF;

  -- Checks whether given certificate exist or not
  ln_CertificateExist := ICS_MAINTENANCE.CheckIfCertificateExists (pn_CertificationTypeId,
                                                                   ps_NewCertificateNumber,
                                                                   ps_NewExtension_En);

       IF UPPER(ln_CertificateExist) = 'Y' THEN

              IF (pn_CertificationTypeId = 1 OR
                 pn_CertificationTypeId = 6) THEN

                    IF ps_NewExtension_En IS NULL THEN
                         -- Get the extension for given certificate
                         ls_NewExtension_En := ICS_MAINTENANCE.GetCertificateExtNumber(pn_CertificationTypeId,
                                                                                       ps_NewCertificateNumber);
                    ELSE
                      ls_NewExtension_En :=   ps_NewExtension_En ;
                    END IF;

                    -- Get the certificate id
                    SELECT CertificateId
                      INTO ln_CertificateId
                      FROM Certificate
                     WHERE UPPER(CertificateNumber) = UPPER(ps_NewCertificateNumber)
                       AND CertificationTypeId =pn_CertificationTypeId
                       AND Extension_En =  ls_NewExtension_En;


               ELSE
                    -- Get the certificate id
                    SELECT CertificateId
                      INTO ln_CertificateId
                      FROM Certificate
                     WHERE UPPER(CertificateNumber) = UPPER(ps_NewCertificateNumber)
                       AND CertificationTypeId =pn_CertificationTypeId;

              END IF;

               -- Update certificate id with new certificate id
                UPDATE ProductCertificate
                   SET CertificateId = ln_CertificateId,
                       ModifiedBy    = ls_OperatorId,
                       Modifiedon    = SYSDATE
                 WHERE Certificateid = pn_CertificateId
                   AND Skuid = pn_SkuId;
                   
                 IF  PN_CertificationTypeId  =  4 then
                      DeleteProductImarkFamily( pn_SkuId,ln_CertificateId);
                 end if;

                 COMMIT;
     ELSE
          RAISE  ex_CertificateNotExist;

     END IF;

EXCEPTION

WHEN ex_CertificateNotExist THEN
  --Insert into excpetion record
     ls_ErrorMsg:=  SQLERRM || '- MoveCertificate. Certificate Number - '||ps_NewCertificateNumber||' exist.';

     --Insert record into exception table
     APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(AS_MACHINEID     => NULL,
                                               AD_OPERATORID    => ls_OperatorId,
                                               AD_DATERECORDED  => SYSDATE,
                                               AS_PROCESSNAME   => 'ICS_MAINTENANCE.MoveCertificate',
                                               AX_RECORDDATA    => 'pn_CertificationTypeId - '||pn_CertificationTypeId
                                                                    ||', ps_NewCertificateNumber - '||ps_NewCertificateNumber||',pn_NewExtension_en - '||ps_NewExtension_En
                                                                    ||',pn_SkuId    - '||pn_SkuId ||',pn_CertificateId  - '||pn_CertificateId    ,
                                               AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                               AS_MESSAGE       => ls_ErrorMsg);

      RAISE_APPLICATION_ERROR (-20001,ls_ErrorMsg);

    WHEN OTHERS THEN
       ls_ErrorMsg:=  SQLERRM || '- Movecertificate. An error have ocurred.(when others)';

       --Insert record into exception table
       APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(AS_MACHINEID     => NULL,
                                                 AD_OPERATORID    => ls_OperatorId,
                                                 AD_DATERECORDED  => SYSDATE,
                                                 AS_PROCESSNAME   => 'ICS_MAINTENANCE.MoveCertificate',
                                                 AX_RECORDDATA    => 'An error have ocurred.(when others)',
                                                 AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                                 AS_MESSAGE       => ls_ErrorMsg);

       Raise_Application_Error (-20007,ls_ErrorMsg);

END MoveCertificate;

PROCEDURE GetDuplicateCert (ps_Matl_Num    IN  Product.Matl_Num%TYPE,
                            ps_SpeedRating IN  Product.SpeedRating%TYPE,
                            ps_Result      OUT SYS_REFCURSOR)
/******************************************************************************
   NAME:       GetDuplicateCert
   PURPOSE:    Returns Assigned certificate details for given Matl_Num and Speedratings.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        03/06/2013  Krishna          Initial Version
   1.1        01/07/2014  Guru Gangadhar   Removed Speed Rating
******************************************************************************/
AS
 ln_Exist_Count   NUMBER(4);
 ex_Record_Not_Exist EXCEPTION;
 ls_ErrorMsg VARCHAR2(4000);

BEGIN
  --Counts the materials in product
  IF(ps_SpeedRating IS NOT NULL) THEN
    SELECT COUNT(*)
      INTO ln_Exist_Count
      FROM Product
     WHERE matl_num = LPAD(ps_Matl_Num,18,0)
     AND SpeedRating = ps_SpeedRating;
  ELSE
    SELECT COUNT(*)
      INTO ln_Exist_Count
      FROM Product
     WHERE matl_num = LPAD(ps_Matl_Num,18,0);
  END IF;

  IF ln_Exist_Count < 1 THEN
    RAISE ex_Record_Not_Exist;
  ELSE
      IF(ps_SpeedRating IS NOT NULL) THEN
       -- Pull the duplicate materials
       OPEN ps_result FOR
         SELECT p.SkuId Id,
               LTRIM( p.Matl_Num,'0') as Matl_Num,  -- jeseitz added ltrim 3/14/13
                p.SpeedRating,
                t.CertificationTypeName ,
                c.CertificateNumber
           FROM Product p,
                Productcertificate pc,
                Certificate c,
                CertificationType t
          WHERE p.SkuId = pc.SkuId(+)
            AND c.CertificateId(+) = pc.CertificateId
            AND c.CertificationTypeId = t.CertificationTypeId(+)
            AND p.Matl_Num = LPAD(ps_Matl_Num,18,0)
            AND p.SpeedRating = ps_SpeedRating
       ORDER BY Id;
    ELSE
      OPEN ps_result FOR
         SELECT p.SkuId Id,
               LTRIM( p.Matl_Num,'0') as Matl_Num,  -- jeseitz added ltrim 3/14/13
                p.SpeedRating,
                t.CertificationTypeName ,
                c.CertificateNumber
           FROM Product p,
                Productcertificate pc,
                Certificate c,
                CertificationType t
          WHERE p.SkuId = pc.SkuId(+)
            AND c.CertificateId(+) = pc.CertificateId
            AND c.CertificationTypeId = t.CertificationTypeId(+)
            AND p.Matl_Num = LPAD(ps_Matl_Num,18,0)
            ORDER BY Id;
    END IF;
  END IF;
EXCEPTION
  WHEN ex_Record_Not_Exist  THEN
      ls_ErrorMsg:=  SQLERRM || '- GetDuplicateCert. Matl_Num - '||ps_Matl_Num||' And Speedrating - '||ps_Speedrating||' are not exist.';

      RAISE_APPLICATION_ERROR (-20001,ls_ErrorMsg);
  WHEN OTHERS THEN
       ls_ErrorMsg:=  SQLERRM || '- GetDupCert. An error have ocurred.(when others)';

       --Insert record into exception table
       APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(AS_MACHINEID     => NULL,
                                                 AD_OPERATORID    => 'ICSDEV',
                                                 AD_DATERECORDED  => SYSDATE,
                                                 AS_PROCESSNAME   => 'ICS_MAINTENANCE.GetDuplicateCert',
                                                 AX_RECORDDATA    => 'An error have ocurred.(when others)',
                                                 AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                                 AS_MESSAGE       => ls_ErrorMsg);

              RAISE_APPLICATION_ERROR (-20007,ls_ErrorMsg);
End GetDuplicateCert;

PROCEDURE RemoveDuplicateCert(pn_SkuId IN Product.SkuId%TYPE)
/******************************************************************************
   NAME:       RemoveDuplicateCert
   PURPOSE:    Deletes the data from below tabls for given Skuid.

   1) Productcertificate
   2) Productrequest
   3) Product

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        03/06/2013  Krishna          Initial Version
******************************************************************************/
AS
  ln_Skuid_Exist_Count NUMBER(4);
  ex_Record_Not_Exist EXCEPTION;
  ls_ErrorMsg VARCHAR2(4000);
BEGIN

  SELECT COUNT(*)
    INTO ln_SkuId_Exist_Count
    FROM Product
   WHERE SkuId = pn_SkuId;

  IF ln_Skuid_Exist_Count < 1 THEN
      RAISE ex_Record_Not_Exist;
  ELSE
    DELETE FROM Productcertificate
        WHERE Skuid = pn_Skuid;
        
    --jeseitz 4/13/2016 - delete Product_imark_family (only present if on IMARK)
    DELETE FROM Product_Imark_Family
          where skuid = pn_skuid;
   
    --DELETE FROM Productcountry
    DELETE FROM Productrequest
        WHERE Skuid = pn_Skuid;

    DELETE FROM Product
        WHERE Skuid = pn_Skuid;

    COMMIT;
  END IF;

  EXCEPTION
   WHEN  ex_Record_Not_Exist THEN
         ls_ErrorMsg:=  SQLERRM || '- RemoveDuplicateCert. SkuId - '||pn_SkuId||' is not exist.';

           --Insert record into exception table
           APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(AS_MACHINEID     => NULL,
                                                     AD_OPERATORID    => 'ICSDEV',
                                                     AD_DATERECORDED  => SYSDATE,
                                                     AS_PROCESSNAME   => 'ICS_MAINTENANCE.RemoveDuplicateCert',
                                                     AX_RECORDDATA    => 'pn_Skuid - '||pn_Skuid,
                                                     AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                                     AS_MESSAGE       => ls_ErrorMsg);

                  RAISE_APPLICATION_ERROR (-20001,ls_ErrorMsg);
    WHEN OTHERS THEN
         ls_ErrorMsg:=  SQLERRM || '- RemoveDuplicateCert. An error have ocurred.(when others)';

         --Insert record into exception table
         APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(AS_MACHINEID     => NULL,
                                                   AD_OPERATORID    => 'ICSDEV',
                                                   AD_DATERECORDED  => SYSDATE,
                                                   AS_PROCESSNAME   => 'ICS_MAINTENANCE.RemoveDuplicateCert',
                                                   AX_RECORDDATA    => 'An error have ocurred.(when others)',
                                                   AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                                   AS_MESSAGE       => ls_ErrorMsg);

                RAISE_APPLICATION_ERROR (-20007,ls_ErrorMsg);
 END RemoveDuplicateCert;

PROCEDURE GetFamilies (pn_Certificateid in ics.imark_family.certificateid%type,
                                     ps_Result           OUT  SYS_REFCURSOR)
/******************************************************************************
   NAME:       GetFamilies
   PURPOSE:    Returns all data from IMark_Family table

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        10/16/2013  Harini          Initial Version
   1.1        11/20/2013  Harini          Added Orderby Family id condition
******************************************************************************/
AS
ls_ErrorMsg         VARCHAR2(4000);
BEGIN
       OPEN ps_Result FOR
         SELECT  *
           FROM  IMark_Family
           where certificateid =pn_Certificateid
           ORDER BY Family_ID;

  EXCEPTION
    WHEN OTHERS THEN
         ls_ErrorMsg:=  SQLERRM || '- GetFamilies. An error have ocurred.(when others)';

         --Insert record into exception table
         APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(AS_MACHINEID     => NULL,
                                                   AD_OPERATORID    => 'ICSDEV',
                                                   AD_DATERECORDED  => SYSDATE,
                                                   AS_PROCESSNAME   => 'ICS_MAINTENANCE.GetFamilies',
                                                   AX_RECORDDATA    => 'An error have ocurred.(when others). Certificateid = '||pn_certificateid,
                                                   AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                                   AS_MESSAGE       => ls_ErrorMsg);

           RAISE_APPLICATION_ERROR (-20007,ls_ErrorMsg);
END GetFamilies;

PROCEDURE SaveFamily (pn_Certificateid in ics.imark_family.certificateid%type,
                      pn_FamilyID           IN IMark_Family.Family_Id%TYPE,
                      ps_FamilyCode         IN IMark_Family.Family_Code%TYPE,
                      ps_FamilyDesc         IN IMark_Family.Family_Desc%TYPE,
                      ps_ApplicationCat     IN IMark_Family.Application_Cat%TYPE,
                      ps_ConstructionType   IN IMark_Family.Construction_Type%TYPE,
                      ps_StructureType      IN IMark_Family.Structure_Type%TYPE,
                      ps_MountingType       IN IMark_Family.Mounting_Type%TYPE,
                      ps_AspectRatioCat     IN IMark_Family.Aspect_Ratio_Cat%TYPE,
                      ps_SpeedRatingCat     IN IMark_Family.Speed_Rating_Cat%TYPE,
                      ps_LoadIndexCat       IN IMark_Family.Load_Index_Cat%TYPE,
                      ps_UserName           IN IMark_Family.CreatedBy%TYPE)
/******************************************************************************
   NAME:       SaveFamily
   PURPOSE:    Saving changes to the IMARK_FAMILY table.
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        10/16/2013  Harini          Initial Version
   1.1        5/15/2014    JESEITZ      don't automatically change imark in product table when family desc. changes.
******************************************************************************/
AS
  ln_RecordExist      NUMBER;
  ls_Family_Desc_Old  IMark_Family.Family_Desc%TYPE;
  ls_ErrorMsg         VARCHAR2(4000);
BEGIN
    -- Checking whether the record exists in IMark_Family table for the given Family_Id
    SELECT COUNT(1)
    INTO   ln_RecordExist
    FROM   IMark_Family
    WHERE  Family_ID = pn_FamilyID
       and Certificateid = pn_Certificateid;

    -- If record doesn't exist then insert a new record with the input values given
    IF(ln_RecordExist < 1) THEN
        INSERT INTO IMark_Family
                     (Family_ID
                     ,Family_Code
                     ,Family_Desc
                     ,Application_Cat
                     ,Construction_Type
                     ,Structure_Type
                     ,Mounting_Type
                     ,Aspect_Ratio_Cat
                     ,Speed_Rating_Cat
                     ,Load_Index_Cat
                     ,CreatedBy
                     ,CreatedOn
                     ,certificateid)
              VALUES (pn_FamilyID
                     ,ps_FamilyCode
                     ,ps_FamilyDesc
                     ,ps_ApplicationCat
                     ,ps_ConstructionType
                     ,ps_StructureType
                     ,ps_MountingType
                     ,ps_AspectRatioCat
                     ,ps_SpeedRatingCat
                     ,ps_LoadIndexCat
                     ,ps_UserName
                     ,SYSDATE
                     ,pn_Certificateid);
    ELSE
        -- Retrieve the Family_Desc from IMark_Family table
        SELECT Family_Desc
        INTO   ls_Family_Desc_Old
        FROM   IMark_Family
        WHERE  Family_ID       = pn_FamilyID
           and certificateid = pn_Certificateid;

         -- If the record exists then update with the given inputs
        UPDATE IMark_Family
        SET Family_Code       = ps_FamilyCode,
            Family_Desc       = ps_FamilyDesc,
            Application_Cat   = ps_ApplicationCat,
            Construction_Type = ps_ConstructionType,
            Structure_Type    = ps_StructureType,
            Mounting_Type     = ps_MountingType,
            Aspect_Ratio_Cat  = ps_AspectRatioCat ,
            Speed_Rating_Cat  =  ps_SpeedRatingCat,
            Load_Index_Cat    = ps_LoadIndexCat ,
            ModifiedBy        = ps_UserName,
            ModifiedOn        = SYSDATE
        WHERE Family_ID       = pn_FamilyID
           and certificateid = pn_certificateid;

       -- If the input family_desc is not null and old familydesc is not equal to input family desc,
       -- then update the IMark column with new family desc in product table if IMark is null
       --don't do this now - don't want stamping changing behind the scenes because must correspond with what is on mold - jeseitz 5/15/2014
--       IF(ps_FamilyDesc IS NOT NULL and ls_Family_Desc_Old <> ps_FamilyDesc) THEN
--          UPDATE Product
--          SET    IMark = ps_FamilyDesc
--          WHERE  Family = pn_FamilyID
--          AND    IMark IS NULL;
--       END IF;
    END IF;

    COMMIT;

    EXCEPTION
    WHEN OTHERS THEN
         ls_ErrorMsg:=  SQLERRM || '- SaveFamily. An error have ocurred.(when others)';

         --Insert record into exception table
         APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(AS_MACHINEID     => NULL,
                                                   AD_OPERATORID    => 'ICSDEV',
                                                   AD_DATERECORDED  => SYSDATE,
                                                   AS_PROCESSNAME   => 'ICS_MAINTENANCE.SaveFamily',
                                                   AX_RECORDDATA    => 'An error have ocurred.(when others)',
                                                   AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                                   AS_MESSAGE       => ls_ErrorMsg);

           RAISE_APPLICATION_ERROR (-20007,ls_ErrorMsg);

END SaveFamily;

PROCEDURE DeleteFamily(pn_Certificateid in ics.imark_family.certificateid%type,
                                      pn_FamilyID    IN IMark_Family.Family_Id%TYPE)
/******************************************************************************
   NAME:       DeleteFamily
   PURPOSE:    Deletes the data from IMark_Family table for given FamilyId.
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        10/16/2013  Harini          Initial Version
******************************************************************************/
AS
  ln_FamilyId_Exist_Count NUMBER(4);
  ex_Record_Not_Exist     EXCEPTION;
  ls_ErrorMsg             VARCHAR2(4000);
BEGIN
   SELECT COUNT(1)
    INTO   ln_FamilyId_Exist_Count
    FROM   IMark_Family
    WHERE  Family_ID = pn_FamilyID
         and  Certificateid = pn_Certificateid;

    IF ln_FamilyId_Exist_Count < 1 THEN
        RAISE ex_Record_Not_Exist;
    ELSE
        DELETE FROM IMark_Family
          WHERE Family_ID  = pn_FamilyID
          and Certificateid= pn_certificateid;
        COMMIT;
    END IF;
   EXCEPTION
   WHEN  ex_Record_Not_Exist THEN
         ls_ErrorMsg:=  SQLERRM || '- DeleteFamily. FamilyId - '||pn_FamilyID||' is not exist.';

           --Insert record into exception table
           APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(AS_MACHINEID     => NULL,
                                                     AD_OPERATORID    => 'ICSDEV',
                                                     AD_DATERECORDED  => SYSDATE,
                                                     AS_PROCESSNAME   => 'ICS_MAINTENANCE.DeleteFamily',
                                                     AX_RECORDDATA    => 'Family_Id - '||pn_FamilyID,
                                                     AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                                     AS_MESSAGE       => ls_ErrorMsg);

                  RAISE_APPLICATION_ERROR (-20001,ls_ErrorMsg);
    WHEN OTHERS THEN
         ls_ErrorMsg:=  SQLERRM || '- DeleteFamily. An error have ocurred.(when others)';

         --Insert record into exception table
         APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(AS_MACHINEID     => NULL,
                                                   AD_OPERATORID    => 'ICSDEV',
                                                   AD_DATERECORDED  => SYSDATE,
                                                   AS_PROCESSNAME   => 'ICS_MAINTENANCE.DeleteFamily',
                                                   AX_RECORDDATA    => 'An error have ocurred.(when others)',
                                                   AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                                   AS_MESSAGE       => ls_ErrorMsg);

                RAISE_APPLICATION_ERROR (-20007,ls_ErrorMsg);
 END DeleteFamily;

 PROCEDURE CheckIfFamilyExists (pn_Certificateid in ics.imark_family.certificateid%type,
                                 pn_FamilyID          IN   IMark_Family.Family_Id%TYPE,
                                ps_Family_Exist      OUT  VARCHAR2,
                                ps_Family_Desc      OUT  VARCHAR2)
/******************************************************************************
   NAME:       CheckIfFamilyExists
   PURPOSE:    Check whether the Family exists or not and get the Desc

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        10/24/2013  Harini          Initial Version
   1.0        11/05/2013  Ajit            To get Family Desc from
                                          IMark_Family table
******************************************************************************/
AS
  ls_Family_Desc          IMark_Family.Family_Desc%TYPE;
  ls_ErrorMsg             VARCHAR2(4000);
BEGIN

  SELECT  Family_Desc
  INTO   ls_Family_Desc
  FROM   IMark_Family
  WHERE  Family_ID = pn_FamilyID
    and certificateid = pn_certificateid;

  ps_Family_Exist := 'Y';
  ps_Family_Desc := ls_Family_Desc;

  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      ps_Family_Exist := 'N';
      ps_Family_Desc := '';

    WHEN OTHERS THEN
         ls_ErrorMsg:=  SQLERRM || '- CheckIfFamilyExists. An error have ocurred.(when others)';

         --Insert record into exception table
         APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(AS_MACHINEID     => NULL,
                                                   AD_OPERATORID    => 'ICSDEV',
                                                   AD_DATERECORDED  => SYSDATE,
                                                   AS_PROCESSNAME   => 'ICS_MAINTENANCE.CheckIfFamilyExists',
                                                   AX_RECORDDATA    => 'An error have ocurred.(when others)',
                                                   AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                                   AS_MESSAGE       => ls_ErrorMsg);

          RAISE_APPLICATION_ERROR (-20007,ls_ErrorMsg);
END CheckIfFamilyExists;

PROCEDURE EDIT_PRODUCT( pn_SKUID    IN   PRODUCT.SKUID%TYPE, ps_speedrating IN PRODUCT.SPEEDRATING%TYPE)

AS
/******************************************************************************
   NAME:       EDIT_PRODUCT
   PURPOSE:    This procedure accepts SKUID and SpeedRating as inputs and updates the
                Product table with the given SpeedRating for the given SKUID

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        11/19/2013  Guru Gangadhar    Initial Version
******************************************************************************/

ls_ErrorMsg VARCHAR2(4000);

BEGIN

 UPDATE PRODUCT SET SPEEDRATING = ps_speedrating where skuid = pn_SKUID;
COMMIT;
EXCEPTION

    WHEN OTHERS THEN
       ls_ErrorMsg:=  SQLERRM || '- EDIT_PRODUCT. An error have ocurred.(when others)';

       --Insert record into exception table
       APP_MESSAGE_OPERATIONS.App_Message_Insert(AS_MACHINEID     => NULL,
                                                 AD_OPERATORID    => 'ICSDEV',
                                                 AD_DATERECORDED  => SYSDATE,
                                                 AS_PROCESSNAME   => 'ICS_MAINTENANCE.EDIT_PRODUCT',
                                                 AX_RECORDDATA    => 'An error have ocurred.(when others)',
                                                 AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                                 AS_MESSAGE       => ls_ErrorMsg);

       Raise_Application_Error (-20007,ls_ErrorMsg);

END EDIT_PRODUCT;

PROCEDURE COPY_PRODUCT (ps_MATL_NUM IN   PRODUCT.MATL_NUM%TYPE)
AS
/******************************************************************************
   NAME:       COPY_PRODUCT
   PURPOSE:    This procedure accepts Matl_Num of product record to copy.  Get the max skuid
               of the particular matl_num. Then insert an exact copy of the record into the product
               table (will get the next sequence number as the skuid).

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        11/19/2013  Guru Gangadhar    Initial Version
******************************************************************************/
ln_orig_skuid NUMBER;
ln_SkuId NUMBER;
ls_ErrorMsg VARCHAR2(4000);
ex_Record_Not_Exist     EXCEPTION;

BEGIN

   SELECT
   MAX(SKUID)
   INTO ln_orig_skuid
   FROM PRODUCT
   where matl_num = LPAD(ps_matl_num,18,0);

   IF ln_orig_skuid IS  NULL THEN
       RAISE ex_Record_Not_Exist;
   END IF;

   SELECT  SKUID_Seq.NextVal INTO ln_SkuId FROM DUAL;

   Insert into product(skuid, brand, brand_line, sku, branddesc, matl_num, sizestamp, tiretypeid,psn, discontinueddate,
                      specnumber,speedrating,singloadindex, dualloadindex, tubelessyn, reinforcedyn, extraloadyn, utqgtreadwear,
                      utqgtraction,utqgtemp, mudsnowyn, rimdiameter, serialdate, loadrange, mearimwidth, regroovableind,
                      plantproduced,mostrecenttestdate, imark,informenumber, fechadate, treadpattern, specialprotectiveband,
                      nominaltirewidth,aspectratio, treadwearindicators, nameofmanufacturer,family, dotserialnumber,
                      tpn, biasbeltedradial,severeweatherind)
                      (select ln_skuid, brand,brand_line, sku,Branddesc,Matl_Num, sizestamp, tiretypeid, psn, discontinueddate,
                      specnumber, speedrating,singloadindex, dualloadindex, tubelessyn, reinforcedyn,
                      extraloadyn, utqgtreadwear, utqgtraction, utqgtemp,mudsnowyn, rimdiameter, serialdate,
                      loadrange, mearimwidth, regroovableind, plantproduced, mostrecenttestdate, imark,
                      informenumber, fechadate, treadpattern, specialprotectiveband, nominaltirewidth,
                      aspectratio, treadwearindicators, nameofmanufacturer,family, dotserialnumber, tpn,
                      biasbeltedradial,severeweatherind
                      from product where skuid = ln_orig_skuid);
   COMMIT;
   
EXCEPTION
  WHEN  ex_Record_Not_Exist THEN
         ls_ErrorMsg:=  SQLERRM || '- COPY_PRODUCT. Materail Number - '||ps_matl_num||' does not exist.';

           --Insert record into exception table
           APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(AS_MACHINEID     => NULL,
                                                     AD_OPERATORID    => 'ICSDEV',
                                                     AD_DATERECORDED  => SYSDATE,
                                                     AS_PROCESSNAME   => 'ICS_MAINTENANCE.COPY_PRODUCT',
                                                     AX_RECORDDATA    => 'Matl_Num - '||ps_matl_num,
                                                     AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                                     AS_MESSAGE       => ls_ErrorMsg);

                  RAISE_APPLICATION_ERROR (-20001,ls_ErrorMsg);

    WHEN OTHERS THEN
       ls_ErrorMsg:=  SQLERRM || '- COPY_PRODUCT. An error have ocurred.(when others)';

       --Insert record into exception table
       APP_MESSAGE_OPERATIONS.App_Message_Insert(AS_MACHINEID     => NULL,
                                                 AD_OPERATORID    => 'ICSDEV',
                                                 AD_DATERECORDED  => SYSDATE,
                                                 AS_PROCESSNAME   => 'ICS_MAINTENANCE.COPY_PRODUCT',
                                                 AX_RECORDDATA    => 'An error have ocurred.(when others)',
                                                 AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                                 AS_MESSAGE       => ls_ErrorMsg);

       Raise_Application_Error (-20007,ls_ErrorMsg);

END COPY_PRODUCT;

PROCEDURE GET_MATERIALS (ps_MATL_NUM IN   PRODUCT.MATL_NUM%TYPE,
                         pc_Cursor   OUT  SYS_REFCURSOR)
AS
/******************************************************************************
   NAME:       GET_MATERIALS
   PURPOSE:    This procedure will return skuid, sku, speedrating, matl_num
               for the given material.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        11/19/2013  Guru Gangadhar    Initial Version
******************************************************************************/
ln_orig_skuid NUMBER;
ln_SkuId NUMBER;
ls_ErrorMsg VARCHAR2(4000);

BEGIN

 OPEN pc_Cursor  FOR
        Select  skuid,
                sku,
                speedrating,
                matl_num
        From    Product
        where  matl_num = LPAD(ps_matl_num,18,'0');

EXCEPTION

    WHEN OTHERS THEN
       ls_ErrorMsg:=  SQLERRM || '- GET_MATERIALS. An error have ocurred.(when others)';

       --Insert record into exception table
       APP_MESSAGE_OPERATIONS.App_Message_Insert(AS_MACHINEID     => NULL,
                                                 AD_OPERATORID    => 'ICSDEV',
                                                 AD_DATERECORDED  => SYSDATE,
                                                 AS_PROCESSNAME   => 'ICS_MAINTENANCE.GET_MATERIALS',
                                                 AX_RECORDDATA    => 'An error have ocurred.(when others)',
                                                 AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                                 AS_MESSAGE       => ls_ErrorMsg);

       Raise_Application_Error (-20007,ls_ErrorMsg);

END GET_MATERIALS;

PROCEDURE ATTACH_PRODUCT(pn_skuid                 IN   PRODUCT.SKUID%TYPE,
                         ps_certificateNumber     IN   certificate.CertificateNumber%TYPE,
                         ps_Extension_EN          IN   certificate.extension_EN%TYPE,
                         pn_certificationtypeid   IN   certificate.certificationtypeid%TYPE,
                         ps_ErrorMsg              OUT  VARCHAR2)
AS
/******************************************************************************
   NAME:       ATTACH_PRODUCT
   PURPOSE:   This procedure will   allow user to correct an older version of a product record
              to attach it to a certificate .Inputs should be  SKUID , CERTIFICATE NAME,EXTENSION
              and CERTIFICATIONTYPE and create a productcertificate record.  The certificate and skuid must already exist.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        11/19/2013  Guru Gangadhar    Initial Version
******************************************************************************/

ln_skuid_cnt number;
ln_certificateId number;
ls_ErrorMsg VARCHAR2(4000);
BEGIN

--Verify that is a valid skuid:
Select count(*) into ln_skuid_cnt from product  where skuid = pn_skuid;

If ln_skuid_cnt = 0 then
     ps_ErrorMsg := 'skuid does not exist';
ELSE

    --Verify that it is a valid certificate and get the certificateid
    Select certificateid
    into   ln_certificateId
    from   certificate
    where  Certificatenumber = ps_CertificateNumber
    and    extension_EN = ps_Extension_EN
    and    Certificationtypeid = pn_certificationtypeid;

    INSERT INTO productcertificate (skuid, certificationtypeid, certificateid,DateAssigned_egi)
            VALUES (PN_skuId, pn_certificationTypeid, ln_certificateId, TRUNC(SYSDATE));
    COMMIT;
    --jeseitz 4/13/16 - if Imark, need to copy the Product_imark_family record too.
    IF pn_certificationtypeid = 4 then
         INSERT INTO product_imark_family (  certificateid,skuid,familyid, imark)
            VALUES ( ln_certificateId,PN_skuId,0,' ' );
    END IF;
    
   
END IF ;

EXCEPTION
 WHEN NO_DATA_FOUND THEN
 ps_ErrorMsg:= 'invalid certificate';

 WHEN DUP_VAL_ON_INDEX THEN
  ps_ErrorMsg:= 'duplicate record';
    WHEN OTHERS THEN
       ls_ErrorMsg:=  SQLERRM || '- ATTACH_PRODUCT. An error have ocurred.(when others)';

       --Insert record into exception table
       APP_MESSAGE_OPERATIONS.App_Message_Insert(AS_MACHINEID     => NULL,
                                                 AD_OPERATORID    => 'ICSDEV',
                                                 AD_DATERECORDED  => SYSDATE,
                                                 AS_PROCESSNAME   => 'ICS_MAINTENANCE.ATTACH_PRODUCT',
                                                 AX_RECORDDATA    => 'An error have ocurred.(when others)',
                                                 AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                                 AS_MESSAGE       => ls_ErrorMsg);

       Raise_Application_Error (-20007,ls_ErrorMsg);

END ATTACH_PRODUCT;

FUNCTION GetCertificateRecentExtNumber (pn_CertificationTypeId   IN  Certificate.CertificationTypeId%TYPE,
                                        ps_CertificateNumber     IN  Certificate.CertificateNumber%TYPE)
RETURN VARCHAR2
AS
/******************************************************************************
   NAME:       GetCertificateRecentExtNumber
   PURPOSE:    Returns certificate Recent extension  for given
               Certificate number and certificate type

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        11/21/2013  Harini          Initial Version
   1.1        01/10/2014  Harini          Returning null if no record found
******************************************************************************/
ls_Extension_En Certificate.Extension_En%TYPE;
ls_ErrorMsg     VARCHAR2(4000);
BEGIN

     SELECT MAX(TO_NUMBER(Extension_En))
       INTO ls_Extension_En
       FROM Certificate
      WHERE CertificationTypeId      = Pn_CertificationTypeId
        AND UPPER(CertificateNumber) = UPPER(Ps_CertificateNumber)
        AND UPPER(MostRecentCert) = 'Y';

       RETURN Ls_Extension_En;

EXCEPTION

  WHEN No_Data_Found THEN
     RETURN NULL;

   WHEN OTHERS THEN
       ls_ErrorMsg:=  SQLERRM || '- GetCertificateRecentExtNumber. An error have ocurred.(when others)';

       --Insert record into exception table
       APP_MESSAGE_OPERATIONS.App_Message_Insert(AS_MACHINEID     => NULL,
                                                 AD_OPERATORID    => 'ICSDEV',
                                                 AD_DATERECORDED  => SYSDATE,
                                                 AS_PROCESSNAME   => 'ICS_MAINTENANCE.GetCertificateRecentExtNumber',
                                                 AX_RECORDDATA    => 'An error have ocurred.(when others)',
                                                 AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                                 AS_MESSAGE       => ls_ErrorMsg);

       Raise_Application_Error (-20007,ls_ErrorMsg);

END  GetCertificateRecentExtNumber;

PROCEDURE Refresh_Product (ps_MATL_NUM IN    PRODUCT.MATL_NUM%TYPE,
                           pn_ErrorNum OUT   NUMBER,
                           ps_ErrorMsg OUT   VARCHAR2)
AS
/******************************************************************************
   NAME:       Refresh_Product
   PURPOSE:    This procedure accepts Matl_Num and updates all the attaribute values.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        01/10/2014  Harini           Initial Version
******************************************************************************/
      ln_SkuId NUMBER;
      ls_ErrorMsg VARCHAR2(4000);

      ls_Brand               CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_BrandLine           CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_SizeStamp           CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_TireTypeId          CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_PSN                 CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_DiscontinueDate     CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_SpecNumber          CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_SpeedRating         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_SingleLoadIndex     CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_DualLoadIndex       CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_TubelessSyn         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_ReinforcedYN        CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_ExtraLoadYN         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_UTQGTreadWear       CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_UTQGTraction        CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_UTQGTemp            CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_MudSnowYN           CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_SevereWeatherInd    CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_RimDiameter         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_SerialDate          CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_LoadRange           CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_MeaRimWidth         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_RegroovableInd      CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_PlantProduced       CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_MostRecentDate      CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_IMark               CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_InformeNumber       CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_FechaDate           CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_TreadPattern        CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_SpecialProtBrand    CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_NominalTireWidth    CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_AspectRatio         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_TreadWearInd        CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_NameOfManufac       CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_Family              CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_DotSerialNumber     CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_TPN                 CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_BiasBeltedRadial    CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ls_SKU                 CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
      ln_imarkcount          number;
       ln_imarkcertid        certificate.certificateid%type;
BEGIN

	  SELECT MAX(skuid)
     INTO ln_skuid
     FROM  product
     WHERE matl_Num = LPAD(ps_Matl_Num,18,0);

      ICS_CRUD.GetTireCharacteristicsAll(ps_Matl_Num,ls_Brand,ls_BrandLine,ls_SizeStamp,ls_TireTypeId,ls_PSN,
                            ls_DiscontinueDate,ls_SpecNumber,ls_SpeedRating,ls_SingleLoadIndex,ls_DualLoadIndex ,ls_TubelessSyn,
                            ls_ReinforcedYN ,ls_ExtraLoadYN,ls_UTQGTreadWear,ls_UTQGTraction,ls_UTQGTemp,ls_MudSnowYN,ls_SevereWeatherInd,ls_RimDiameter,
                            ls_SerialDate,ls_LoadRange,ls_MeaRimWidth,ls_RegroovableInd,ls_PlantProduced,ls_MostRecentDate,
                            ls_IMark ,ls_InformeNumber,ls_FechaDate,ls_TreadPattern,ls_SpecialProtBrand,ls_NominalTireWidth,
                            ls_AspectRatio,ls_TreadWearInd,ls_NameOfManufac,ls_Family ,ls_DotSerialNumber,ls_TPN ,ls_BiasBeltedRadial,ls_SKU);


       UPDATE Product
        SET    Brand             = ls_Brand,
               Brand_Line        = ls_BrandLine,
               SKU               = ls_SKU,
               BrandDesc         = NULL,
               SizeStamp         = ls_SizeStamp,
               TireTypeId        = ls_TireTypeId,
               PSN               = ls_PSN,
               DiscontinuedDate  = DECODE(ls_DiscontinueDate,NULL,NULL,TO_DATE(ls_DiscontinueDate,'MM/DD/YYYY')),
               --SpeedRating       = ls_SpeedRating,
               SingLoadIndex     = ls_SingleLoadIndex,
               DualLoadIndex     = ls_DualLoadIndex,
               TubelesSyn        = ls_TubelessSyn,
               ReinforcedYN      = ls_ReinforcedYN,
               ExtraLoadYN       = ls_ExtraLoadYN,
               UTQGTreadWear     = ls_UTQGTreadWear,
               UTQGTraction      = ls_UTQGTraction,
               UTQGTemp          = ls_UTQGTemp,
               MudSnowYN         = ls_MudSnowYN,
               SevereWeatherInd  = ls_SevereWeatherInd,
               RimDiameter       = ls_RimDiameter,
               LoadRange         = ls_LoadRange,
               MeaRimWidth       = ls_MeaRimWidth,
               RegroovableInd    = ls_RegroovableInd,
               PlantProduced     = ls_PlantProduced,
               TreadPattern      = ls_TreadPattern,
               NominalTireWidth  = ls_NominalTireWidth,
               AspectRatio       = ls_AspectRatio,
               TPN               = ls_TPN ,
               BiasBeltedRadial  = ls_BiasBeltedRadial,
               ModifiedBy        = 'PRODUCTUPDATE',
               ModifiedOn        = SYSDATE
      WHERE    SKUId             = ln_SkuId;

      COMMIT;

      BEGIN
          ls_Family := NULL;
          ls_IMark  := NULL;
--
--           SELECT TRIM(CAST (NULL AS CHAR(1)) FROM IMARK) IMark,Family
--            INTO  ls_IMark,ls_Family
--            FROM  Product
--          WHERE SKUId  = ln_SkuId;
--
--          IF(ls_Family IS NULL AND ls_IMark IS NULL) THEN
--            ls_family :=  BOM_ATTRIBUTES.GET_IMARK_FAMILY(LPAD(ps_Matl_Num,18,0));
--             UPDATE PRODUCT
--                SET FAMILY = ls_family
--              WHERE SKUID =  ln_SkuId;
--            COMMIT;
--          END IF;

--      jeseitz 4/13/16
        select count(*) into ln_imarkcount
          from ics.product_imark_family pif
            where skuid = ln_SkuID;            
        if ln_imarkcount > 0 then
             select max(certificateid) into ln_imarkcertid
                  from ics.product_imark_family pif
                  where skuid = ln_SkuID;
                  
              select pif.imark , PIF.FAMILYID      
                     INTO  ls_IMark,ls_Family
                     from ics.product_imark_family pif
                     where skuid = ln_SkuID
                                and certificateid =  ln_imarkcertid; 
                  
               IF(ls_Family IS NULL AND ls_IMark IS NULL) THEN
                  ls_family :=  BOM_ATTRIBUTES.GET_IMARK_FAMILY(LPAD(ps_Matl_Num,18,0),ln_imarkcertid);
                          
                    UPDATE PRODUCT_imark_family
                        SET FAMILYID = ls_family,
                               imark = ls_imark
                        WHERE SKUID =  ln_SkuId and certificateid =  ln_imarkcertid;
                    COMMIT;
               END IF;
        
        
          end if;
    
      END;
     pn_ErrorNum := 1;
     ps_ErrorMsg := 'Updated successfully';
EXCEPTION
      WHEN NO_DATA_FOUND THEN
        pn_ErrorNum := 0;
        ps_ErrorMsg := ' Material Number '||ps_Matl_Num ||' does not exists';
      WHEN OTHERS THEN
       ls_ErrorMsg:=  SQLERRM || '- Refresh_Product. An error have ocurred.(when others)';
       pn_ErrorNum := 0;
       ps_ErrorMsg := ' An error have ocurred.(when others)';
       --Insert record into exception table
       APP_MESSAGE_OPERATIONS.App_Message_Insert(AS_MACHINEID     => NULL,
                                                 AD_OPERATORID    => 'ICSDEV',
                                                 AD_DATERECORDED  => SYSDATE,
                                                 AS_PROCESSNAME   => 'ICS_MAINTENANCE.Refresh_Product',
                                                 AX_RECORDDATA    => 'An error have ocurred.(when others)',
                                                 AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                                 AS_MESSAGE       => ls_ErrorMsg);

       Raise_Application_Error (-20007,ls_ErrorMsg);

END Refresh_Product;
PROCEDURE DeleteProductImarkFamily (pn_SkuId                 IN  ProductCertificate.SkuId%TYPE,
                                pn_CertificateId   IN  Certificate.CertificateId%TYPE)

AS
/******************************************************************************
   NAME:       DeleteProductImarkFamily
   PURPOSE:    Delete records from productImarkFamily table for given skuid and certificate

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        04/13/2016  jeseitz         Initial Version
******************************************************************************/
      ls_ErrorMsg VARCHAR2(4000);
BEGIN
  BEGIN

  DELETE  FROM Product_imark_Family
         WHERE SkuId = pn_SkuId
           AND Certificateid = Pn_CertificateID;
 
   EXCEPTION
        WHEN OTHERS THEN
           ls_ErrorMsg:=  SQLERRM || '- DeleteProductImarkFamily. An error has ocurred.(when others)';

       --Insert record into exception table
       APP_MESSAGE_OPERATIONS.App_Message_Insert(AS_MACHINEID     => NULL,
                                                 AD_OPERATORID    => 'ICSDEV',
                                                 AD_DATERECORDED  => SYSDATE,
                                                 AS_PROCESSNAME   => 'ICS_MAINTENANCE.DeleteProductImarkFamily',
                                                 AX_RECORDDATA    => 'certificateid ='||pn_Certificateid||' skuid ='||pn_skuid,
                                                 AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                                 AS_MESSAGE       => ls_ErrorMsg);

       Raise_Application_Error (-20007,ls_ErrorMsg);
      END;

END DeleteProductImarkFamily;

PROCEDURE GET_PRODUCT_INFO (ps_MATL_NUM IN   PRODUCT.MATL_NUM%TYPE,
                            pc_product   OUT  SYS_REFCURSOR,
                            pn_error_num OUT  NUMBER,
                            ps_error_desc OUT VARCHAR2)
AS
/******************************************************************************
     NAME:       GET_PRODUCT_INFO
     PURPOSE:  
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0                                      Initial Version  
     1.1        2/18/2013   Krishna          - Converted SERIALDATE and MOSTRECENTTESTDATE  
                                               columns data into MM/DD/YYYY
                                             - Converted RIMDIAMETER and MEARIMWIDTH    
                                                columns data into character
     1.2        02/21/2014   Guru            - Added TREADPATTERN column in select query.  
     1.3        09/12/2019   JESEITZ         - Moved from TRACS.ics_support package on technical database                                      
  ******************************************************************************/    
 
ln_orig_skuid NUMBER;
ln_SkuId NUMBER;
ls_ErrorMsg VARCHAR2(4000);
  
BEGIN

   select max(skuid) INTO ln_skuid from ics.product where matl_num = ps_MATL_NUM;
   
   open pc_product for
      select   sku "SKU",BRAND_LINE "BrandDesc",
             NVL(TO_CHAR(P.SERIALDATE,'MM/DD/YYYY'),'')  "SerialDate",
             P.MFGWWYY "MFGWWYY",
             P.DOTSERIALNUMBER   "DOTSerialNumber",
             P.SIZESTAMP "SizeStamp",
             P.SPEEDRATING "SpeedRating",
             P.SINGLOADINDEX "SingLoadIndex",
             P.DUALLOADINDEX "DualLoadIndex",
             P.BIASBELTEDRADIAL "BiasBeltedRadial",
             P.TUBELESSYN "Tubeless", 
             P.REINFORCEDYN  "ReinforcedYN",
             P.EXTRALOADYN   "ExtraLoadYN",
             P.UTQGTREADWEAR "UTQGTreadwear",
             P.UTQGTRACTION "UTQGTraction",
             P.UTQGTEMP "UTQGTemp",
             P.MUDSNOWYN "MudSnowYN",
             P.SEVEREWEATHERIND "SevereWeatherInd",
             NVL(TO_CHAR(P.RIMDIAMETER),'') "RimDiameter",
             P.LOADRANGE  "LoadRange",
             NVL(TO_CHAR(P.MEARIMWIDTH),'') "MeaRimWidth",
             P.REGROOVABLEIND "RegroovableInd",
             P.PLANTPRODUCED  "PlantProduced",
             NVL(TO_CHAR(P.MOSTRECENTTESTDATE,'MM/DD/YYYY'),'') "MostRecentTestDate",
             P.IMARK "IMark",
             P.TPN "TechnicalPlatform",
             P.Aspectratio  "AspectRatio",
             P.TireTypeID "TireTypeID",
             P.TREADPATTERN "TreadPattern"
             From Product P Where P.Skuid = Ln_Skuid;
        pn_error_num := 0;
        ps_error_desc :=  'Success';
     
   EXCEPTION    
  
    WHEN OTHERS THEN
    
      ---Return empty dataset
       OPEN  pc_product FOR 'SELECT * FROM ICS.PRODUCT WHERE TESTID = -10';
       --Insert record into exception table  
       ls_ErrorMsg:=  SQLERRM || '- GET_PRODUCT_INO. An error has ocurred.(when others)';

     
       APP_MESSAGE_OPERATIONS.App_Message_Insert(AS_MACHINEID     => NULL,
                                                 AD_OPERATORID    => 'ICSDEV',
                                                 AD_DATERECORDED  => SYSDATE,
                                                 AS_PROCESSNAME   => 'ICS_MAINTENANCE.GET_PRODUCT_INFO',
                                                 AX_RECORDDATA    => 'An error has ocurred.(when others)',
                                                 AS_MESSAGECODE   => TO_CHAR(SQLCODE),
                                                 AS_MESSAGE       => ls_ErrorMsg);

       Raise_Application_Error (-20007,ls_ErrorMsg);
  
END GET_PRODUCT_INFO;


END ICS_MAINTENANCE;
/

create or replace PACKAGE           PROD_COUNTRY_LOAD AS
/******************************************************************************
   NAME:       PROD_COUNTRY_LOAD
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        3/13/2011      arsherri       1. Created this package.
******************************************************************************/

  PROCEDURE load_product
    (vn_rec_count               OUT NUMBER,
     vn_rec2_count              OUT NUMBER,
     vn_error_count             OUT NUMBER,
     vn_error_num               OUT NUMBER,
     vs_error_desc               OUT VARCHAR2);
     
  PROCEDURE load_country
    (vn_rec_count               OUT NUMBER,
     vn_error_count            OUT NUMBER,
     vn_error_num              OUT NUMBER,
     vs_error_desc              OUT VARCHAR2);   
     
PROCEDURE update_product_tire_type
    (vn_rec_count               OUT NUMBER,
     vn_error_count             OUT NUMBER,
     vn_error_num               OUT NUMBER,
     vs_error_desc              OUT VARCHAR2);
     
PROCEDURE productcountry_save
   (ps_deleteme                 IN VARCHAR2,
    ps_sku                          IN VARCHAR2,            
    pi_CertificationId           IN NUMBER,
    pi_Skuid                       IN NUMBER);
    
PROCEDURE productcertification_save
    (pi_certificationtypeid      IN  NUMBER,
     pi_skuid                        IN  NUMBER,
     pi_error_num               OUT NUMBER);

  procedure Product_Save(   pi_SKUID in   NUMBER,
                          ps_SKU in   VARCHAR2,
                          ps_BRANDCODE in   VARCHAR2,
                          pi_TIRETYPEID in   NUMBER,
                          pi_NPRID in   NUMBER,
                          ps_SIZESTAMP in   VARCHAR2,
                          pd_DISCONTINUEDDATE in   DATE,
                          ps_SPECNUMBER in   VARCHAR2,
                          ps_SPEEDRATING in   VARCHAR2,
                          ps_SINGLOADINDEX in   VARCHAR2,
                          ps_DUALLOADINDEX in   VARCHAR2,
                          ps_BIASBELTEDRADIAL in   VARCHAR2,
                          ps_TUBELESSYN in   VARCHAR2,
                          ps_REINFORCEDYN in   VARCHAR2,
                          ps_EXTRALOADYN in   VARCHAR2,                          
                          ps_UTQGTREADWEAR in   VARCHAR2,
                          ps_UTQGTRACTION in   VARCHAR2,
                          ps_UTQGTEMP in   VARCHAR2,
                          ps_MUDSNOWYN in   VARCHAR2,
                          pi_RIMDIAMETER in   NUMBER,
                          pd_SERIALDATE in   DATE,
                          ps_BRANDDESC in   VARCHAR2,
                          ps_LOADRANGE in   VARCHAR2,
                          pi_MEARIMWIDTH in   NUMBER,
                          ps_REGROOVABLEIND in   VARCHAR2,
                          ps_PLANTPRODUCED in   VARCHAR2,
                          pd_MOSTRECENTTESTDATE in   DATE,
                          ps_IMARK in   VARCHAR2,                         
                          ps_INFORMENUMBER in   VARCHAR2,
                          pd_FECHADATE in   DATE,
                          ps_TREADPATTERN in   VARCHAR2,
                          ps_SPECIALPROTECTIVEBAND in   VARCHAR2,
                          ps_NOMINALTIREWIDTH in   VARCHAR2,
                          ps_ASPECTRADIO in   VARCHAR2,
                          ps_TREADWEARINDICATORS in   VARCHAR2,
                          ps_NAMEOFMANUFACTURER in   VARCHAR2,
                          ps_FAMILY in   VARCHAR2,
                          pn_PPN in NUMBER,
                          ps_DOTSERIALNUMBER in   VARCHAR2,
                          ps_OperatorName   in Varchar2) ;

    
 END PROD_COUNTRY_LOAD;
 /
 
 create or replace PACKAGE BODY           PROD_COUNTRY_LOAD AS
/******************************************************************************
   NAME:       PROD_COUNTRY_LOAD
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        3/13/2011      arsherri       1.Initial Load of Product 
                                            2.Initial Load of ProductCountry.
******************************************************************************/

PROCEDURE load_product
    (vn_rec_count         OUT NUMBER,
     vn_rec2_count        OUT NUMBER,
     vn_error_count       OUT NUMBER,
     vn_error_num         OUT NUMBER,
     vs_error_desc        OUT VARCHAR2)

IS

    ln_CommitCnt         NUMBER (4);
    ln_SKUID             product.skuid%TYPE;
    ln_Count             NUMBER(3);
    

    CURSOR lcr_SKUS IS
       SELECT sm.*, ics.sku_size, ics.sku_brnd, ics.speed_rating, ics.date_assigned
            FROM ics.intlcert_cert_status ics, skumain_vw sm
       WHERE NVL(ics.disc_date, SYSDATE) > '01-NOV-1991'
           AND ics.sku_size = SUBSTR(sm.sku, 7, 4)
           AND ics.sku_brnd = SUBSTR( sm.sku, 4, 3)
        ORDER BY ics.sku_size, ics.sku_brnd, ics.date_assigned;   
          
    CURSOR lcr_RestSKUS IS
       SELECT sm.*
        FROM skumain_vw sm, ics_skus ics
      WHERE sm.sku = ics.sku
      ORDER BY sm.sku;
  
BEGIN

    --  Initialize return variables
    vs_error_desc := '';
    vn_error_num := 0;    
    vn_error_count := 0;     
    vn_rec_count := 0;     
    vn_rec2_count := 0;
    ln_CommitCnt := 0;

    --  Process all SKUS in CERT_STATUS first for Emark and Imark    

    FOR lcr_SKUSRec IN lcr_SKUS LOOP


         BEGIN
               SELECT count(*)
                   INTO ln_Count
                 FROM product
               WHERE sku = lcr_SKUSRec.sku
                    AND NVL(speedrating,'*') = NVL(lcr_SKUSRec.speed_rating,'*');
         EXCEPTION
               WHEN NO_DATA_FOUND  THEN   
                    ln_Count := 0;                   
         END;
         
         IF ln_Count = 0 THEN             
                BEGIN 
                    Product_Save (
                          ln_SkuID,
                          lcr_SKUSRec.SKU,
                          lcr_SKUSRec.BRANDCODE,
                          lcr_SKUSRec.TIRETYPEID,
                          lcr_SKUSRec.NPRID,
                          lcr_SKUSRec.SIZESTAMP,
                          lcr_SKUSRec.DISCONTINUEDATE,
                          lcr_SKUSRec.SPECNUMBER,
                          lcr_SKUSRec.speed_rating,
                          lcr_SKUSRec.SINGLOADINDEX,
                          lcr_SKUSRec.DUALLOADINDEX,
                          lcr_SKUSRec.BIASBELTEDRADIAL,  
                          lcr_SKUSRec.TUBELESSYN,
                          lcr_SKUSRec.REINFORCEDYN,
                          lcr_SKUSRec.EXTRALOADYN,
                          lcr_SKUSRec.UTQGTREADWEAR,
                          lcr_SKUSRec.UTQGTRACTION,
                          lcr_SKUSRec.UTQGTEMP,
                          lcr_SKUSRec.MUDSNOWYN,
                          lcr_SKUSRec.RIMDIAMETER,
                          lcr_SKUSRec.SERIALDATE,
                          lcr_SKUSRec.BRANDDESC,
                          lcr_SKUSRec.LOADRANGE,
                          lcr_SKUSRec.MEARIMWIDTH,
                          lcr_SKUSRec.REGROOVABLEIND,
                          lcr_SKUSRec.PLANTPRODUCED,
                          lcr_SKUSRec.MOSTRECENTTESTDATE,
                          lcr_SKUSRec.IMARK,                         
                          lcr_SKUSRec.INFORMENUMBER,
                          lcr_SKUSRec.FECHADATE,
                          lcr_SKUSRec.TREADPATTERN,
                          lcr_SKUSRec.SPECIALPROTECTIVEBAND,
                          lcr_SKUSRec.NOMINALTIREWIDTH,
                          lcr_SKUSRec.ASPECTRATIO,
                          lcr_SKUSRec.TREADWEARINDICATORS,
                          lcr_SKUSRec.NAMEOFMANUFACTURER,
                          lcr_SKUSRec.FAMILY,
                          lcr_SKUSRec.PPN, 
                          lcr_SKUSRec.DOTSERIALNUMBER,
                          'ICS_PROD');
                        vn_rec_count := vn_rec_count + 1;
                       ln_CommitCnt := ln_CommitCnt + 1;
                  EXCEPTION
                         WHEN OTHERS THEN
                            vn_error_count := vn_error_count + 1;
                            INSERT INTO ics.load_error
                                  (table_loaded, key_field_data_1, error_date)
                             VALUES
                          ('PRODUCT',lcr_SKUSRec.SKU, SYSDATE);
                    END;      
                END IF;  
       
                IF  ln_CommitCnt > 300 THEN
                        COMMIT;
                        ln_CommitCnt := 0;
                END IF;        
        
                 IF vn_error_count > 100 THEN
                         vn_error_num := 3;
                        vs_error_desc := 'Too many errors';
                        EXIT;    
                 END IF;    
    
       END LOOP;                         

    --  Process all SKUS in ICS_SKUS    

        FOR lcr_RestSKUSRec IN lcr_RestSKUS LOOP

                  BEGIN
                       SELECT count(*)
                          INTO ln_Count
                         FROM product
                        WHERE sku = lcr_RestSKUSRec.sku
                             AND speedrating = lcr_RestSKUSRec.speedrating;
                   EXCEPTION
                         WHEN NO_DATA_FOUND  THEN   
                                ln_Count := 0;                   
                    END;
                    
                 IF ln_Count = 0 THEN             
                        BEGIN 
                            Product_Save (
                                  ln_SkuID,
                                  lcr_RestSKUSRec.SKU,
                                  lcr_RestSKUSRec.BRANDCODE,
                                  lcr_RestSKUSRec.TIRETYPEID,
                                  lcr_RestSKUSRec.NPRID,
                                  lcr_RestSKUSRec.SIZESTAMP,
                                  lcr_RestSKUSRec.DISCONTINUEDATE,
                                  lcr_RestSKUSRec.SPECNUMBER,
                                  lcr_RestSKUSRec.speedrating,
                                  lcr_RestSKUSRec.SINGLOADINDEX,
                                  lcr_RestSKUSRec.DUALLOADINDEX,
                                  lcr_RestSKUSRec.BIASBELTEDRADIAL,  
                                  lcr_RestSKUSRec.TUBELESSYN,
                                  lcr_RestSKUSRec.REINFORCEDYN,
                                  lcr_RestSKUSRec.EXTRALOADYN,
                                  lcr_RestSKUSRec.UTQGTREADWEAR,
                                  lcr_RestSKUSRec.UTQGTRACTION,
                                  lcr_RestSKUSRec.UTQGTEMP,
                                  lcr_RestSKUSRec.MUDSNOWYN,
                                  lcr_RestSKUSRec.RIMDIAMETER,
                                  lcr_RestSKUSRec.SERIALDATE,
                                  lcr_RestSKUSRec.BRANDDESC,
                                  lcr_RestSKUSRec.LOADRANGE,
                                  lcr_RestSKUSRec.MEARIMWIDTH,
                                  lcr_RestSKUSRec.REGROOVABLEIND,
                                  lcr_RestSKUSRec.PLANTPRODUCED,
                                  lcr_RestSKUSRec.MOSTRECENTTESTDATE,
                                  lcr_RestSKUSRec.IMARK,                         
                                  lcr_RestSKUSRec.INFORMENUMBER,
                                  lcr_RestSKUSRec.FECHADATE,
                                  lcr_RestSKUSRec.TREADPATTERN,
                                  lcr_RestSKUSRec.SPECIALPROTECTIVEBAND,
                                  lcr_RestSKUSRec.NOMINALTIREWIDTH,
                                  lcr_RestSKUSRec.ASPECTRATIO,
                                  lcr_RestSKUSRec.TREADWEARINDICATORS,
                                  lcr_RestSKUSRec.NAMEOFMANUFACTURER,
                                  lcr_RestSKUSRec.FAMILY,
                                  lcr_RestSKUSRec.PPN, 
                                  lcr_RestSKUSRec.DOTSERIALNUMBER,
                                  'ICS_PROD');
                            vn_rec2_count := vn_rec2_count + 1;
                            ln_CommitCnt := ln_CommitCnt + 1;
                        EXCEPTION
                             WHEN OTHERS THEN
                                    vn_error_count := vn_error_count + 1;
                                    INSERT INTO ics.load_error
                                        (table_loaded, key_field_data_1, error_date)
                                    VALUES
                                             ('PRODUCT',lcr_RestSKUSRec.SKU, SYSDATE);
                         END;
                  END IF;           
       
                 IF  ln_CommitCnt > 300 THEN
                    COMMIT;
                    ln_CommitCnt := 0;
                 END IF;        
        
                IF vn_error_count > 100 THEN
                     vn_error_num := 3;
                     vs_error_desc := 'Too many errors';
                     EXIT;    
                END IF;    
    
         END LOOP                         


         COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        DECLARE
            lsErrorMsg VARCHAR2(300) := SQLERRM;
        BEGIN
            vn_error_num := 3;
            vs_error_desc := SUBSTR(lsErrorMsg, 1, 250) || ' (DB)';
        END;
END;


PROCEDURE load_country
    (vn_rec_count           OUT NUMBER,
     vn_error_count        OUT NUMBER,
     vn_error_num         OUT NUMBER,
     vs_error_desc         OUT VARCHAR2)

IS

    ln_CommitCnt    NUMBER (4);
    ln_SKUID        product.skuid%TYPE;
    ls_SKU          product.sku%TYPE;
    ln_CertType     NUMBER(1);
    ln_Stage         NUMBER(1);
    le_TooManyErrors  EXCEPTION;
    ln_CtlCertType      PRODUCTCERTIFICATE.CERTIFICATIONTYPEID%TYPE;
    ls_CtlSKU              product.sku%TYPE;

    CURSOR lcr_Status IS
        select DECODE(SUBSTR( i.cert_type, 1, 1),'E', 1, 'I', 4) certification_type, p.sku, p.skuid ,
        I.SW_INDICATOR
         from ics.intlcert_cert_status i, product p
       where i.sku_size = SUBSTR(p.sku, 7, 4)
          and i.sku_brnd = SUBSTR(p.sku, 4, 3)
          and trim(upper(speed_rating)) = trim(upper(speedrating))
       order by i.cert_type asc, p.sku asc, p.skuid desc;   


    CURSOR lcr_SKUS IS
       SELECT ics.*
          FROM ics_skus ics, product p
        WHERE ics.sku = p.sku 
           -- AND p.skuid between vn_start_skuid and vn_end_skuid
        ORDER BY p.sku asc, p.skuid desc;

BEGIN

    --  Initialize return variables
    vs_error_desc := '';
    vn_error_num := 0;    
    vn_error_count := 0;     
    vn_rec_count := 0;     
    ln_CommitCnt := 0;

    ln_CtlCertType := 0;
    ls_CtlSKU := 'START';

    FOR lcr_StatusRec IN lcr_Status LOOP
            ln_Stage := 0;
            IF (ln_CtlCertType <> lcr_StatusRec.certification_type) OR
                ( ls_CtlSKU <>  lcr_StatusRec.sku) THEN
                    ls_CtlSKU := lcr_StatusRec.sku;
                    ln_CtlCertType :=  lcr_StatusRec.certification_type;
                    if lcr_StatusRec.sw_indicator is not null then -- jeseitz - check for e117 - it will insert both ECE3054 AND ECE117
                       ln_CtlCertType :=6;
                    end if;
                    ProductCountry_Save( 'N', ls_CtlSKU, ln_CtlCertType, lcr_StatusRec.skuid);
                     vn_rec_count := vn_rec_count + 1;
                    IF ln_Stage > 0 THEN
                        vn_error_count := vn_error_count + 1;
                    END IF;
            END IF;
    
    END LOOP;


    FOR lcr_SKUSRec IN lcr_SKUS LOOP

        -- Get Max SKU ID
        BEGIN
            SELECT MAX(skuid)
                INTO ln_Skuid
               FROM product
             WHERE sku =  lcr_SKUSRec.sku;
        EXCEPTION
             WHEN OTHERS THEN
                    ln_Skuid := 0;
        END;                 

        ls_Sku   := lcr_SKUSRec.sku;

        BEGIN

            IF lcr_SKUSRec.GSO is not null THEN
                ln_CertType := 2;
                ProductCountry_Save( 'N', ls_SKU, ln_CertType, ln_SkuID);
                IF ln_Stage > 0 THEN
                    vn_error_count := vn_error_count + 1;
                END IF;
            END IF;

            IF lcr_SKUSRec.NOM is not null THEN
                ln_CertType := 3;
                ProductCountry_Save( 'N', ls_SKU, ln_CertType, ln_SkuID);
                IF ln_Stage > 0 THEN
                    vn_error_count := vn_error_count + 1;
                END IF;
            END IF;

            IF lcr_SKUSRec.CCC is not null THEN
                ln_CertType := 5;
                ProductCountry_Save( 'N', ls_SKU, ln_CertType, ln_SkuID);
                IF ln_Stage > 0 THEN
                    vn_error_count := vn_error_count + 1;
                END IF;
            END IF;

           vn_rec_count := vn_rec_count + 1;
           ln_CommitCnt := ln_CommitCnt + 1;
        
           IF ln_CommitCnt > 100 THEN
                ln_CommitCnt := 0;
                COMMIT; 
           END IF;               
           
           IF vn_error_count > 20 THEN
               RAISE le_TooManyErrors;
           END IF;

       EXCEPTION
         WHEN le_TooManyErrors THEN
            INSERT INTO ICS.LOAD_ERROR
                (table_loaded, key_field_data_1, error_date)
            VALUES
                ('PRODUCT_COUNTRY','Too many errors', SYSDATE);
         WHEN OTHERS THEN
            vn_error_count := vn_error_count + 1;
            INSERT INTO ICS.LOAD_ERROR
                (table_loaded, key_field_data_1, key_field_data_2, error_date)
            VALUES
                ('PRODUCT_COUNTRY',lcr_SKUSRec.SKU, ln_CertType, SYSDATE);
       END;

       IF vn_error_count > 25 THEN
           vn_error_num := 3;
           vs_error_desc := 'Too many errors';
           EXIT;    
       END IF;
     
    END LOOP;

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        DECLARE
            lsErrorMsg VARCHAR2(300) := SQLERRM;
        BEGIN
            vn_error_num := 3;
            vs_error_desc := SUBSTR(lsErrorMsg, 1, 250) || ' (DB)';
        END;
END;


PROCEDURE update_product_tire_type
    (vn_rec_count         OUT NUMBER,
     vn_error_count       OUT NUMBER,
     vn_error_num         OUT NUMBER,
     vs_error_desc        OUT VARCHAR2)

IS

    ln_CommitCnt         NUMBER (4);
    ln_SKUID             product.skuid%TYPE;
    ln_TireTypeId     product.tiretypeid%TYPE;
    

    CURSOR lcr_SKUS IS
    SELECT *
      FROM product
     WHERE tiretypeid IS NULL
      ORDER BY sku;

BEGIN

    --  Initialize return variables
    vs_error_desc := '';
    vn_error_num := 0;    
    vn_error_count := 0;     
    vn_rec_count := 0;     
    ln_CommitCnt := 0;

    FOR lcr_SKUSRec IN lcr_SKUS LOOP


    BEGIN
   
          ln_TireTypeID := BOM_ATTRIBUTES.get_product_type(lcr_SKUSRec.SKU);
             
         ln_SkuID := ICS_COMMON_FUNCTIONS.getLatestSkuIdBySku (lcr_SKUSRec.SKU);
    

         IF (NVL(ln_TireTypeID, 0) > 0) AND (NVL(ln_SkuID, 0) > 0) THEN
                 UPDATE product
                       SET tiretypeid = ln_TireTypeId
                 WHERE skuid = ln_SkuID;
                vn_rec_count := vn_rec_count + 1;              
         END IF;             

    EXCEPTION
        WHEN OTHERS THEN
            vn_error_count := vn_error_count + 1;
            INSERT INTO ics.load_error
                (table_loaded, key_field_data_1, error_date)
            VALUES
                ('PRODUCT',lcr_SKUSRec.SKU, SYSDATE);
    END;

    ln_CommitCnt := ln_CommitCnt + 1;

    IF ln_CommitCnt > 999 THEN
        COMMIT;
        ln_CommitCnt := 0;
    END IF;
    
    IF vn_error_count > 100 THEN
         vn_error_num := 3;
         vs_error_desc := 'Too many errors';
         EXIT;    
    END IF;
     
    END LOOP;

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        DECLARE
            lsErrorMsg VARCHAR2(300) := SQLERRM;
        BEGIN
            vn_error_num := 3;
            vs_error_desc := SUBSTR(lsErrorMsg, 1, 250) || ' (DB)';
        END;
END;


PROCEDURE productcountry_save
   (ps_deleteme            IN VARCHAR2,
    ps_sku                     IN VARCHAR2,    
    pi_CertificationId       IN NUMBER,
    pi_Skuid                   IN NUMBER)

IS

      --varible
      ls_MachineId           VARCHAR2(50):=null;
      ls_OperatorId          VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg            VARCHAR2(4000);
      ln_ErrorNum           NUMBER(1);    
      ln_SkuID                 ics.product.skuid%TYPE;
      
      le_Done                   EXCEPTION;
      
      
BEGIN
      
    --  Clear olld records to pick up any changes
    IF pi_CertificationID = 6 THEN
            DELETE 
              FROM productcountry
            WHERE certificationtypeid IN (1,6)
                AND skuid = pi_Skuid;
            COMMIT;
    ELSE     
            DELETE 
              FROM productcountry
            WHERE certificationtypeid = pi_CertificationID
                AND skuid = pi_Skuid;
            COMMIT;
     END IF;
    
     --  If only deleting coutnries exit now 
      IF UPPER(ps_deleteme) = 'Y' THEN
             RAISE le_Done;
     END IF;

     IF NVL(pi_skuid,0) = 0 THEN
          --Skuid Does not exist in Product,So we insert into product first
           SELECT  SKUID_Seq.NextVal INTO ln_SkuId FROM DUAL;
          INSERT INTO product 
                (skuid,BRANDCODE,SKU,SIZESTAMP, TIRETYPEID)
                 Select ln_SkuId, BrandCode, SKU, SizeStamp, TIRETYPEID
                  From SKUMain_vw
                Where SKU = ps_sku;
            COMMIT; 
    ELSE
            ln_SkuId := pi_SkuId;
    END IF;

      --  Create Appropriate Country and SKU Records          
     IF pi_CertificationID = 6 THEN
            ProductCertification_Save (1, ln_SkuID, ln_ErrorNum);
            ProductCertification_Save (6, ln_SkuID, ln_ErrorNum);
     ELSE
            ProductCertification_Save ( pi_CertificationId, ln_SkuId, ln_ErrorNum);
    END IF;


EXCEPTION
      WHEN le_Done THEN
            COMMIT;
    WHEN OTHERS THEN
        DECLARE
            lsErrorMsg VARCHAR2(300) := SQLERRM;
        BEGIN
             INSERT INTO ICS.LOAD_ERROR
                (table_loaded, key_field_data_1, key_field_data_2, error_date)
                 VALUES
                ('PRODUCT_CERTIFICATE', TO_CHAR(pi_certificationid) || '-' || TO_CHAR(pi_Skuid),
                  SUBSTR(lsErrorMsg, 1, 50), SYSDATE);
         END;         

END;
     


PROCEDURE productcertification_save
    (pi_certificationtypeid   IN   NUMBER,
     pi_skuid                     IN   NUMBER,
     pi_error_num            OUT NUMBER)
IS                          
    
       
    ls_RequestStatus        VARCHAR2(1);
    

   CURSOR lcr_Certs IS
        SELECT cer.certificateid,  
              ( Case
                  ---jeseitz 7/27/12 -- fixed case statement -- nom does not get date approved, only date submitted.
                  WHEN pce.SKUID  is not null  AND  (pce.dateapproved_cegi is not null or CER.CERTDATEAPPROVED  is not null) THEN 'A'
                  WHEN PCE.SKUID is not null and ((PCE.DATESUBMITTED is not null or CER.CERTDATESUBMITTED is not null) and PCE.CERTIFICATIONTYPEID = 3) THEN 'A'  
                  WHEN PCE.SKUID is not null and (PCE.DATESUBMITTED is not null or  CER.CERTDATESUBMITTED  is not null) THEN 'I'
                  ---jeseitz 7/27/12 WHEN pce.SKUID  is not null  AND (pce.dateapproved_cegi is null or pce.datesubmitted is null)   THEN 'I'
                  ---jeseitz 7/27/12 WHEN pce.SKUID  is not null  AND  (pce.dateapproved_cegi is not null or pce.datesubmitted is not null) THEN 'A'
                  else 'R'     
               end ) as state
         FROM Certificate cer, ProductCertificate pce
        WHERE pce.certificationtypeid = pi_certificationtypeid
            AND pce.skuid=pi_SkuId
            AND pce.certificationtypeid = cer.certificationtypeid
            AND pce.certificateid = cer.certificateid
            AND NVL(UPPER(cer.activestatus),'N') = 'Y'
        ORDER BY STATE;

BEGIN

    pi_error_num := 0;
    ls_RequestStatus := 'R';

   
    FOR lcr_CertsRec IN lcr_Certs LOOP

        -- Since request status (state) is ordered
        -- Then the following will provide best result
        -- ls_RequestStatus := lcr_CertsRec.state;

        IF lcr_CertsRec.state = 'A' THEN
                ls_RequestStatus := 'A';                
                EXIT;
        END IF;

        IF lcr_CertsRec.state =  'I' THEN
                ls_RequestStatus := 'I';                
                EXIT;
         END IF;            

     END LOOP;
    
   -- Need to force update for ECE when ECE 117 
   -- commented out - jeseitz 8/15/2012
--   IF pi_CertificationTypeID = 6 THEN
--            INSERT INTO  PRODUCTCOUNTRY (SKUID, COUNTRYID, CERTIFICATIONTYPEID, REQUESTSTATUS)
--                  ( Select pi_Skuid, co.countryid, 1, ls_RequestStatus
--                    From country co , certificationtype ce
--                    Where co.CertificationTypeId = ce.CertificationTypeId
--                      and ce.CertificationTypeId=pi_CertificationTypeId);
--    END IF;
    
    INSERT INTO  PRODUCTCOUNTRY (SKUID, COUNTRYID, CERTIFICATIONTYPEID, REQUESTSTATUS)
            ( Select pi_Skuid, co.countryid, ce.CertificationTypeId, ls_RequestStatus
               From country co , certificationtype ce
              Where co.CertificationTypeId = ce.CertificationTypeId
                 and ce.CertificationTypeId=pi_CertificationTypeId);
   
          
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        DECLARE
            lsErrorMsg VARCHAR2(300) := SQLERRM;
        BEGIN
            pi_error_num := 3;
             INSERT INTO ICS.LOAD_ERROR
                (table_loaded, key_field_data_1, key_field_data_2, error_date)
                 VALUES
                ('PRODUCT_COUNTRY', TO_CHAR(pi_certificationtypeid) || '-' || TO_CHAR(pi_Skuid),
                  SUBSTR(lsErrorMsg, 1, 50), SYSDATE);
         END;         
END; 

 procedure Product_Save(  pi_SKUID in   NUMBER,
                          ps_SKU in   VARCHAR2,
                          ps_BRANDCODE in   VARCHAR2,
                          pi_TIRETYPEID in   NUMBER,
                          pi_NPRID in   NUMBER,
                          ps_SIZESTAMP in   VARCHAR2,
                          pd_DISCONTINUEDDATE in   DATE,
                          ps_SPECNUMBER in   VARCHAR2,
                          ps_SPEEDRATING in   VARCHAR2,
                          ps_SINGLOADINDEX in   VARCHAR2,
                          ps_DUALLOADINDEX in   VARCHAR2,
                          ps_BIASBELTEDRADIAL in   VARCHAR2,
                          ps_TUBELESSYN in   VARCHAR2,
                          ps_REINFORCEDYN in   VARCHAR2,
                          ps_EXTRALOADYN in   VARCHAR2,                         
                          ps_UTQGTREADWEAR in   VARCHAR2,
                          ps_UTQGTRACTION in   VARCHAR2,
                          ps_UTQGTEMP in   VARCHAR2,
                          ps_MUDSNOWYN in   VARCHAR2,
                          pi_RIMDIAMETER in   NUMBER,
                          pd_SERIALDATE in   DATE,
                          ps_BRANDDESC in   VARCHAR2,
                          ps_LOADRANGE in   VARCHAR2,
                          pi_MEARIMWIDTH in   NUMBER,
                          ps_REGROOVABLEIND in   VARCHAR2,
                          ps_PLANTPRODUCED in   VARCHAR2,
                          pd_MOSTRECENTTESTDATE in   DATE,
                          ps_IMARK in   VARCHAR2,                         
                          ps_INFORMENUMBER in   VARCHAR2,
                          pd_FECHADATE in   DATE,
                          ps_TREADPATTERN in   VARCHAR2,
                          ps_SPECIALPROTECTIVEBAND in   VARCHAR2,
                          ps_NOMINALTIREWIDTH in   VARCHAR2,
                          ps_ASPECTRADIO in   VARCHAR2,
                          ps_TREADWEARINDICATORS in   VARCHAR2,
                          ps_NAMEOFMANUFACTURER in   VARCHAR2,
                          ps_FAMILY in   VARCHAR2,
                          pn_PPN in NUMBER,
                          ps_DOTSERIALNUMBER in   VARCHAR2,
                          ps_OperatorName   in Varchar2) as
  --Exception variables
      li_ParametersAreNull exception;      
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);  
      li_ParametersAreInvalid exception;      
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006); 
      
      ls_skuExists varchar2(1);
      
      ln_SkuID                  NUMBER;
      
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
  begin
       if ps_sku is null then
          raise li_ParametersAreNull;
       end if;
      
      if ps_sku = '' then
              raise li_ParametersAreInvalid;
        end if;
        
        if  ps_OperatorName   is not null or ps_OperatorName   <> '' then
            ls_OperatorId:=ps_OperatorName;
        end if;
     
     --ls_skuExists:=  TESTRESULTS_CRUD.CHECKIFPRODUCTEXISTS(ps_SKU => ps_SKU,pi_SKUID => pi_SKUID);
     ls_skuExists := 'N';
     
     if ls_skuExists = 'y' then
           UPDATE  PRODUCT SET 
                      SIZESTAMP      = ps_sizestamp,
                      DISCONTINUEDDATE = pd_discontinueddate,
                      SPECNUMBER     = ps_specnumber,
                      SPEEDRATING    = ps_speedrating,
                      SINGLOADINDEX  = ps_SINGLOADINDEX,
                      DUALLOADINDEX  = ps_dualloadindex,
                      BIASBELTEDRADIAL = ps_BIASBELTEDRADIAL,
                      TUBELESSYN     = ps_tubelessyn,
                      REINFORCEDYN   = ps_reinforcedyn,
                      EXTRALOADYN    = ps_extraloadyn,                     
                      UTQGTREADWEAR  = ps_utqgtreadwear,
                      UTQGTRACTION   = ps_utqgtraction,
                      UTQGTEMP       = ps_utqgtemp,
                      MUDSNOWYN      = ps_mudsnowyn,
                      RIMDIAMETER    = pi_rimdiameter,
                      SERIALDATE     = PD_SERIALDATE,
                      BRANDDESC      = PS_BRANDDESC,
                      LOADRANGE      = PS_LOADRANGE,
                      MEARIMWIDTH    = pi_MEARIMWIDTH,
                      REGROOVABLEIND = PS_REGROOVABLEIND,
                      PLANTPRODUCED  = PS_PLANTPRODUCED,
                      MOSTRECENTTESTDATE=PD_MOSTRECENTTESTDATE,
                      IMARK          = PS_IMARK   ,                           
                      ModifiedOn     = Sysdate,
                      ModifiedBy     = ls_OperatorId,
                      INFORMENUMBER  = ps_INFORMENUMBER,
                      FECHADATE      = pd_FECHADATE,
                      TREADPATTERN   = ps_TREADPATTERN,
                      SPECIALPROTECTIVEBAND = ps_SPECIALPROTECTIVEBAND,
                      NOMINALTIREWIDTH      = ps_NOMINALTIREWIDTH,
                      ASPECTRATIO           = ps_ASPECTRADIO,
                      TREADWEARINDICATORS   = ps_TREADWEARINDICATORS,
                      NAMEOFMANUFACTURER    = ps_NAMEOFMANUFACTURER,
                      FAMILY                = ps_FAMILY,
                      PPN                    = pn_PPN,
                      DOTSERIALNUMBER       = ps_DOTSERIALNUMBER
           WHERE SKU   =  ps_SKU And
                 SKUID = pi_SKUID;
     else
          SELECT SKUID_Seq.NextVal INTO ln_SkuID FROM DUAL;
          INSERT INTO  PRODUCT
                    (
                      SKUID,
                      SKU,
                      BRANDCODE,
                      TIRETYPEID,
                      NPRID,
                      SIZESTAMP,
                      DISCONTINUEDDATE,
                      SPECNUMBER,
                      SPEEDRATING,
                      SINGLOADINDEX,
                      DUALLOADINDEX,
                      BIASBELTEDRADIAL,
                      TUBELESSYN,
                      REINFORCEDYN,
                      EXTRALOADYN,                      
                      UTQGTREADWEAR,
                      UTQGTRACTION,
                      UTQGTEMP,
                      MUDSNOWYN,
                      RIMDIAMETER,
                      SERIALDATE,
                      BRANDDESC,
                      LOADRANGE,
                      MEARIMWIDTH,
                      REGROOVABLEIND,
                      PLANTPRODUCED,
                      MOSTRECENTTESTDATE,
                      IMARK,
                      INFORMENUMBER,
                      FECHADATE,
                      TREADPATTERN,
                      SPECIALPROTECTIVEBAND,
                      NOMINALTIREWIDTH,
                      ASPECTRATIO,
                      TREADWEARINDICATORS,
                      NAMEOFMANUFACTURER,
                      FAMILY,
                      PPN,
                      DOTSERIALNUMBER,
                      CreatedBy
                    )
                    VALUES
                    (
                     ln_SkuID,
                      ps_SKU,
                      ps_BRANDCODE,
                      pi_TIRETYPEID    ,
                      pi_NPRID ,
                      ps_SIZESTAMP,
                      pd_DISCONTINUEDDATE,
                      ps_SPECNUMBER,
                      ps_SPEEDRATING    ,
                      ps_SINGLOADINDEX,
                      ps_DUALLOADINDEX    ,
                      ps_BIASBELTEDRADIAL    ,
                      ps_TUBELESSYN        ,
                      ps_REINFORCEDYN      ,
                      ps_EXTRALOADYN    ,                      
                      ps_UTQGTREADWEAR,
                      ps_UTQGTRACTION    ,
                      ps_UTQGTEMP    ,
                      ps_MUDSNOWYN,
                      pi_RIMDIAMETER,
                      PD_SERIALDATE,
                      PS_BRANDDESC,
                      PS_LOADRANGE,
                      pi_MEARIMWIDTH,
                      PS_REGROOVABLEIND,
                      PS_PLANTPRODUCED,
                      PD_MOSTRECENTTESTDATE,
                      PS_IMARK,
                      ps_INFORMENUMBER,
                      pd_FECHADATE,
                      ps_TREADPATTERN,
                      ps_SPECIALPROTECTIVEBAND,
                      ps_NOMINALTIREWIDTH,
                      ps_ASPECTRADIO,
                      ps_TREADWEARINDICATORS,
                      ps_NAMEOFMANUFACTURER,
                      ps_FAMILY,
                      pn_PPN,
                      ps_DOTSERIALNUMBER,
                      ls_OperatorId
                     );
     
     end if;
  
   EXCEPTION
        when li_ParametersAreNull then
           
            ls_ErrorMsg:=  sqlerrm || '-Product_Save. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.Product_Save',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);  
            raise_application_error (-20005,sqlerrm);
            
         when li_ParametersAreInvalid then           
            ls_ErrorMsg:=  sqlerrm || '-Product_Save. There is at least one parameters invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.Product_Save',
                AX_RECORDDATA    => 'There is at least one parameters invalid.',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);  
            raise_application_error (-20006,sqlerrm);           
            
         when others then            
              ls_ErrorMsg:=  sqlerrm || '-Product_Save. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.Product_Save',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
                 raise_application_error (-20007,ls_ErrorMsg);
  end Product_Save;

END PROD_COUNTRY_LOAD;
/

create or replace PACKAGE           reports_package as
/************************************************************************************************
 package Name - Reports_Package
 Change History
  --------------------------------------------------------------------------
  Version No  Date          Author    Description
  ---------------------------------------------------------------------------
      1.0                             Intial Version
      1.1     10/02/2012     Krishna   - As per PRJ3617 Added
                                       1.GetCertificateReportInfoBySKU
                                          - Replaced ps_Sku with ps_Matl_Num
                                          - Replaced ps_BrandCode with ps_Brand and ps_Brand_Line
                                       2.getEceSimilarCertificates
                                         - Replaced ps_in_sku with ps_Matl_Num
                                       3. GetImarkSamplingAndTestsInfo
                                           - Replaced ps_Sku with ps_Matl_Num
      1.2     11/11/2013    Harini      - Added new paramter ps_IncludeArchived in GetTraceabilityReportInfo
                                        procedure
*************************************************************************************************/


  Type retCursor is ref cursor;
  procedure GetEmarkReportPassengerInfo(pc_Certificate out retCursor,
                                   pc_Brand out retCursor,
                                   pc_Product out retCursor,
                                   pc_CertificateDfValue out retcursor,
                                   pc_skudetailscount out  retcursor,
                                   ps_certificateNumber in varchar2,
                                   ps_extension in varchar2,
                                   pi_certificationTypeID in number,
                                   ps_Operatorid in varchar2,
                                   pi_TireTypeID in number
                                   );
     procedure GetImarkReportPassengerInfo(pc_Certificate out retCursor,
                                           pc_Brand out retCursor,
                                           pc_Product out retCursor,
                                           pc_CertificateDfValue out retcursor,
                                           pc_ProdBrandList out retcursor);

    procedure GetImarkSamplingAndTestsInfo(pc_Certificate out retCursor,
                                           pc_Product out retCursor,
                                           pc_MeasureHdr out retCursor,
                                           pc_MeasureDtl out retCursor,
                                           pc_TreadWearHdr out retCursor,
                                           pc_TreadWearDtl out retCursor,
                                           pc_HighSpeedHdr out retCursor,
                                           pc_HighSpeedDtl out retCursor,
                                           pc_CertificateDfValue out retcursor,
                                           --ps_sku           in varchar2
                                           ps_Matl_Num  in varchar2 -- Added as per PRJ3617
                                          );

    procedure GetCCCSequentialReportInfo(pc_Certificate out retCursor,
                                         pc_Brand out retCursor,
                                         pc_Product out retCursor,
                                         pc_CertificateDfValue out retcursor,
                                         ps_certificateNumber in varchar2,
                                         ps_extension in varchar2,
                                         pi_certificationTypeID in number,
                                         ps_Operatorid in varchar2
                                        );

    procedure GetCCCProductDescReportInfo(pc_Certificate out retCursor,
                                         pc_Brand out retCursor,
                                         pc_Product out retCursor,
                                         pc_CertificateDfValue out retcursor,
                                         ps_certificateNumber in varchar2,
                                         ps_extension in varchar2,
                                         pi_certificationTypeID in number,
                                         ps_Operatorid in varchar2
                                        );


    procedure GetGSOPassengerReport(   pc_Certificate out retCursor,
                                       pc_Brand out retCursor,
                                       pc_SkuList out retCursor,
                                       pc_Product out retCursor,
                                       pc_CertificateDfValue out retcursor,
                                       pc_MeasureHDR out retcursor,
                                       pc_PlungerHDR out retcursor,
                                       pc_beadunseathdr out retcursor,
                                       pc_treadwearhdr out retcursor,
                                       pc_endurance out retcursor,
                                       pc_highspeedhdr out retcursor,
                                       ps_certificateNumber in varchar2,
                                       ps_extension in varchar2,
                                       pi_certificationTypeID in number,
                                       ps_Operatorid in varchar2,
                                       pi_TireTypeId in number
                                       );

  PROCEDURE GetCertificateReportInfoBySKU(  pc_Product       out retCursor,
                                             pc_Certificate   out retCursor,
                                             PC_TESTREFERENCE out retCursor,
                                             --ps_sku           in varchar2,
                                             ps_Matl_Num      in varchar2, -- Added as per PRJ3617
                                             ps_Operatorid    in varchar2,
                                             --ps_BrandCode     in varchar2,
                                             ps_Brand         in varchar2,-- Added as per PRJ3617
                                             ps_Brand_Line    in varchar2,-- Added as per PRJ3617
                                             ps_CertType      in varchar2);


 procedure GetImarkCertificationInfo(pc_ImarkCertification out retcursor,pd_DateSearchCriteria in date) ;


 procedure GetEmarkCertificationInfo(
                                     pc_EmarkCertification out retcursor,
                                     pc_Product out retcursor,
                                     ps_certificateNumber in varchar2,
                                     ps_BrandCode     in varchar2) ;

 Procedure GetEmarkPassengerWithTR( ps_CertificateNumber in varchar2,
                                     pi_tiretypeid        in number,
                                     pc_CertificateDfValue  out retCursor,
                                     pc_CertificateInfo   out retCursor,
                                     pc_Product           out retcursor,
                                     pc_MeasureHDR        out retCursor,
                                     pc_measureDtl        out retCursor,
                                     pc_BEADUNSEATHDR     out retCursor,
                                     pc_BEADUNSEATDTL     out retCursor,
                                     pc_PLUNGERHDR        out retCursor,
                                     pc_PLUNGERDTL        out retCursor,
                                     pc_TREADWEARHDR      out retCursor,
                                     pc_TREADWEARDTL      out retCursor,
                                     pc_ENDURANCEHDR      out retCursor,
                                     pc_ENDURANCEDTL      out retCursor,
                                     pc_HIGHSPEEDHDR      out retCursor,
                                     pc_HIGHSPEEDDTL      out retCursor,
                                     pc_SPEEDTESTDETAIL   out retCursor,
                                     pc_Brand             out retCursor) ;

 procedure GetTraceabilityReportInfo(pc_Traceability out retcursor,
                                      ps_CertificateNumber in varchar2,
                                      pi_certificationTypeID in number,
                                      ps_IncludeArchived in varchar2 );
 procedure GetAuthenticityReportInfo(pc_Authenticity out retcursor);
 procedure GetExceptionReportInfo(pc_Exception out retcursor);
 procedure CompareSKUMainProductColumns ;

 procedure GetEmark117Info(pc_Certificate out retCursor,
                            pc_Brand out retCursor,
                            pc_Product out retCursor,
                            pc_CertificateDfValue out retcursor,
                            pc_skudetailscount out retcursor,
                            ps_certificateNumber in varchar2,
                            ps_extension in varchar2,
                            pi_certificationTypeID in number,
                            ps_Operatorid in varchar2,
                            pi_TireTypeID in number);
 Procedure GetEmarkTestReportInfo( ps_CertificateNumber in varchar2,
                                     pi_tiretypeid        in number,
                                     pc_CertificateDfValue  out retCursor,
                                     pc_CertificateInfo   out retCursor,
                                     pc_Product           out retcursor,
                                     pc_MeasureHDR        out retCursor,
                                     pc_measureDtl        out retCursor,
                                     pc_BEADUNSEATHDR     out retCursor,
                                     pc_BEADUNSEATDTL     out retCursor,
                                     pc_PLUNGERHDR        out retCursor,
                                     pc_PLUNGERDTL        out retCursor,
                                     pc_TREADWEARHDR      out retCursor,
                                     pc_TREADWEARDTL      out retCursor,
                                     pc_ENDURANCEHDR      out retCursor,
                                     pc_ENDURANCEDTL      out retCursor,
                                     pc_HIGHSPEEDHDR      out retCursor,
                                     pc_HIGHSPEEDDTL      out retCursor,
                                     pc_SPEEDTESTDETAIL   out retCursor,
                                     pc_Brand             out retCursor) ;

Procedure GetNOMCertification( ps_CertificateNumber in varchar2,
                                     pi_tiretypeid        in number,
                                     pc_CertificateDfValue  out retCursor,
                                     pc_CertificateInfo   out retCursor,
                                     pc_Product           out retcursor,
                                     pc_MeasureHDR        out retCursor,
                                     pc_measureDtl        out retCursor,
                                     pc_BEADUNSEATHDR     out retCursor,
                                     pc_BEADUNSEATDTL     out retCursor,
                                     pc_PLUNGERHDR        out retCursor,
                                     pc_PLUNGERDTL        out retCursor,
                                     pc_TREADWEARHDR      out retCursor,
                                     pc_TREADWEARDTL      out retCursor,
                                     pc_ENDURANCEHDR      out retCursor,
                                     pc_ENDURANCEDTL      out retCursor,
                                     pc_HIGHSPEEDHDR      out retCursor,
                                     pc_HIGHSPEEDDTL      out retCursor,
                                     pc_SPEEDTESTDETAIL   out retCursor,
                                     pc_Brand             out retCursor) ;
  Procedure GetEmarkApplicationInfo( ps_CertificateNumber in varchar2,
                                     pi_tiretypeid        in number,
                                     pc_CertificateDfValue  out retCursor,
                                     pc_CertificateInfo   out retCursor,
                                     pc_Product           out retcursor,
                                     pc_MeasureHDR        out retCursor,
                                     pc_HIGHSPEEDHDR     out retCursor,
                                     pc_Brand             out retCursor) ;

   procedure GetGSOConformityReport(   pc_Certificate out retCursor,
                                       pc_Brand out retCursor,
                                       pc_SkuList out retCursor,
                                        ps_BatchNumber in varchar2,
                                       pi_certificationTypeID in number,
                                       ps_Operatorid in varchar2,
                                       pi_TireTypeId in number
                                       ) ;

   PROCEDURE getEceSimilarCertificates
    (ps_matl_num               IN  VARCHAR2, -- Replaced ps_in_sku with ps_matl_num as per PRJ3617
     pc_SimilarCertificates   out retCursor);
    PROCEDURE SETIMARKFLAG (
             pi_certificateid in number);
end reports_package;
/

create or replace PACKAGE BODY           reports_package as

procedure GetEmarkReportPassengerInfo(pc_Certificate out retCursor,
                                       pc_Brand out retCursor,
                                       pc_Product out retCursor,
                                       pc_CertificateDfValue out retcursor,
                                       pc_skudetailscount out  retcursor,
                                       ps_certificateNumber in varchar2,
                                       ps_extension in varchar2,
                                       pi_certificationTypeID in number,
                                       ps_Operatorid in varchar2,
                                       pi_TireTypeID in number)
as
/************************************************************************************************
 Procedure Name - GetEmarkReportPassengerInfo
 Change History
  --------------------------------------------------------------------------
  Version No  Date          Author    Description
  ---------------------------------------------------------------------------
      1.0                             Intial Version
      1.1     9/17/2012     Krishna   - As per PRJ3617 Added
                                        - Matl_Num wherever SKU is available in Select list of the query
                                        - Replaced Brand_View with Query
      1.2     11/20/2013     Guru    - 1.Change the cursor pc_Certificate such that if extension is null or empty
                                      find the current extension else take the input extension.
                                      2. In pc_brand,pc_skudetailscount,pc_Product cursors add this
                                      ' AND lower(extension_en) <= lower(ls_extension) ' in where clause.
*************************************************************************************************/


      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);

      ls_extension varchar2(30);
      ln_CertficateCount   NUMBER;
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
  begin
      if ps_certificateNumber is null or
          pi_certificationTypeID is null then
          raise li_ParametersAreNull ;
      end if;

       if ps_certificateNumber ='' or
          pi_certificationTypeID  <= 0 then
          raise li_ParametersAreNull ;
      end if;

      if ps_Operatorid is not null or
         ps_Operatorid <> '' then
          ls_OperatorId:=ps_Operatorid;
      end if;



      ---make sure certificate number is of correct type and tire type
       select count(*) into ln_CertficateCount from
               certificate ce
                     inner join productcertificate pc
                           on CE.CERTIFICATEID = PC.CERTIFICATEID
                     inner join product p
                           on PC.SKUID = p.skuid
       Where ce.CERTIFICATIONTYPEID = 1 And
                 ----  lower(ce.certificatenumber) = lower(ps_certificateNumber) and
                  ---CE.EXTENSION_EN = 0 and
                 UPPER(CE.MOSTRECENTCERT) = 'Y' AND
                  P.TIRETYPEID = pi_tiretypeid;
      if ln_CertficateCount > 0 then

           IF ps_extension is null or ps_extension = '' then

              ---find current extension
              select  extension_en  into ls_extension
                  from certificate ce
                  where lower(ce.certificatenumber) = lower(ps_certificateNumber) and
                    ce.certificationtypeid = pi_certificationTypeID and
                    lower(ce.mostrecentcert) = 'y';
          else
                ls_extension := ps_extension;

          end if ;

          Open pc_Certificate for
                select distinct(CE.certificatenumber),ce.extension_en,
                CE.SUPPLEMENTALMOLDSTAMPING_E,CE.CERTDATESUBMITTED,
                CE.CERTDATEAPPROVED
                                from  certificate ce
                     inner join productcertificate pce on
                           ce.certificateid       = pce.certificateid and
                           ce.certificationtypeid = pce.certificationtypeid
                     inner join product p on
                               pce.skuid = p.skuid
                where lower(ce.certificatenumber) = lower(ps_certificateNumber) and
                      ce.certificationtypeid = pi_certificationTypeID  And
                      LOWER(CE.EXTENSION_EN) <= LOWER(ls_extension) ;
                     --jes and  p.tiretypeid = pi_TireTypeID;

          -- Gets the brand information
          Open pc_brand for
          -- As per PRJ3617 added query instead of Brand_View
          SELECT *
          FROM  ( SELECT DISTINCT  p.Brand
                                  ,p.Brand_Line
                                  ,c.CertificateNumber
                                  ,c.Extension_En
                    FROM  Product p,
                          ProductCertificate pc,
                          Certificate c
                    WHERE c.CertificateId = pc.CertificateId
                      AND pc.SkuId = p.SkuId)
          WHERE lower(certificatenumber) = lower(ps_certificateNumber)
            AND lower(extension_en) <= lower(ls_extension)  ;

          -- Gets the pc_Product information
           --TODO: ERASE ROWNUM < 2
--          Open pc_Product for
--          SELECT  *
--          FROM  PRODUCTDATA_REPORT_VIEW
--          where lower(certificatenumber) = lower(ps_certificateNumber)  and
--                TireTypeID = pi_tiretypeid and rownum < 2;

     --- get number of different sku characteristics -- these should be all the same across all
     ---skus for this certificate, but if they aren't we want to show an error page on the report.
     open pc_skudetailscount for
     select ps_certificateNumber certificateNumber, count(*)  numdistinctattrib from
        (select distinct p.sizestamp, P.SPEEDRATING, NVL(P.SINGLOADINDEX,0) ,
                          NVL(P.DUALLOADINDEX,0), P.MUDSNOWYN, P.BIASBELTEDRADIAL
              FROM PRODUCT p, PRODUCTCERTIFICATE pc, CERTIFICATE ce
              WHERE
                   P.SKUID = PC.SKUID
                   AND PC.CERTIFICATEID = CE.CERTIFICATEID
                   AND  lower(ce.certificatenumber) = lower(ps_certificateNumber)
                    and lower(extension_en) <= lower(ls_extension)) ;

     Open pc_Product for
            -- Added Matl_Num as per PRJ3617
            SELECT ce.certificatenumber,extension_en,ROWNUM, p.skuid, sku, LPAD(p.matl_num,18,0) AS Matl_Num, p.sizestamp, P.SPEEDRATING,
                          NVL(P.SINGLOADINDEX,0) SINGLOADINDEX,
                          NVL(P.DUALLOADINDEX,0)  DUALLOADINDEX, P.MUDSNOWYN, P.BIASBELTEDRADIAL,
                          P.REINFORCEDYN, P.EXTRALOADYN
              FROM PRODUCT p, PRODUCTCERTIFICATE pc, CERTIFICATE ce
              WHERE
                   P.SKUID = PC.SKUID
                   AND PC.CERTIFICATEID = CE.CERTIFICATEID
                   AND  lower(ce.certificatenumber) = lower(ps_certificateNumber)
                   and lower(extension_en) <= lower(ls_extension) ;

          --Gets the default values information.
            OPen pc_CertificateDfValue for
            SELECT CERTIFICATENUMBER,
                    MAX(DECODE(fieldid,1,fieldvalue,NULL)) MANUFACTURERNAME_E,
                    MAX(DECODE(fieldid,2,fieldvalue,NULL)) MANUFACTURERNAMEADDRESS_E,
                    MAX(DECODE(fieldid,3,fieldvalue,NULL)) TECHNICALSERVICE_E,
                    MAX(DECODE(fieldid,4,fieldvalue,NULL)) PLACE_E,
                    MAX(DECODE(fieldid,5,fieldvalue,NULL)) MEASURERIM_E,
                    MAX(DECODE(fieldid,6,fieldvalue,NULL)) INFLATIONPRESSURE_E,
                    MAX(DECODE(fieldid,7,fieldvalue,NULL)) TESTLABORATORY_E,
                    MAX(DECODE(fieldid,8,fieldvalue,NULL)) REPRESENTATIVENAME_E,
                    MAX(DECODE(fieldid,9,fieldvalue,NULL)) REPRESENTATIVEADDRESS_E,
                    MAX(DECODE(fieldid,10,fieldvalue,NULL)) REASONOFEXTENSION_E,
                    MAX(DECODE(fieldid,11,fieldvalue,NULL)) REMARKS_E,
                    MAX(DECODE(fieldid,175,fieldvalue,NULL)) PPNPROFILEFAMILY_E,
                    MAX(DECODE(fieldid,176,fieldvalue,NULL)) RIMSMOUNTED_E,
                    MAX(DECODE(fieldid,177,fieldvalue,NULL)) OVERALLDIMENSIONSTYPE_E,
                    MAX(DECODE(fieldid,178,fieldvalue,NULL)) REFERENCETIRE_E
            FROM (
                SELECT fieldid,
                         certificationtypeid,
                         certificatenumber,
                         fieldvalue
                    FROM defaultvalues_view dv
                    WHERE LOWER(certificatenumber) = LOWER(ps_certificateNumber) AND
                            certificationtypeid = pi_certificationTypeID
             )
             GROUP BY certificatenumber;
        end if;

  EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:=  ' There is at least one parameters null.'  ;
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' Reports_Package.GetInfoReportPassenger',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20005,ls_ErrorMsg);

         when li_ParametersAreInvalid then
            ls_ErrorMsg:=  sqlerrm || ' There is at least one parameters invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' Reports_Package.GetInfoReportPassenger',
                AX_RECORDDATA    => 'There is at least one parameters invalid.',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20006,ls_ErrorMsg);

         when others then
              ls_ErrorMsg:= sqlerrm ||  'An error have ocurred.(when others)' || sqlerrm;
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' Reports_Package.GetInfoReportPassenger',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);

  end GetEmarkReportPassengerInfo;

 procedure GetEmark117Info(pc_Certificate out retCursor,
                            pc_Brand out retCursor,
                            pc_Product out retCursor,
                            pc_CertificateDfValue out retcursor,
                            pc_skudetailscount out retcursor,
                            ps_certificateNumber in varchar2,
                            ps_extension in varchar2,
                            pi_certificationTypeID in number,
                            ps_Operatorid in varchar2,
                            pi_TireTypeID in number) as
/************************************************************************************************
 Procedure Name - GetEmark117Info
 Change History
  --------------------------------------------------------------------------
  Version No  Date          Author    Description
  ---------------------------------------------------------------------------
      1.0                             Intial Version
      1.1     11/20/2013     Guru    - 1.Change the cursor pc_Certificate such that if extension is null or empty
                                      find the current extension else take the input extension.
                                      2. In pc_brand,pc_skudetailscount,pc_Product cursors add this
                                      ' AND lower(extension_en) <= lower(ls_extension) ' in where clause.
*************************************************************************************************/
      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      ls_extension VARCHAR2(30);
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);

  begin
       if ps_certificateNumber is null or
          pi_certificationTypeID is null then
          raise li_ParametersAreNull ;
       end if;

       if ps_certificateNumber ='' or
          pi_certificationTypeID  <= 0 then
          raise li_ParametersAreNull ;
      end if;

      if ps_Operatorid is not null or
         ps_Operatorid <> '' then
          ls_OperatorId:=ps_Operatorid;
      end if;

          if ps_extension is null or ps_extension = '' then

              ---find current extension
              select  extension_en  into ls_extension
                  from certificate ce
                  where lower(ce.certificatenumber) = lower(ps_certificateNumber) and
                    ce.certificationtypeid = pi_certificationTypeID and
                    lower(ce.mostrecentcert) = 'y' ;
          else
                ls_extension := ps_extension;
          end if ;

            Open pc_Certificate for
                select distinct(CE.certificatenumber),ce.extension_en,
                CE.SUPPLEMENTALMOLDSTAMPING_E,CE.CERTDATESUBMITTED,
                CE.CERTDATEAPPROVED
                                from  certificate ce
                     inner join productcertificate pce on
                           ce.certificateid       = pce.certificateid and
                           ce.certificationtypeid = pce.certificationtypeid
                     inner join product p on
                               pce.skuid = p.skuid
                where lower(ce.certificatenumber) = lower(ps_certificateNumber) and
                      ce.certificationtypeid = pi_certificationTypeID  And
                      LOWER(CE.EXTENSION_EN) <= LOWER(ls_extension) ;
  --LOWER(CE.EXTENSION_EN) <= LOWER(ls_extension) ;
                     --jes and  p.tiretypeid = pi_TireTypeID;

          -- Gets the brand information
          Open pc_brand for
          SELECT distinct brandcode, brandname, certificatenumber
          FROM   brand_view
          where lower(certificatenumber) = lower(ps_certificateNumber)
          and lower(extension_en) <= lower(ls_extension)  ;

     open pc_skudetailscount for
     select ps_certificateNumber certificateNumber, count(*)  numdistinctattrib from
        (select distinct p.sizestamp, P.SPEEDRATING, NVL(P.SINGLOADINDEX,0) ,
                          NVL(P.DUALLOADINDEX,0), P.MUDSNOWYN, P.BIASBELTEDRADIAL
              FROM PRODUCT p, PRODUCTCERTIFICATE pc, CERTIFICATE ce
              WHERE
                   P.SKUID = PC.SKUID
                   AND PC.CERTIFICATEID = CE.CERTIFICATEID
                   AND  lower(ce.certificatenumber) = lower(ps_certificateNumber)
                    and lower(extension_en) <= lower(ls_extension)) ;

     Open pc_Product for
            SELECT ce.certificatenumber,extension_en,ROWNUM, p.skuid, sku, p.sizestamp, P.SPEEDRATING,
                          NVL(P.SINGLOADINDEX,0) SINGLOADINDEX,
                          NVL(P.DUALLOADINDEX,0)  DUALLOADINDEX, P.MUDSNOWYN, P.BIASBELTEDRADIAL,
                          P.RIMDIAMETER,
                          P.MEARIMWIDTH, P.NOMINALTIREWIDTH, P.ASPECTRATIO
              FROM PRODUCT p, PRODUCTCERTIFICATE pc, CERTIFICATE ce
              WHERE
                   P.SKUID = PC.SKUID
                   AND PC.CERTIFICATEID = CE.CERTIFICATEID
                   AND  lower(ce.certificatenumber) = lower(ps_certificateNumber)
                   and lower(extension_en) <= lower(ls_extension) ;





--
--
--          -- Gets the pc_Product information
--           --TODO: ERASE ROWNUM < 2
--          Open pc_Product for
--          SELECT  *
--          FROM  productdata_report_view
--          where lower(certificatenumber) = lower(ps_certificateNumber)  and
--                TireTypeID = pi_tiretypeid and rownum < 2;
--

         --Gets the default values information.
           Open pc_CertificateDfValue for
           SELECT CERTIFICATENUMBER,
                   MAX(DECODE(fieldid,1,fieldvalue,NULL))MANUFACTURERNAME_E,
                  MAX(DECODE(fieldid,2,fieldvalue,NULL)) MANUFACTURERNAMEADDRESS_E,
                   MAX(DECODE(fieldid,3,fieldvalue,NULL))TECHNICALSERVICE_E,
                   MAX(DECODE(fieldid,4,fieldvalue,NULL))PLACE_E,
                   MAX(DECODE(fieldid,5,fieldvalue,NULL))MEASURERIM_E,
                  MAX(DECODE(fieldid,6,fieldvalue,NULL)) INFLATIONPRESSURE_E,
                   MAX(DECODE(fieldid,7,fieldvalue,NULL))TESTLABORATORY_E,
                   MAX(DECODE(fieldid,8,fieldvalue,NULL))REPRESENTATIVENAME_E,
                   MAX(DECODE(fieldid,9,fieldvalue,NULL))REPRESENTATIVEADDRESS_E,
                   MAX(DECODE(fieldid,10,fieldvalue,NULL))REASONOFEXTENSION_E,
                   MAX(DECODE(fieldid,11,fieldvalue,NULL))REMARKS_E,
                   MAX(DECODE(fieldid,165,fieldvalue,NULL))REPRTNUMBERISSUEDBYSERVICE_E,
                   MAX(DECODE(fieldid,166,fieldvalue,NULL))SOUNDLEVEL_E,
                   MAX(DECODE(fieldid,167,fieldvalue,NULL))REFERENCESPEED_E,
                  MAX(DECODE(fieldid,168,fieldvalue,NULL)) APPLICANTNAMEADDRESS_E,
                   MAX(DECODE(fieldid,169,fieldvalue,NULL))PERFORMANCECHARACTERISTICS_E,
                   MAX(DECODE(fieldid,170,fieldvalue,NULL))PLANTSADDRESSES_E,
                   MAX(DECODE(fieldid,171,fieldvalue,NULL))TIRESIZEDESIGNATIONS_E,
                   MAX(DECODE(fieldid,172,fieldvalue,NULL))ZONEA_E,
                   MAX(DECODE(fieldid,173,fieldvalue,NULL))ZONEB_E,
                  MAX(DECODE(fieldid,174,fieldvalue,NULL)) ZONEC_E,
                   MAX(DECODE(fieldid,175,fieldvalue,NULL))PPNPROFILEFAMILY_E,
                  MAX(DECODE(fieldid,176,fieldvalue,NULL)) RIMSMOUNTED_E,
                  MAX(DECODE(fieldid,177,fieldvalue,NULL)) OVERALLDIMENSIONSTYPE_E,
                   MAX(DECODE(fieldid,178,fieldvalue,NULL))REFERENCETIRE_E,
                  MAX(DECODE(fieldid,184,fieldvalue,NULL)) WETADHESION_E,
                   MAX(DECODE(fieldid,185,fieldvalue,NULL))SECTIONWIDTHRANGE_E,
                   MAX(DECODE(fieldid,186,fieldvalue,NULL))LOADRANGE_E
            FROM (
                SELECT fieldid,
                         certificationtypeid,
                         certificatenumber,
                         fieldvalue
                    FROM defaultvalues_view dv
                    WHERE LOWER(certificatenumber) = LOWER(ps_certificateNumber) AND
                            certificationtypeid = pi_certificationTypeID
             )
             GROUP BY certificatenumber;


--            FROM EMARKECE117_VIEW
--            WHERE lower(CERTIFICATENUMBER) = lower(ps_certificateNumber);



   EXCEPTION
         when li_ParametersAreNull then
            ls_ErrorMsg:= sqlerrm ||  ' - GetEmark117Info. There is at least one parameters null.'  ;
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' Reports_Package.GetEmark117Info',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20005,ls_ErrorMsg);

         when li_ParametersAreInvalid then
            ls_ErrorMsg:=  sqlerrm ||  ' - GetEmark117Info. There is at least one parameters invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' Reports_Package.GetEmark117Info',
                AX_RECORDDATA    => 'There is at least one parameters invalid.',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20006,ls_ErrorMsg);

        when others then
                    ls_ErrorMsg:= sqlerrm ||  ' - GetEmark117Info. An error have ocurred.(when others)' || sqlerrm;
                     APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                            ad_OPERATORID => ls_OperatorId,
                            AD_DATERECORDED  => sysdate,
                            AS_PROCESSNAME   =>' Reports_Package.GetEmark117Info',
                            AX_RECORDDATA    => 'An error have ocurred.(when others)',
                            AS_MESSAGECODE   => to_char(sqlcode),
                            AS_MESSAGE       =>ls_ErrorMsg);
                     raise_application_error (-20007,ls_ErrorMsg);
  end GetEmark117Info;

   procedure GetImarkReportPassengerInfo(pc_Certificate out retCursor,
                                       pc_Brand out retCursor,
                                       pc_Product out retCursor,
                                       pc_CertificateDfValue out retcursor,
                                       pc_ProdBrandList out retcursor
                                       )
   as
  /************************************************************************************************
   Procedure Name - GetImarkReportPassengerInfo
   Change History
    --------------------------------------------------------------------------
    Version No  Date          Author    Description
    ---------------------------------------------------------------------------
        1.0                             Intial Version
        1.1     9/17/2012     Krishna   - As per PRJ3617
                                          - Replaced NPRID with PSN
                                          - Replaced Brand_View with Query
                                          - Added Matl_Num Where SKU exist
                                          - Added Brand, Brand_Line columns instead of Brandcode and BrandDesc
  *************************************************************************************************/

      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);

      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      ls_LatestImarkCertificateNum varchar2(20);
      ln_LatestImarkCertificateID number;
      ln_extension number;
  begin
      --- ls_LatestImarkCertificateNum := ICS_COMMON_FUNCTIONS.GETLATESTIMARKCERTIFICATENUM();
       ln_LatestImarkCertificateID:= ICS_COMMON_FUNCTIONS.GETLATESTIMARKCERTIFICATEID();
      if     ln_LatestImarkCertificateID is null or ln_LatestImarkCertificateID = 0 then
          ---ls_LatestImarkCertificateNum:='NotFound';
            ln_LatestImarkCertificateID:=0;
      end if;

           select CE.extension_en into ln_extension
              from  certificate ce
              where certificateid = ln_LatestImarkCertificateID And
                    ce.certificationtypeid = 4 ;
           select CE.certificatenumber into ls_LatestImarkCertificateNum
              from  certificate ce
              where certificateid = ln_LatestImarkCertificateID And
                    ce.certificationtypeid = 4 ;

              Open pc_Certificate for
              select CE.certificatenumber,ce.extension_en,' ' family_i ---ce.family_i jes
              from  certificate ce
              where certificateid = ln_LatestImarkCertificateID And
                    ce.certificationtypeid = 4 ;

               -- Gets the brand information
               -- As per PRJ3617, Replaced query instead of Brand_View
              Open pc_brand for
              SELECT *
              FROM  ( SELECT DISTINCT  p.Brand
                                      ,p.Brand_Line
                                      ,c.CertificateNumber
                                      ,c.Extension_En
                      FROM  Product p,
                            ProductCertificate pc,
                            Certificate c
                      WHERE c.CertificateId = pc.CertificateId
                        AND pc.SkuId = p.SkuId)
              WHERE lower(certificatenumber) = lower(ls_LatestImarkCertificateNum)
                AND extension_en =  ln_extension ;

              --TODO: ERASE ROWNUM < 2
               Open pc_Product for
                SELECT P.SKUID,
                      SKU,
                      LPAD(MATL_NUM,18,0) AS MATL_NUM, -- Added as per PRJ3617
                      --BRANDCODE,
                      BRAND,       -- Added as per PRJ3617
                      BRAND_LINE,  -- Added as per PRJ3617
                      TIRETYPEID,
                      --NPRID,
                      PSN, -- Added As per PRJ3617
                      SIZESTAMP,
                      DISCONTINUEDDATE,
                      SPECNUMBER,
                      SPEEDRATING,
                      SINGLOADINDEX,
                      DUALLOADINDEX,
                      BIASBELTEDRADIAL,  --JES
                      TUBELESSYN,
                      REINFORCEDYN,
                      EXTRALOADYN,
                      UTQGTREADWEAR,
                      UTQGTRACTION,
                      UTQGTEMP,
                      MUDSNOWYN,
                      RIMDIAMETER,
                      SERIALDATE,
                      --BRANDDESC, Removed as per PRJ3617
                      LOADRANGE,
                      MEARIMWIDTH,
                      REGROOVABLEIND,
                      PLANTPRODUCED,
                      MOSTRECENTTESTDATE,
                      IMARK,
                      INFORMENUMBER,
                      FECHADATE,
                      TREADPATTERN,
                      SPECIALPROTECTIVEBAND,
                      NOMINALTIREWIDTH,
                      ASPECTRATIO,
                      TREADWEARINDICATORS,
                      NAMEOFMANUFACTURER,
                      FAMILY||' -'||FAMILY_CODE FAMILY,
                      DOTSERIALNUMBER,
                      CERTIFICATENUMBER,
                      EXTENSION_EN,
                    CASE
                      WHEN  PCE.DATEREMOVED > PCE.DATESUBMITTED  THEN 'REMOVED'
                      WHEN PCE.DATEASSIGNED_EGI IS NOT NULL THEN 'ADDED'
                        ELSE ' '
                    END SKU_STATUS
               -- FROM PRODUCTDATA_REPORT_VIEW
                --where lower(certificatenumber) = lower(ls_LatestImarkCertificateNum) ;
              FROM product p
              INNER JOIN productcertificate pce
                     ON p.skuid = pce.skuid
              INNER JOIN certificate ce
                   ON pce.certificateid = ce.certificateid
                  AND pce.certificationtypeid = ce.certificationtypeid
              INNER JOIN imark_family if
                  on P.FAMILY = IF.FAMILY_ID
              where ce.certificateid = ln_LatestImarkCertificateID
              --AND TRIM(NVL(P.EMARKREFERENCE_I,' ')) <> '' ---HAS TO HAVE AN EMARK APPROVAL - JES 9/1/11
              AND P.EMARKREFERENCE_I IS NOT NULL
              AND ((PCE.DATESUBMITTED IS NULL AND
              PCE.DATEASSIGNED_EGI IS NOT NULL) OR
              PCE.DATEASSIGNED_EGI >   PCE.DATESUBMITTED OR
              PCE.DATEREMOVED > PCE.DATESUBMITTED  );



          --Gets the default values information.
            OPen pc_CertificateDfValue for
            SELECT CERTIFICATENUMBER,
                    MAX(DECODE(fieldid,91,fieldvalue,NULL)) SUPPLIERNAME_I,
                    MAX(DECODE(fieldid,92,fieldvalue,NULL)) COMPLETEADDRESS_I,
                    MAX(DECODE(fieldid,93,fieldvalue,NULL)) COUNTRYOFORIGIN_I,
                    MAX(DECODE(fieldid,94,fieldvalue,NULL)) TELEPHONE_I,
                    MAX(DECODE(fieldid,95,fieldvalue,NULL)) FAX_I,
                    MAX(DECODE(fieldid,96,fieldvalue,NULL)) MANUFACTURERNAME_I,
                    MAX(DECODE(fieldid,97,fieldvalue,NULL)) TECHNICALDEVELOPMENTCENTER_I,
                    MAX(DECODE(fieldid,98,fieldvalue,NULL)) APPLICANTNAME_I,
                    MAX(DECODE(fieldid,99,fieldvalue,NULL)) APPLICANTTITLE_I,
                    MAX(DECODE(fieldid,100,fieldvalue,NULL)) ASSOCIATEDPLANT_I,
                    MAX(DECODE(fieldid,101,fieldvalue,NULL)) OTHERASPECTS_I
            FROM (
                    SELECT FIELDID,
                          CERTIFICATIONTYPEID,
                          CERTIFICATENUMBER,
                          FIELDVALUE
                    FROM  defaultvalues_view
                    WHERE lower(certificatenumber) = lower(ls_LatestImarkCertificateNum) and
                          CERTIFICATIONTYPEID = 4
              )
            group by CERTIFICATENUMBER ;

--               Open pc_ProdBrandList for
--            Select *
--            From PRODBRANDLIST_VIEW v
--            where lower(v.certificateNUmber)= lower(ls_LatestImarkCertificateNum)  And
--                     v.certificationtypeid = 4 ;

          --Added Brand, Brand_Line instead of BrandDesc as per PRJ3617
          Open pc_ProdBrandList for
              SELECT SIZESTAMP,
              --BRANDDESC,
              Brand, -- Added as per PRJ3617
              Brand_Line,-- Added as per PRJ3617
              SPEEDRATING,
             SINGLOADINDEX,
             DUALLOADINDEX,
             ce.certificateNUmber,
             ce.certificationtypeid
     FROM product p
          INNER JOIN productcertificate pce
             ON p.skuid = pce.skuid
          INNER JOIN certificate ce
             ON pce.certificateid = ce.certificateid
                AND pce.certificationtypeid = ce.certificationtypeid
          WHERE  lower(ce.certificateNUmber)= lower(ls_LatestImarkCertificateNum)
                  AND ce.extension_en =  ln_extension
                  And ce.certificationtypeid = 4 ;


   ---SET THE IMARKFLAG on the product certificate table so that we know they
   ---printed the report at least once.  When the date submitted is set on the certificate,
   ---it only populates down to the product certificate records of the IMARKFLAG is set.
    SETIMARKFLAG(ln_LatestImarkCertificateID  );

  EXCEPTION
         when others then
              ls_ErrorMsg:=  'An error have ocurred.(when others)' || sqlerrm;
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' Reports_Package.GetIMarkReportPassengerInfo',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);

  end GetImarkReportPassengerInfo;


   procedure GetImarkSamplingAndTestsInfo(pc_Certificate out retCursor,
                                           pc_Product out retCursor,
                                           pc_MeasureHdr out retCursor,
                                           pc_MeasureDtl out retCursor,
                                           pc_TreadWearHdr out retCursor,
                                           pc_TreadWearDtl out retCursor,
                                           pc_HighSpeedHdr out retCursor,
                                           pc_HighSpeedDtl out retCursor,
                                           pc_CertificateDfValue out retcursor,
                                           --ps_sku           in varchar2
                                           ps_Matl_Num      in varchar2 -- Added as per PRJ3617
                                           )
    as
    /************************************************************************************************
     Procedure Name - GetImarkSamplingAndTestsInfo
     Change History
      --------------------------------------------------------------------------
      Version No  Date          Author    Description
      ---------------------------------------------------------------------------
          1.0                             Intial Version
          1.1     9/17/2012     Krishna   - As per PRJ3617
                                            - Replaced NPRID with PSN
                                            - Added ps_Matl_Num instead of ps_sku
                                            - Added Matl_Num where Sku exist
                                            - Added Brand, Brand_Line columns instead of Brandcode and BrandDesc
    *************************************************************************************************/

      --Exception variables
     li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);

      li_MeasureId  MeasureHdr.measureid%type;
      li_TreadWearId TREADWEARHDR.TREADWEARID%type;
      li_HighSpeedId HIGHSPEEDHDR.HIGHSPEEDID%type;

      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      ls_LatestImarkCertificateNum varchar2(20);
      ls_LatestImarkCertificateID number;
    begin


          --if ps_sku is null  then
          if ps_Matl_Num is null  then
          raise li_ParametersAreNull ;
       end if;

        --- ls_LatestImarkCertificateNum := ICS_COMMON_FUNCTIONS.GETLATESTIMARKCERTIFICATENUM();
           ls_LatestImarkCertificateID := ICS_COMMON_FUNCTIONS.GETLATESTIMARKCERTIFICATEID();
          if  ls_LatestImarkCertificateID = 0 or ls_LatestImarkCertificateID is null then
              ls_LatestImarkCertificateNum:='NotFound';
         else

          -- Gets Certificate information
              Open pc_Certificate for
              select CE.certificatenumber,ce.extension_en
              from  certificate ce
              where certificateid =ls_LatestImarkCertificateID And
                    ce.certificationtypeid = 4 ;

          select CE.certificatenumber into   ls_LatestImarkCertificateNum
              from  certificate ce
              where certificateid =ls_LatestImarkCertificateID And
                    ce.certificationtypeid = 4 ;

               -- Gets the Product information

              --TODO: ERASE ROWNUM < 2
          Open pc_Product for
             SELECT p.skuid,
          sku,
          LPAD(matl_num,18,0) AS matl_num, -- Added as per PRJ3617
          --brandcode,
          brand, -- Added as per PRJ3617
          brand_line, -- Added as per PRJ3617
          tiretypeid,
          --nprid,
          psn, -- Added as per PRJ3617
          sizestamp,
          discontinueddate,
          specnumber,
          speedrating,
          singloadindex,
          dualloadindex,
          biasbeltedradial,
          tubelessyn,
          reinforcedyn,
          extraloadyn,
          utqgtreadwear,
          utqgtraction,
          utqgtemp,
          mudsnowyn,
          rimdiameter,
          serialdate,
          --branddesc,
          loadrange,
          mearimwidth,
          regroovableind,
          plantproduced,
          mostrecenttestdate,
          imark,
          informenumber,
          fechadate,
          treadpattern,
          specialprotectiveband,
          nominaltirewidth,
          aspectratio,
          treadwearindicators,
          nameofmanufacturer,
          family,
          dotserialnumber,
          ce.certificatenumber,
           ce.extension_en
     FROM product p
          INNER JOIN productcertificate pce
             ON p.skuid = pce.skuid
          INNER JOIN certificate ce
             ON pce.certificateid = ce.certificateid
                AND pce.certificationtypeid = ce.certificationtypeid
          where ce.certificateid =ls_LatestImarkCertificateID  and
                upper(p.Matl_Num) =upper(LPAD(ps_Matl_Num,18,0)); -- Added as per PRJ3617
                --upper(p.sku) =upper(ps_sku);



           --Gets MeasureHdr information.
                  Open pc_MeasureHdr FOR
                  SELECT MEASUREID as Mea_ID,
                        PROJECTNUMBER as ProjectNum,
                        TIRENUMBER as TireNum,
                        TESTSPEC as TestSpec,
                        COMPLETIONDATE,
                        INFLATIONPRESSURE,
                        MOLDDESIGN,
                        RIMWIDTH,
                        DOTSERIALNUMBER,
                        DIAMETER,
                        AVGSECTIONWIDTH,
                        AVGOVERALLWIDTH,
                        MAXOVERALLWIDTH,
                        SIZEFACTOR,
                        MOUNTTIME,
                        MOUNTTEMP,
                        SERIALDATE,
                        ENDTIME,
                        ACTSIZEFACTOR,
                        m.CERTIFICATIONTYPEID,
                        CERTIFICATENUMBER,
                        STARTINFLATIONPRESSURE,
                        ENDINFLATIONPRESSURE,
                        ADJUSTMENT,
                        CIRCUMFERENCE,
                        NOMINALDIAMETER,
                        NOMINALWIDTH,
                        NOMINALWIDTHPASSFAIL,
                        NOMINALWIDTHDIFERENCE,
                        NOMINALWIDTHTOLERANCE,
                        MAXOVERALLDIAMETER,
                        MINOVERALLDIAMETER,
                        OVERALLWIDTHPASSFAIL,
                        OVERALLDIAMETERPASSFAIL,
                        DIAMETERDIFERENCE,
                        DIAMETERTOLERANCE,
                        TEMPRESISTANCEGRADING,
                        TENSILESTRENGHT1,
                        TENSILESTRENGHT2,
                        ELONGATION1,
                        ELONGATION2,
                        TENSILESTRENGHTAFTERAGE1,
                        TENSILESTRENGHTAFTERAGE2,
                        SKU,
                        LPAD(MATL_NUM,18,0) AS MATL_NUM -- Added as per PRJ3617
                  FROM  Certificate ce inner join MeasureHdr m on
                             ce.certificateid = m.certificateid and
                             ce.certificationtypeid = m.certificationtypeid
                  where ce.certificateid =ls_LatestImarkCertificateID  and
                   upper(m.Matl_Num) =upper(LPAD(ps_Matl_Num,18,0)); -- Added as per PRJ3617
                        --upper(sku) =upper(ps_sku);

                  BEGIN
                  -- Get MeasureId
                      li_MeasureId:=0;
                      SELECT MeasureID INTO li_MeasureId
                      FROM  Certificate ce inner join MeasureHdr m on
                             ce.certificateid = m.certificateid and
                             ce.certificationtypeid = m.certificationtypeid
                                   where ce.certificateid =ls_LatestImarkCertificateID  and
                                    upper(m.Matl_Num) =upper(LPAD(ps_Matl_Num,18,0)); -- Added as per PRJ3617
                          --upper(sku) =upper(ps_sku);
                   EXCEPTION
                       WHEN OTHERS THEN
                              li_MeasureId:=0;
                    END;


                  --Gets MeasureDtl information.
                  Open pc_MeasureDtl FOR
                  SELECT SECTIONWIDTH, OVERALLWIDTH, MEASUREID as Mea_ID,Iteration
                  FROM  MeasureDtl MD
                  WHERE MD.MEASUREID = li_MeasureId;

           --Gets TreadWearHdr information.
                  Open pc_TreadWearHdr FOR
                  SELECT  TREADWEARID as TW_ID,
                          PROJECTNUMBER as ProjectNum,
                          TIRENUMBER as TireNum,
                          TESTSPEC as TestSpec,
                          COMPLETIONDATE,
                          DOTSERIALNUMBER,
                          LOWESTWEARBAR,
                          PASSYN,
                          ce.CERTIFICATIONTYPEID,
                          ce.CERTIFICATENUMBER,
                          SERIALDATE,
                          INDICATORSREQUIREMENT,
                          SKU,
                          LPAD(MATL_NUM,18,0) AS MATL_NUM--Added as per PRJ3617
                  FROM  Certificate ce inner join  TREADWEARHDR t on
                                  ce.certificateid = t.certificateid and
                                  ce.certificationtypeid = t.certificationtypeid
                              where ce.certificateid =ls_LatestImarkCertificateID  and
                               upper(t.Matl_Num) =upper(LPAD(ps_Matl_Num,18,0)); -- Added as per PRJ3617
                                   --upper(sku) =upper(ps_sku);

                  BEGIN
                 --Get's the MeasureId Based on the Certification Type ID,SKU and CertificateNumber
                     li_TreadWearId:=0;
                      SELECT TreadWearID INTO li_TreadWearId
                      FROM  Certificate ce inner join  TREADWEARHDR t on
                                  ce.certificateid = t.certificateid and
                                  ce.certificationtypeid = t.certificationtypeid
                                  where ce.certificateid =ls_LatestImarkCertificateID  and
                                   upper(t.Matl_Num) =upper(LPAD(ps_Matl_Num,18,0)); -- Added as per PRJ3617
                                  --upper(sku) =upper(ps_sku);
                       EXCEPTION
                       WHEN OTHERS THEN
                              li_TreadWearId:=0;
                    END;


                  --Gets TreadWearDtl information.
                  Open pc_TreadWearDtl FOR
                  SELECT  TREADWEARID as TW_ID, WEARBARHEIGHT ,ITERATION
                  FROM  TREADWEARDTL td
                  WHERE td.treadwearid = li_TreadWearId;

           --Gets HighSpeedHdr information.
                  Open pc_HighSpeedHdr FOR
                  SELECT HIGHSPEEDID as HS_ID,
                        PROJECTNUMBER as ProjectNum,
                        TIRENUM as TireNum,
                        TESTSPEC as TestSpec,
                        COMPETIONDATE,
                        DOTSERIALNUMBER,
                        MFGWWYY,
                        PRECONDSTARTDATE,
                        PRECONDSARTTEMP,
                        RIMDIAMETER,
                        RIMWIDTH,
                        PRECONDENDDATE,
                        PRECONDENDTEMP,
                        INFLATIONPRESSURE,
                        BEFOREDIAMETER,
                        AFTERDIAMETER,
                        BEFOREINFLATION,
                        AFTERINFLATION,
                        WHEELPOSITION,
                        WHEELNUMBER,
                        FINALTEMP,
                        FINALDISTANCE,
                        FINALINFLATION,
                        POSTCONDSTARTDATE,
                        POSTCONDENDDATE,
                        POSTCONDENDTEMP,
                        PASSYN,
                        SERIALDATE,
                        POSTCONDTIME,
                        ce.CERTIFICATIONTYPEID,
                        CERTIFICATENUMBER,
                        DIAMETERTESTDRUM,
                        PRECONDTIME,
                        PRECONDTEMP,
                        INFLATIONPRESSUREREADJUSTED,
                        CIRCUNFERENCEBEFORETEST,
                        WHEELSPEEDRPM,
                        WHEELSPEEDKMH,
                        CIRCUNFERENCEAFTERTEST,
                        ODDIFERENCE,
                        ODDIFERENCETOLERANCE,
                        SERIENOM,
                        FINALJUDGEMENT,
                        APPROVER,
                        PASSATKMH,
                        SPEEDTTESTPASSFAIL,
                        SPEEDTOTALTIME,
                        MAXSPEED,
                        MAXLOAD,
                        SKU,
                        LPAD(MATL_NUM,18,0) AS MATL_NUM-- Added as per PRJ3617
                  FROM  Certificate ce inner join  HIGHSPEEDHDR h on
                                  ce.certificateid = h.certificateid and
                                  ce.certificationtypeid = h.certificationtypeid
                             where ce.certificateid =ls_LatestImarkCertificateID  and
                              upper(h.Matl_Num) =upper(LPAD(ps_Matl_Num,18,0)) -- Added as per PRJ3617
                          --upper(sku) =upper(ps_sku)
                          and ce.certificationtypeid = 4;

                    BEGIN
                       --Get's the MeasureId Based on the Certification Type ID,SKU and CertificateNumber
                        li_HighSpeedId:= 0;
                      SELECT HighSpeedID INTO li_HighSpeedId
--                       FROM  Certificate ce inner join  HIGHSPEEDHDR h on
--                                  ce.certificateid = h.certificateid and
--                                  ce.certificationtypeid = h.certificationtypeid  ;
                       FROM  Certificate ce inner join  HIGHSPEEDHDR h on
                                  ce.certificateid = h.certificateid
                                  and ce.certificationtypeid = h.certificationtypeid
                                  and ce.certificateid =ls_LatestImarkCertificateID
                                  and upper(h.Matl_Num) =upper(LPAD(ps_Matl_Num,18,0)); -- Added as per PRJ3617
                                  --and upper(sku) =upper(ps_sku);



                    EXCEPTION
                       WHEN OTHERS THEN
                              li_HighSpeedId:= 0;
                    END;


                  --Gets HighSpeedDtl information.
                  Open pc_HighSpeedDtl FOR
                  SELECT TESTSTEP,
                          TIMEINMIN,
                          SPEED,
                          TOTMILES,
                          LOAD,
                          LOADPERCENT,
                          SETINFLATION,
                          AMBTEMP,
                          INFPRESSURE,
                          STEPCOMPLETIONDATE,
                          HIGHSPEEDID  as HS_ID
                  FROM  HIGHSPEEDDTL h
                  WHERE h.HIGHSPEEDID = li_HighSpeedId;

          --Gets the default values information.
            OPen pc_CertificateDfValue for
            SELECT CERTIFICATENUMBER,
                    MAX(DECODE(fieldid,102,fieldvalue,NULL)) SAMPLINGDATE_I,
                    MAX(DECODE(fieldid,103,fieldvalue,NULL)) CUSTOMERDATA_I,
                    MAX(DECODE(fieldid,104,fieldvalue,NULL)) SAMPLINGOBJECTIVE_I,
                    MAX(DECODE(fieldid,105,fieldvalue,NULL)) SAMPLINGLOCATION_I,
                    MAX(DECODE(fieldid,106,fieldvalue,NULL)) SAMPLINGLOCATIONCONDITION_I,
                    MAX(DECODE(fieldid,107,fieldvalue,NULL)) SAMPLINGLOCATIONCOMMENTS_I,
                    MAX(DECODE(fieldid,108,fieldvalue,NULL)) STORAGELOCATIONCONDITION_I,
                    MAX(DECODE(fieldid,109,fieldvalue,NULL)) STORAGELOCATIONCOMMENTS_I,
                    MAX(DECODE(fieldid,110,fieldvalue,NULL)) REFERENCESTANDARD_I,
                    MAX(DECODE(fieldid,111,fieldvalue,NULL)) SAMPLINGOBSERVATION_I,
                    MAX(DECODE(fieldid,112,fieldvalue,NULL)) TESTRESULTSOBSERVATION_I
            FROM (
                    SELECT FIELDID,
                          CERTIFICATIONTYPEID,
                          CERTIFICATENUMBER,
                          FIELDVALUE
                     FROM defaultvalues_view
                              where CERTIFICATENUMBER =ls_LatestImarkCertificateNum
                          and certificationtypeid = 4
              )
            group by CERTIFICATENUMBER ;

    end if;

  EXCEPTION
         when others then
              ls_ErrorMsg:=  'An error has ocurred.(when others)' || sqlerrm;
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' Reports_Package.GetIMarkReportPassengerInfo',
                      AX_RECORDDATA    => 'An error has ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);

  end GetImarkSamplingAndTestsInfo;

procedure GetCCCSequentialReportInfo(pc_Certificate out retCursor,
 pc_Brand out retCursor,
 pc_Product out retCursor,
 pc_CertificateDfValue out retcursor,
 ps_certificateNumber in varchar2,
 ps_extension in varchar2,
 pi_certificationTypeID in number,
 ps_Operatorid in varchar2
) as
   /************************************************************************************************
     Procedure Name - GetCCCSequentialReportInfo
     Change History
      --------------------------------------------------------------------------
      Version No  Date          Author    Description
      ---------------------------------------------------------------------------
          1.0                             Intial Version
          1.1     10/18/2012     Krishna   - As per PRJ3617
                                            - Replaced BRND_VIEW with query
    *************************************************************************************************/

      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);

      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
  begin
      if ps_certificateNumber is null or
          pi_certificationTypeID is null then
          raise li_ParametersAreNull ;
      end if;

       if ps_certificateNumber ='' or
          pi_certificationTypeID  <= 0 then
          raise li_ParametersAreNull ;
      end if;

      if ps_Operatorid is not null or
         ps_Operatorid <> '' then
          ls_OperatorId:=ps_Operatorid;
      end if;

          if ps_extension is null or ps_extension = '' then

              Open pc_Certificate for
              select distinct(CE.certificatenumber),ce.extension_en
              from  certificate ce
                     inner join productcertificate pce on
                           ce.certificateid   = pce.certificateid and
                           ce.certificationtypeid = pce.certificationtypeid
                     inner join product p on
                               pce.skuid = p.skuid
              where lower(ce.certificatenumber) = lower(ps_certificateNumber) and
                    ce.certificationtypeid = pi_certificationTypeID;
          else
                Open pc_Certificate for
                select distinct(CE.certificatenumber),ce.extension_en
                from  certificate ce
                      inner join productcertificate pce on
                           ce.certificateid   = pce.certificateid and
                           ce.certificationtypeid = pce.certificationtypeid
                     inner join product p on
                               pce.skuid = p.skuid
                where lower(ce.certificatenumber) = lower(ps_certificateNumber) and
                      ce.certificationtypeid = pi_certificationTypeID  And
                      LOWER(CE.EXTENSION_EN) = LOWER(ps_extension);
          end if ;

          -- Gets the brand information
          -- Replaced Brand_View with Query as per PRJ3617
          Open pc_brand for
             SELECT *
               FROM  (SELECT DISTINCT  p.Brand
                                      ,p.Brand_Line
                                      ,c.CertificateNumber
                                      ,c.Extension_En
                                FROM  Product p,
                                      ProductCertificate pc,
                                      Certificate c
                                WHERE c.CertificateId = pc.CertificateId
                                  AND pc.SkuId = p.SkuId)
              WHERE lower(certificatenumber) = lower(ps_certificateNumber)  ;

          -- Gets the pc_Product information
          Open pc_Product for
          SELECT  *
          FROM  productdata_report_view
          where lower(certificatenumber) = lower(ps_certificateNumber);

          --Gets the default values information.
            OPen pc_CertificateDfValue for
            SELECT CERTIFICATENUMBER,
                    MAX(DECODE(fieldid,12,fieldvalue,NULL)) PRODUCTCATEGORY_C,
                    MAX(DECODE(fieldid,13,fieldvalue,NULL)) APPLICATION_C,
                    MAX(DECODE(fieldid,14,fieldvalue,NULL)) TOPIC_C,

                    MAX(DECODE(fieldid,15,fieldvalue,NULL)) APPLICANTNATIONALITY_C,
                    MAX(DECODE(fieldid,16,fieldvalue,NULL)) APPLICANTCOMPANYNAMECHINESE_C,
                    MAX(DECODE(fieldid,17,fieldvalue,NULL)) APPLICANTCOMPANYNAMEENGLISH_C,
                    MAX(DECODE(fieldid,18,fieldvalue,NULL)) APPLICANTPAYERNAME_C,
                    MAX(DECODE(fieldid,19,fieldvalue,NULL)) APPLICANTPAYERADDRESS_C,
                    MAX(DECODE(fieldid,20,fieldvalue,NULL)) APPLICANTADDRESSCHINESE_C,
                    MAX(DECODE(fieldid,21,fieldvalue,NULL)) APPLICANTADDRESSENGLISH_C,
                    MAX(DECODE(fieldid,22,fieldvalue,NULL)) APPLICANTORGNIZATIONCODE_C,
                    MAX(DECODE(fieldid,23,fieldvalue,NULL)) APPLICANTPOSTCODE_C,
                    MAX(DECODE(fieldid,24,fieldvalue,NULL)) APPLICANTPERSONTOBECONTACT_C,
                    MAX(DECODE(fieldid,25,fieldvalue,NULL)) APPLICANTCONTACTPERSON_C,
                    MAX(DECODE(fieldid,26,fieldvalue,NULL)) APPLICANTTELEPHONE_C,
                    MAX(DECODE(fieldid,27,fieldvalue,NULL)) APPLICANTFAX_C,
                    MAX(DECODE(fieldid,28,fieldvalue,NULL)) APPLICANTEMAIL_C,
                    MAX(DECODE(fieldid,29,fieldvalue,NULL)) APPLICANTMOBILEPHONE_C,

                    MAX(DECODE(fieldid,30,fieldvalue,NULL)) AGENCYNATIONALITY_C,
                    MAX(DECODE(fieldid,31,fieldvalue,NULL)) AGENCYPROVINCE_C,
                    MAX(DECODE(fieldid,32,fieldvalue,NULL)) AGENCYCITY_C,
                    MAX(DECODE(fieldid,33,fieldvalue,NULL)) AGENCYCOUNTY_C,
                    MAX(DECODE(fieldid,34,fieldvalue,NULL)) AGENCYRCOMPANYNAME_C,
                    MAX(DECODE(fieldid,35,fieldvalue,NULL)) AGENCYRCOMPANYADDRESS_C,
                    MAX(DECODE(fieldid,36,fieldvalue,NULL)) AGENCYORGNIZATIONCODE_C,
                    MAX(DECODE(fieldid,37,fieldvalue,NULL)) AGENCYAPPROVALNUMBER_C,
                    MAX(DECODE(fieldid,38,fieldvalue,NULL)) AGENCYPOSTCODE_C,
                    MAX(DECODE(fieldid,39,fieldvalue,NULL)) AGENCYCONTACTPERSON_C,
                    MAX(DECODE(fieldid,40,fieldvalue,NULL)) AGENCYEMAIL_C,
                    MAX(DECODE(fieldid,41,fieldvalue,NULL)) AGENCYTELEPHONE_C,
                    MAX(DECODE(fieldid,42,fieldvalue,NULL)) AGENCYFAX_C,
                    MAX(DECODE(fieldid,43,fieldvalue,NULL)) AGENCYMOBILE_C,

                    MAX(DECODE(fieldid,44,fieldvalue,NULL)) MANUFACTURESAMEASAPPLICANT_C,
                    MAX(DECODE(fieldid,45,fieldvalue,NULL)) MANUFACTURENATIONALITY_C,
                    MAX(DECODE(fieldid,46,fieldvalue,NULL)) MANUFACTURECOMPANYNAMECH_C,
                    MAX(DECODE(fieldid,47,fieldvalue,NULL)) MANUFACTURECOMPANYNAMEEN_C,
                    MAX(DECODE(fieldid,48,fieldvalue,NULL)) MANUFACTUREADDRESSCHINESE_C,
                    MAX(DECODE(fieldid,49,fieldvalue,NULL)) MANUFACTUREADDRESSENGLISH_C,
                    MAX(DECODE(fieldid,50,fieldvalue,NULL)) MANUFACTUREORGNIZATIONCODE_C,
                    MAX(DECODE(fieldid,51,fieldvalue,NULL)) MANUFACTUREPOSTCODE_C,
                    MAX(DECODE(fieldid,52,fieldvalue,NULL)) MANUFACTUREPERSONTOBECONTACT_C,
                    MAX(DECODE(fieldid,53,fieldvalue,NULL)) MANUFACTURECONTACTPERSON_C,
                    MAX(DECODE(fieldid,54,fieldvalue,NULL)) MANUFACTURETELEPHONE_C,
                    MAX(DECODE(fieldid,55,fieldvalue,NULL)) MANUFACTUREFAX_C,
                    MAX(DECODE(fieldid,56,fieldvalue,NULL)) MANUFACTUREEMAIL_C,
                    MAX(DECODE(fieldid,57,fieldvalue,NULL)) MANUFACTUREMOBILEPHONE_C,

                    MAX(DECODE(fieldid,58,fieldvalue,NULL)) FACTORYSAMEASAPPLICANT_C,
                    MAX(DECODE(fieldid,59,fieldvalue,NULL)) FACTORYSAMEASMANUFACTURER_C,
                    MAX(DECODE(fieldid,60,fieldvalue,NULL)) FACTORYNATIONALITY_C,
                    MAX(DECODE(fieldid,61,fieldvalue,NULL)) FACTORYNAMECHINESE_C,
                    MAX(DECODE(fieldid,62,fieldvalue,NULL)) FACTORYNAMEENGLISH_C,
                    MAX(DECODE(fieldid,63,fieldvalue,NULL)) FACTORYADDRESSCHINESE_C,
                    MAX(DECODE(fieldid,64,fieldvalue,NULL)) FACTORYADDRESSENGLISH_C,
                    MAX(DECODE(fieldid,65,fieldvalue,NULL)) FACTORYORGNIZATIONCODE_C,
                    MAX(DECODE(fieldid,66,fieldvalue,NULL)) FACTORYNUMBER_C,
                    MAX(DECODE(fieldid,67,fieldvalue,NULL)) FACTORYPOSTCODE_C,
                    MAX(DECODE(fieldid,68,fieldvalue,NULL)) FACTORYCONTACTPERSONCHINESE_C,
                    MAX(DECODE(fieldid,69,fieldvalue,NULL)) FACTORYCONTACTPERSONENGLISH_C,
                    MAX(DECODE(fieldid,70,fieldvalue,NULL)) FACTORYEMAIL_C,
                    MAX(DECODE(fieldid,71,fieldvalue,NULL)) FACTORYTELEPHONE_C,
                    MAX(DECODE(fieldid,72,fieldvalue,NULL)) FACTORYFAX_C,
                    MAX(DECODE(fieldid,73,fieldvalue,NULL)) FACTORYMOBILE_C,

                    MAX(DECODE(fieldid,74,fieldvalue,NULL)) REMARK_C,
                    MAX(DECODE(fieldid,75,fieldvalue,NULL)) GBSAFETYSTANDARDNUMBER_C,
                    MAX(DECODE(fieldid,76,fieldvalue,NULL)) GBEMCSTANDARDNUMBER_C,
                    MAX(DECODE(fieldid,77,fieldvalue,NULL)) CBTESTCERTIFICATEYN_C,
                    MAX(DECODE(fieldid,78,fieldvalue,NULL)) CBCERTIFICATENUMBER_C,
                    MAX(DECODE(fieldid,79,fieldvalue,NULL)) CBCERTIFICATEISSUEDDATE_C,
                    MAX(DECODE(fieldid,80,fieldvalue,NULL)) CBCERTIFICATENBCNAME_C,
                    MAX(DECODE(fieldid,81,fieldvalue,NULL)) CCCCERTIFIACTENUMBER_C,
                    MAX(DECODE(fieldid,82,fieldvalue,NULL)) CERTIFICATEMODEL_C
            FROM (
                SELECT fieldid,
                         certificationtypeid,
                         certificatenumber,
                         fieldvalue
                    FROM defaultvalues_view dv
                    WHERE LOWER(certificatenumber) = LOWER(ps_certificateNumber) AND
                            certificationtypeid = pi_certificationTypeID
             )
             GROUP BY certificatenumber;

  EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:=  ' There is at least one parameters null.'  ;
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' Reports_Package.GetInfoReportPassenger',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20005,ls_ErrorMsg);

         when li_ParametersAreInvalid then
            ls_ErrorMsg:=  sqlerrm || ' There is at least one parameters invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' Reports_Package.GetInfoReportPassenger',
                AX_RECORDDATA    => 'There is at least one parameters invalid.',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20006,ls_ErrorMsg);

         when others then
              ls_ErrorMsg:=  'An error have ocurred.(when others)' || sqlerrm;
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' Reports_Package.GetInfoReportPassenger',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);

  end GetCCCSequentialReportInfo;

  procedure GetCCCProductDescReportInfo(pc_Certificate out retCursor,
                                     pc_Brand out retCursor,
                                     pc_Product out retCursor,
                                     pc_CertificateDfValue out retcursor,
                                     ps_certificateNumber in varchar2,
                                     ps_extension in varchar2,
                                     pi_certificationTypeID in number,
                                     ps_Operatorid in varchar2
                                    ) as
      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);

      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
  begin
      if ps_certificateNumber is null or
          pi_certificationTypeID is null then
          raise li_ParametersAreNull ;
      end if;

       if ps_certificateNumber ='' or
          pi_certificationTypeID  <= 0 then
          raise li_ParametersAreNull ;
      end if;

      if ps_Operatorid is not null or
         ps_Operatorid <> '' then
          ls_OperatorId:=ps_Operatorid;
      end if;

          if ps_extension is null or ps_extension = '' then

              Open pc_Certificate for
              select distinct(CE.certificatenumber),ce.extension_en
              from  certificate ce
                     inner join productcertificate pce on
                           ce.certificateid   = pce.certificateid and
                           ce.certificationtypeid = pce.certificationtypeid
                     inner join product p on
                               pce.skuid = p.skuid
              where lower(ce.certificatenumber) = lower(ps_certificateNumber) and
                    ce.certificationtypeid = pi_certificationTypeID;
          else
                Open pc_Certificate for
                select distinct(CE.certificatenumber),ce.extension_en
                from  certificate ce
                      inner join productcertificate pce on
                           ce.certificateid   = pce.certificateid and
                           ce.certificationtypeid = pce.certificationtypeid
                     inner join product p on
                               pce.skuid = p.skuid
                where lower(ce.certificatenumber) = lower(ps_certificateNumber) and
                      ce.certificationtypeid = pi_certificationTypeID  And
                      LOWER(CE.EXTENSION_EN) = LOWER(ps_extension);
          end if ;

          -- Gets the brand information
          Open pc_brand for
          SELECT *
          FROM   brand_view
          where lower(certificatenumber) = lower(ps_certificateNumber)  ;

          -- Gets the pc_Product information
          Open pc_Product for
          SELECT  ROWNUM AS "NO", crv.*
          FROM  cccproductdesc_report_view crv
          where lower(certificatenumber) = lower(ps_certificateNumber);

          --Gets the default values information.
            OPen pc_CertificateDfValue for
            SELECT CERTIFICATENUMBER,
                    MAX(DECODE(fieldid,12,fieldvalue,NULL)) PRODUCTCATEGORY_C,
                    MAX(DECODE(fieldid,13,fieldvalue,NULL)) APPLICATION_C,
                    MAX(DECODE(fieldid,14,fieldvalue,NULL)) TOPIC_C,

                    MAX(DECODE(fieldid,15,fieldvalue,NULL)) APPLICANTNATIONALITY_C,
                    MAX(DECODE(fieldid,16,fieldvalue,NULL)) APPLICANTCOMPANYNAMECHINESE_C,
                    MAX(DECODE(fieldid,17,fieldvalue,NULL)) APPLICANTCOMPANYNAMEENGLISH_C,
                    MAX(DECODE(fieldid,18,fieldvalue,NULL)) APPLICANTPAYERNAME_C,
                    MAX(DECODE(fieldid,19,fieldvalue,NULL)) APPLICANTPAYERADDRESS_C,
                    MAX(DECODE(fieldid,20,fieldvalue,NULL)) APPLICANTADDRESSCHINESE_C,
                    MAX(DECODE(fieldid,21,fieldvalue,NULL)) APPLICANTADDRESSENGLISH_C,
                    MAX(DECODE(fieldid,22,fieldvalue,NULL)) APPLICANTORGNIZATIONCODE_C,
                    MAX(DECODE(fieldid,23,fieldvalue,NULL)) APPLICANTPOSTCODE_C,
                    MAX(DECODE(fieldid,24,fieldvalue,NULL)) APPLICANTPERSONTOBECONTACT_C,
                    MAX(DECODE(fieldid,25,fieldvalue,NULL)) APPLICANTCONTACTPERSON_C,
                    MAX(DECODE(fieldid,26,fieldvalue,NULL)) APPLICANTTELEPHONE_C,
                    MAX(DECODE(fieldid,27,fieldvalue,NULL)) APPLICANTFAX_C,
                    MAX(DECODE(fieldid,28,fieldvalue,NULL)) APPLICANTEMAIL_C,
                    MAX(DECODE(fieldid,29,fieldvalue,NULL)) APPLICANTMOBILEPHONE_C,

                    MAX(DECODE(fieldid,30,fieldvalue,NULL)) AGENCYNATIONALITY_C,
                    MAX(DECODE(fieldid,31,fieldvalue,NULL)) AGENCYPROVINCE_C,
                    MAX(DECODE(fieldid,32,fieldvalue,NULL)) AGENCYCITY_C,
                    MAX(DECODE(fieldid,33,fieldvalue,NULL)) AGENCYCOUNTY_C,
                    MAX(DECODE(fieldid,34,fieldvalue,NULL)) AGENCYRCOMPANYNAME_C,
                    MAX(DECODE(fieldid,35,fieldvalue,NULL)) AGENCYRCOMPANYADDRESS_C,
                    MAX(DECODE(fieldid,36,fieldvalue,NULL)) AGENCYORGNIZATIONCODE_C,
                    MAX(DECODE(fieldid,37,fieldvalue,NULL)) AGENCYAPPROVALNUMBER_C,
                    MAX(DECODE(fieldid,38,fieldvalue,NULL)) AGENCYPOSTCODE_C,
                    MAX(DECODE(fieldid,39,fieldvalue,NULL)) AGENCYCONTACTPERSON_C,
                    MAX(DECODE(fieldid,40,fieldvalue,NULL)) AGENCYEMAIL_C,
                    MAX(DECODE(fieldid,41,fieldvalue,NULL)) AGENCYTELEPHONE_C,
                    MAX(DECODE(fieldid,42,fieldvalue,NULL)) AGENCYFAX_C,
                    MAX(DECODE(fieldid,43,fieldvalue,NULL)) AGENCYMOBILE_C,

                    MAX(DECODE(fieldid,44,fieldvalue,NULL)) MANUFACTURESAMEASAPPLICANT_C,
                    MAX(DECODE(fieldid,45,fieldvalue,NULL)) MANUFACTURENATIONALITY_C,
                    MAX(DECODE(fieldid,46,fieldvalue,NULL)) MANUFACTURECOMPANYNAMECH_C,
                    MAX(DECODE(fieldid,47,fieldvalue,NULL)) MANUFACTURECOMPANYNAMEEN_C,
                    MAX(DECODE(fieldid,48,fieldvalue,NULL)) MANUFACTUREADDRESSCHINESE_C,
                    MAX(DECODE(fieldid,49,fieldvalue,NULL)) MANUFACTUREADDRESSENGLISH_C,
                    MAX(DECODE(fieldid,50,fieldvalue,NULL)) MANUFACTUREORGNIZATIONCODE_C,
                    MAX(DECODE(fieldid,51,fieldvalue,NULL)) MANUFACTUREPOSTCODE_C,
                    MAX(DECODE(fieldid,52,fieldvalue,NULL)) MANUFACTUREPERSONTOBECONTACT_C,
                    MAX(DECODE(fieldid,53,fieldvalue,NULL)) MANUFACTURECONTACTPERSON_C,
                    MAX(DECODE(fieldid,54,fieldvalue,NULL)) MANUFACTURETELEPHONE_C,
                    MAX(DECODE(fieldid,55,fieldvalue,NULL)) MANUFACTUREFAX_C,
                    MAX(DECODE(fieldid,56,fieldvalue,NULL)) MANUFACTUREEMAIL_C,
                    MAX(DECODE(fieldid,57,fieldvalue,NULL)) MANUFACTUREMOBILEPHONE_C,

                    MAX(DECODE(fieldid,58,fieldvalue,NULL)) FACTORYSAMEASAPPLICANT_C,
                    MAX(DECODE(fieldid,59,fieldvalue,NULL)) FACTORYSAMEASMANUFACTURER_C,
                    MAX(DECODE(fieldid,60,fieldvalue,NULL)) FACTORYNATIONALITY_C,
                    MAX(DECODE(fieldid,61,fieldvalue,NULL)) FACTORYNAMECHINESE_C,
                    MAX(DECODE(fieldid,62,fieldvalue,NULL)) FACTORYNAMEENGLISH_C,
                    MAX(DECODE(fieldid,63,fieldvalue,NULL)) FACTORYADDRESSCHINESE_C,
                    MAX(DECODE(fieldid,64,fieldvalue,NULL)) FACTORYADDRESSENGLISH_C,
                    MAX(DECODE(fieldid,65,fieldvalue,NULL)) FACTORYORGNIZATIONCODE_C,
                    MAX(DECODE(fieldid,66,fieldvalue,NULL)) FACTORYNUMBER_C,
                    MAX(DECODE(fieldid,67,fieldvalue,NULL)) FACTORYPOSTCODE_C,
                    MAX(DECODE(fieldid,68,fieldvalue,NULL)) FACTORYCONTACTPERSONCHINESE_C,
                    MAX(DECODE(fieldid,69,fieldvalue,NULL)) FACTORYCONTACTPERSONENGLISH_C,
                    MAX(DECODE(fieldid,70,fieldvalue,NULL)) FACTORYEMAIL_C,
                    MAX(DECODE(fieldid,71,fieldvalue,NULL)) FACTORYTELEPHONE_C,
                    MAX(DECODE(fieldid,72,fieldvalue,NULL)) FACTORYFAX_C,
                    MAX(DECODE(fieldid,73,fieldvalue,NULL)) FACTORYMOBILE_C,

                    MAX(DECODE(fieldid,74,fieldvalue,NULL)) REMARK_C,
                    MAX(DECODE(fieldid,75,fieldvalue,NULL)) GBSAFETYSTANDARDNUMBER_C,
                    MAX(DECODE(fieldid,76,fieldvalue,NULL)) GBEMCSTANDARDNUMBER_C,
                    MAX(DECODE(fieldid,77,fieldvalue,NULL)) CBTESTCERTIFICATEYN_C,
                    MAX(DECODE(fieldid,78,fieldvalue,NULL)) CBCERTIFICATENUMBER_C,
                    MAX(DECODE(fieldid,79,fieldvalue,NULL)) CBCERTIFICATEISSUEDDATE_C,
                    MAX(DECODE(fieldid,80,fieldvalue,NULL)) CBCERTIFICATENBCNAME_C,
                    MAX(DECODE(fieldid,81,fieldvalue,NULL)) CCCCERTIFIACTENUMBER_C,
                    MAX(DECODE(fieldid,82,fieldvalue,NULL)) CERTIFICATEMODEL_C
            FROM (
                SELECT fieldid,
                         certificationtypeid,
                         certificatenumber,
                         fieldvalue
                    FROM defaultvalues_view dv
                    WHERE LOWER(certificatenumber) = LOWER(ps_certificateNumber) AND
                            certificationtypeid = pi_certificationTypeID
             )
             GROUP BY certificatenumber;

  EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:=  ' There is at least one parameters null.'  ;
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' Reports_Package.GetInfoReportPassenger',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20005,ls_ErrorMsg);

         when li_ParametersAreInvalid then
            ls_ErrorMsg:=  sqlerrm || ' There is at least one parameters invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' Reports_Package.GetInfoReportPassenger',
                AX_RECORDDATA    => 'There is at least one parameters invalid.',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20006,ls_ErrorMsg);

         when others then
              ls_ErrorMsg:=  'An error have ocurred.(when others)' || sqlerrm;
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' Reports_Package.GetInfoReportPassenger',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);

  end GetCCCProductDescReportInfo;

    procedure GetGSOPassengerReport(   pc_Certificate out retCursor,
                                       pc_Brand out retCursor,
                                       pc_SkuList out retCursor,
                                       pc_Product out retCursor,
                                       pc_CertificateDfValue out retcursor,
                                       pc_MeasureHDR out retcursor,
                                       pc_PlungerHDR out retcursor,
                                       pc_beadunseathdr out retcursor,
                                       pc_treadwearhdr out retcursor,
                                       pc_endurance out retcursor,
                                       pc_highspeedhdr out retcursor,
                                       ps_certificateNumber in varchar2,
                                       ps_extension in varchar2,
                                       pi_certificationTypeID in number,
                                       ps_Operatorid in varchar2,
                                       pi_TireTypeId in number
                                       ) as
    /************************************************************************************************
     Procedure Name - GetGSOPassengerReport
     Change History
      --------------------------------------------------------------------------
      Version No  Date          Author    Description
      ---------------------------------------------------------------------------
          1.0                             Intial Version
          1.1     9/24/2012     Krishna   - As per PRJ3617
                                            - Replaced NPRID with PSN
                                            - Added Matl_Num wherever SKU is available in Select list of the query
                                            - Replaced SKULIST_VIEW and BRND_VIEW with queries
                                            - Added Brand, Brand_Line columns instead of Brandcode
          1.2     11/04/2013    Harini     - As per IDEA2706,Add tiretypename instead of Tiretypeid in product cursor
                                             by joining with TireType table.Added MFGWWYY in the select list of pc_product
    *************************************************************************************************/

/*
pi_TireTypeId is ignored for now.
kept in place for future use.
*/
      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);

      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
  begin
      if ps_certificateNumber is null or
          pi_certificationTypeID is null then
          raise li_ParametersAreNull ;
      end if;

       if ps_certificateNumber ='' or
          pi_certificationTypeID  <= 0 then
          raise li_ParametersAreNull ;
      end if;

      if ps_Operatorid is not null or
         ps_Operatorid <> '' then
          ls_OperatorId:=ps_Operatorid;
      end if;

          if ps_extension is null or ps_extension = '' then

              Open pc_Certificate for
              select distinct(CE.certificatenumber),ce.extension_en
              from  certificate ce
                   inner join productcertificate pce on
                           ce.certificateid   = pce.certificateid and
                           ce.certificationtypeid = pce.certificationtypeid
                   inner join product p on
                           pce.skuid = p.skuid
              where lower(ce.certificatenumber) = lower(ps_certificateNumber) and
                    ce.certificationtypeid = pi_certificationTypeID;
               -- Gets the brand information
               -- Replaced Brand_View with qeury as per PRJ3617
              Open pc_brand for
              SELECT *
              FROM  (SELECT DISTINCT  p.Brand
                                      ,p.Brand_Line
                                      ,c.CertificateNumber
                                      ,c.Extension_En
                                FROM  Product p,
                                      ProductCertificate pc,
                                      Certificate c
                                WHERE c.CertificateId = pc.CertificateId
                                  AND pc.SkuId = p.SkuId)
              where lower(certificatenumber) = lower(ps_certificateNumber) and  rownum < 2 ;

              -- Replaced SKULIST_VIEW with query As per PRJ3617
              -- Replacedwith BrandCode,BrandName with Brand, Brand_Line
              -- Added Matl_Num in select list
              Open pc_SkuList for
              SELECT  BRAND,
                      BRAND_LINE,
                      CERTIFICATENUMBER,
                      EXTENSION_EN,
                      SKUID,
                      SKU,
                      LPAD(MATL_NUM,18,0) AS MATL_NUM,
                      SIZESTAMP
              FROM (SELECT DISTINCT p.Brand,
                                    p.Brand_Line ,
                                    c.CertificateNumber,
                                    c.Extension_En ,
                                    p.SkuId,
                                    p.Sku,
                                    p.Matl_Num,
                                    p.SizeStamp
                              FROM Product p,
                                   ProductCertificate pc,
                                   Certificate c
                             WHERE c.CertificateId = pc.CertificateId
                               AND pc.SkuId = p.SkuId)
               where lower(certificatenumber) = lower(ps_certificateNumber);


               Open pc_Product for
                SELECT SKUID,
                      SKU,
                      LPAD(MATL_NUM,18,0) AS MATL_NUM, --Added as per PRJ3617
                      --BRANDCODE,
                      BRAND, -- Added as per PRJ3617
                      BRAND_LINE, -- Added as per PRJ3617
                      TireTypeName, -- Modified to TiretypeName from TiretypeId as per IDEA2706
                      --NPRID,
                      PSN, -- Added as per PRJ3617
                      SIZESTAMP,
                      DISCONTINUEDDATE,
                      SPECNUMBER,
                      SPEEDRATING,
                      TRIM(SINGLOADINDEX)||' ('||IL1.METRIC_LOAD||' kg)'   SINGLOADINDEX ,
                      TRIM(DUALLOADINDEX)||' ('||IL2.METRIC_LOAD||' kg)'  DUALLOADINDEX,
                      BIASBELTEDRADIAL, -- JES
                      TUBELESSYN,
                      REINFORCEDYN,
                      EXTRALOADYN,
                      UTQGTREADWEAR,
                      UTQGTRACTION,
                      UTQGTEMP,
                      MUDSNOWYN,
                      RIMDIAMETER,
                      CERTIFICATENUMBER,
                      EXTENSION_EN,
                      SERIALDATE,
                      --BRANDDESC,
                      LOADRANGE,
                      MEARIMWIDTH,
                      REGROOVABLEIND,
                      PLANTPRODUCED,
                      MOSTRECENTTESTDATE,
                      IMARK,
                      INFORMENUMBER,
                      FECHADATE,
                      TREADPATTERN,
                      SPECIALPROTECTIVEBAND,
                      NOMINALTIREWIDTH,
                      ASPECTRATIO,
                      TREADWEARINDICATORS,
                      NAMEOFMANUFACTURER,
                      FAMILY,
                      DOTSERIALNUMBER,
                      DATEASSIGNED_EGI,
                      MFGWWYY  -- Added as per IDEA2706
                      --ECETIRECLASS  --Request 226458 (not implemented)
                FROM PRODUCTDATA_REPORT_VIEW prv
                     left OUTER join TRACS.INDEXED_LOADS IL1 on
                         IL1.LOAD_INDEX =  SINGLOADINDEX
                      left OUTER join TRACS.INDEXED_LOADS IL2 on
                         IL2.LOAD_INDEX =  DUALLOADINDEX
                      LEFT OUTER JOIN TIRETYPE T ON
                         PRV.TireTypeId = T.TireTypeId
                where lower(certificatenumber) = lower(ps_certificateNumber) and rownum < 2;


          else
                Open pc_Certificate for
                select distinct(CE.certificatenumber),ce.extension_en
                FROM  CERTIFICATE CE
                       inner join productcertificate pce on
                           ce.certificateid   = pce.certificateid and
                           ce.certificationtypeid = pce.certificationtypeid
                       inner join product p on
                                 pce.skuid = p.skuid
              where lower(ce.certificatenumber) = lower(ps_certificateNumber) and
                    ce.certificationtypeid = pi_certificationTypeID And
                    LOWER(CE.EXTENSION_EN) = LOWER(ps_extension);
                -- Gets the brand information
                -- Replaced query with Brand_View as per PRJ3617
               Open pc_brand for
                SELECT *
                FROM  (SELECT DISTINCT  p.Brand
                                        ,p.Brand_Line
                                        ,c.CertificateNumber
                                        ,c.Extension_En
                                  FROM  Product p,
                                        ProductCertificate pc,
                                        Certificate c
                                  WHERE c.CertificateId = pc.CertificateId
                                    AND pc.SkuId = p.SkuId)
                where lower(certificatenumber) = lower(ps_certificateNumber) AND
                    LOWER(EXTENSION_EN) = LOWER(ps_extension);

                --Replaced query with SKULIST_VIEW as per PRJ3617
                --Replaced BrandCode, BrandName with Brand, Brand_Line
                --Added Matl_Num in select list
              Open pc_SkuList for
              SELECT  BRAND,
                      BRAND_LINE,
                      CERTIFICATENUMBER,
                      EXTENSION_EN,
                      SKUID,
                      SKU,
                      LPAD(MATL_NUM,18,0) AS MATL_NUM,
                      SIZESTAMP
              FROM (SELECT DISTINCT p.Brand,
                                    p.Brand_Line ,
                                    c.CertificateNumber,
                                    c.Extension_En ,
                                    p.SkuId,
                                    p.Sku,
                                    p.Matl_Num,
                                    p.SizeStamp
                              FROM Product p,
                                   ProductCertificate pc,
                                   Certificate c
                             WHERE c.CertificateId = pc.CertificateId
                               AND pc.SkuId = p.SkuId)
               where lower(certificatenumber) = lower(ps_certificateNumber)  AND
                    LOWER(EXTENSION_EN) = LOWER(ps_extension);

                 -- Gets the pc_Product information
                 Open pc_Product for
                SELECT SKUID,
                      SKU,
                      LPAD(MATL_NUM,18,0) AS MATL_NUM , -- Added as per PRJ3617
                      --BRANDCODE,
                      BRAND, -- As per PRJ3617
                      BRAND_LINE,-- As per PRJ3617
                      TireTypeName, -- Modified to TiretypeName from TiretypeId as per IDEA2706
                      --NPRID,
                      PSN, -- Added as per PRJ3617
                      SIZESTAMP,
                      DISCONTINUEDDATE,
                      SPECNUMBER,
                      SPEEDRATING,
                        TRIM(SINGLOADINDEX)||' ('||IL1.METRIC_LOAD||' kg)'   SINGLOADINDEX ,
                        TRIM(DUALLOADINDEX)||' ('||IL2.METRIC_LOAD||' kg)'   DUALLOADINDEX,
                      BIASBELTEDRADIAL, --JES
                      TUBELESSYN,
                      REINFORCEDYN,
                      EXTRALOADYN,
                      UTQGTREADWEAR,
                      UTQGTRACTION,
                      UTQGTEMP,
                      MUDSNOWYN,
                      RIMDIAMETER,
                      CERTIFICATENUMBER,
                      EXTENSION_EN,
                      SERIALDATE,
                      --BRANDDESC,
                      LOADRANGE,
                      MEARIMWIDTH,
                      REGROOVABLEIND,
                      PLANTPRODUCED,
                      MOSTRECENTTESTDATE,
                      IMARK,
                      INFORMENUMBER,
                      FECHADATE,
                      TREADPATTERN,
                      SPECIALPROTECTIVEBAND,
                      NOMINALTIREWIDTH,
                      ASPECTRATIO,
                      TREADWEARINDICATORS,
                      NAMEOFMANUFACTURER,
                      FAMILY,
                      DOTSERIALNUMBER,
                      DATEASSIGNED_EGI,
                      MFGWWYY-- Added as per IDEA2706
                      --ECETIRECLASS  --Request 226458 (not implemented)
                FROM PRODUCTDATA_REPORT_VIEW PRV
                      left OUTER join TRACS.INDEXED_LOADS IL1 on
                         IL1.LOAD_INDEX =  SINGLOADINDEX
                      left OUTER join TRACS.INDEXED_LOADS IL2 on
                         IL2.LOAD_INDEX =  DUALLOADINDEX
                      LEFT OUTER JOIN TIRETYPE T ON
                         PRV.TireTypeId = T.TireTypeId
                where lower(certificatenumber) = lower(ps_certificateNumber) and rownum < 2;

          end if ;

          --Gets the default values information.
            /*OPen pc_CertificateDfValue for
            SELECT CERTIFICATENUMBER,
                    MAX(DECODE(fieldid,83,fieldvalue,NULL)) COUNTRYOFPRODUCTION_G,
                    MAX(DECODE(fieldid,85,fieldvalue,NULL)) NAMEOFMANUFACTURER_G,
                    MAX(DECODE(fieldid,87,fieldvalue,NULL)) TO_G,
                    MAX(DECODE(fieldid,89,fieldvalue,NULL)) REGULATIONNOPASSENGER_G,
                    MAX(DECODE(fieldid,90,fieldvalue,NULL)) REGULATIONNOLIGHTTRUCK_G
            FROM (
                    SELECT FIELDID,
                          cdv.CERTIFICATIONTYPEID,
                          ce.CERTIFICATENUMBER,
                          FIELDVALUE
                    FROM CERTIFICATEDEFAULTVALUE cdv inner join certificate ce on
                             cdv.certificateid = ce.certificateid
                    WHERE lower(ce.certificatenumber) = lower(ps_certificateNumber) and
                          cdv.CERTIFICATIONTYPEID = pi_certificationTypeID
              )
            group by CERTIFICATENUMBER ;*/

            -- Gets the default values information
            OPEN pc_CertificateDfValue FOR
            SELECT certificatenumber,
                    MAX(DECODE(fieldid,83,fieldvalue,NULL)) COUNTRYOFPRODUCTION_G,
                    MAX(DECODE(fieldid,85,fieldvalue,NULL)) NAMEOFMANUFACTURER_G,
                    MAX(DECODE(fieldid,87,fieldvalue,NULL)) TO_G,
                    MAX(DECODE(fieldid,89,fieldvalue,NULL)) REGULATIONNOPASSENGER_G,
                    MAX(DECODE(fieldid,90,fieldvalue,NULL)) REGULATIONNOLIGHTTRUCK_G,
                     MAX(DECODE(fieldid,91,fieldvalue,NULL)) RAYONOTHER_G
            FROM (
                    SELECT fieldid,
                         certificationtypeid,
                         certificatenumber,
                         fieldvalue
                    FROM defaultvalues_view dv
                    WHERE LOWER(certificatenumber) = LOWER(ps_certificateNumber) AND
                            certificationtypeid = pi_certificationTypeID
             )
             GROUP BY certificatenumber;

            Open pc_MeasureHDR for
            SELECT MEASUREID,
                  NVL(PROJECTNUMBER,'') as PROJECTNUMBER,
                   NVL(TIRENUMBER,0) as TIRENUMBER,
                   NVL(TESTSPEC,'') as TESTSPEC,
                  nvl(COMPLETIONDATE , to_date('2000/01/01','yyyy/mm/dd')) as COMPLETIONDATE,
                  nvl(INFLATIONPRESSURE,0)  as INFLATIONPRESSURE,
                  NVL( MOLDDESIGN,'.') as MOLDDESIGN,
                  nvl(RIMWIDTH,'0') as RIMWIDTH,
                  NVL( DOTSERIALNUMBER,'.') as DOTSERIALNUMBER,
                  nvl(DIAMETER,0) as DIAMETER,
                  nvl(AVGSECTIONWIDTH,0) as AVGSECTIONWIDTH,
                  nvl(AVGOVERALLWIDTH,0) as AVGOVERALLWIDTH,
                  nvl(MAXOVERALLWIDTH,0) as MAXOVERALLWIDTH,
                  nvl(SIZEFACTOR,0) as SIZEFACTOR,
                  nvl(MOUNTTIME, to_date('2000/01/01','yyyy/mm/dd')) as MOUNTTIME,
                  nvl(MOUNTTEMP, 0) as MOUNTTEMP,
                  nvl(SERIALDATE,to_date('2000/01/01','yyyy/mm/dd')) as SERIALDATE,
                  nvl(ENDTIME,to_date('2000/01/01','yyyy/mm/dd')) as ENDTIME,
                  nvl(ACTSIZEFACTOR,0) as ACTSIZEFACTOR,
                  nvl(STARTINFLATIONPRESSURE,0) as STARTINFLATIONPRESSURE,
                  nvl(ENDINFLATIONPRESSURE,0) as ENDINFLATIONPRESSURE,
                  nvl(ADJUSTMENT,'') as ADJUSTMENT,
                  nvl(CIRCUMFERENCE, 0) as CIRCUNFERENCE,
                  nvl(NOMINALDIAMETER, 0) as NOMINALDIAMETER,
                  nvl(NOMINALWIDTH, 0) as NOMINALWIDTH,
                  nvl(NOMINALWIDTHPASSFAIL, 'y') as NOMINALWIDTHPASSFAIL,
                  nvl(NOMINALWIDTHDIFERENCE, 0) as NOMINALWIDTHDIFERENCE,
                  nvl(NOMINALWIDTHTOLERANCE, 0) as NOMINALWIDTHTOLERANCE,
                  nvl(MAXOVERALLDIAMETER, 0) as MAXOVERALLDIAMETER,
                  nvl(MINOVERALLDIAMETER, 0) as MINOVERALLDIAMETER,
                  nvl(OVERALLWIDTHPASSFAIL, 'y') as OVERALLWIDTHPASSFAIL,
                  nvl(OVERALLDIAMETERPASSFAIL, 'y') as OVERALLDIAMETERPASSFAIL,
                  nvl(DIAMETERDIFERENCE, 0) as DIAMETERDIFERENCE,
                  nvl(DIAMETERTOLERANCE, 0) as DIAMETERTOLERANCE,
                  nvl(TEMPRESISTANCEGRADING, 0) as TEMPRESISTANCEGRADING,
                  nvl(TENSILESTRENGHT1, 0) as TENSILESTRENGHT1,
                  nvl(TENSILESTRENGHT2, 0) as TENSILESTRENGHT2,
                  nvl(ELONGATION1, 0) as ELONGATION1,
                  nvl(ELONGATION2, 0) as ELONGATION2,
                  nvl(TENSILESTRENGHTAFTERAGE1, 0) as TENSILESTRENGHTAFTERAGE1,
                  nvl(TENSILESTRENGHTAFTERAGE2, 0) as TENSILESTRENGHTAFTERAGE2,
                  ce.CERTIFICATIONTYPEID,
                  ce.CERTIFICATENUMBER,
                  pce.SKUID
            FROM CERTIFICATE CE
                   inner join productcertificate pce on
                           ce.certificateid   = pce.certificateid and
                           ce.certificationtypeid = pce.certificationtypeid
                   inner join Certificationtype ct on
                        ce.CERTIFICATIONTYPEID = ct.CERTIFICATIONTYPEID
                   inner join MEASUREHDR m on
                      ce.certificateid = m.certificateid and
                      ce.certificationtypeid = m.certificationtypeid
           where lower(ce.certificatenumber) = lower(ps_certificateNumber) and
                 ce.CERTIFICATIONTYPEID = pi_certificationTypeID and rownum < 2 ;

            Open pc_PlungerHDR For
            SELECT  PLUNGERID,
                    PROJECTNUMBER,
                    TIRENUMBER,
                    TESTSPEC,
                    COMPLETIONDATE,
                    DOTSERIALNUMBER,
                    AVGBREAKINGENERGY,
                    PASSYN,
                    SERIALDATE,
                    MINPLUNGER,
                    ce.CERTIFICATIONTYPEID,
                    ce.CERTIFICATENUMBER,
                    pce.SKUID
            FROM  CERTIFICATE CE
                   inner join productcertificate pce on
                           ce.certificateid     = pce.certificateid and
                         ce.certificationtypeid = pce.certificationtypeid
                   inner join  Certificationtype ct on
                        ce.CERTIFICATIONTYPEID = ct.CERTIFICATIONTYPEID
                   inner join  PLUNGERHDR  p on
                      ce.certificateid       = p.certificateid and
                      ce.certificationtypeid = p.certificationtypeid
             where lower(ce.certificatenumber) = lower(ps_certificateNumber) and
                 ce.CERTIFICATIONTYPEID = pi_certificationTypeID And  rownum < 2  ;

            Open pc_beadunseathdr for
            SELECT  BEADUNSEATID,
                    PROJECTNUMBER,
                    TIRENUMBER,
                    TESTSPEC,
                    COMPLETIONDATE,
                    DOTSERIALNUMBER,
                    LOWESTUNSEATVALUE,
                    PASSYN,
                    SERIALDATE,
                    MINBEADUNSEAT,
                    PASSYN,
                    ce.CERTIFICATIONTYPEID,
                    ce.CERTIFICATENUMBER,
                    pce.SKUID
             FROM  CERTIFICATE CE
                    inner join productcertificate pce on
                           ce.certificateid     = pce.certificateid and
                         ce.certificationtypeid = pce.certificationtypeid
                   inner join  Certificationtype ct on
                        ce.CERTIFICATIONTYPEID = ct.CERTIFICATIONTYPEID
                   inner join  BEADUNSEATHDR B on
                       ce.certificateid      = b.certificateid and
                      ce.certificationtypeid = b.certificationtypeid
             where lower(ce.certificatenumber) = lower(ps_certificateNumber) and
                 ce.CERTIFICATIONTYPEID = pi_certificationTypeID And  rownum < 2  ;

            Open pc_treadwearhdr FOR
            SELECT  TREADWEARID,
                    PROJECTNUMBER,
                    TIRENUMBER,
                    TESTSPEC,
                    COMPLETIONDATE,
                    DOTSERIALNUMBER,
                    LOWESTWEARBAR,
                    PASSYN,
                    SERIALDATE,
                    INDICATORSREQUIREMENT,
                    ce.CERTIFICATIONTYPEID,
                    ce.CERTIFICATENUMBER,
                    pce.SKUID
            FROM  CERTIFICATE CE
                   inner join productCertificate pce on
                         ce.certificateid   = pce.certificateid and
                         ce.certificationtypeid = pce.certificationtypeid
                   inner join  Certificationtype ct on
                        ce.CERTIFICATIONTYPEID = ct.CERTIFICATIONTYPEID
                   inner join  TREADWEARHDR T on
                       ce.certificateid      = t.certificateid and
                      ce.certificationtypeid = t.certificationtypeid
            where lower(ce.certificatenumber) = lower(ps_certificateNumber) and
                 ce.CERTIFICATIONTYPEID = pi_certificationTypeID And  rownum < 2  ;

            Open  pc_endurance FOR
            SELECT
                  ENDURANCEID,
                  PROJECTNUMBER,
                  TIRENUMBER,
                  TESTSPEC,
                  COMPLETIONDATE,
                  DOTSERIALNUMBER,
                  MFGWWYY,
                  PRECONDSTARTDATE,
                  PRECONDSTARTTEMP,
                  RIMDIAMETER,
                  RIMWIDTH,
                  PRECONDENDDATE,
                  PRECONDENDTEMP,
                  INFLATIONPRESSURE,
                  BEFOREDIAMETER,
                  AFTERDIAMETER,
                  BEFOREINFLATION,
                  AFTERINFLATION,
                  WHEELPOSITION,
                  WHEELNUMBER,
                  FINALTEMP,
                  FINALDISTANCE,
                  FINALINFLATION,
                  POSTCONDSTARTDATE,
                  POSTCONDENDDATE,
                  POSTCONDENDTEMP,
                  PASSYN,
                  SERIALDATE,
                  PRECONDTIME,
                  POSTCONDTIME,
                  DIAMETERTESTDRUM,
                  PRECONDTEMP,
                  INFLATIONPRESSUREREADJUSTED,
                  CIRCUNFERENCEBEFORETEST,
                  RESULTPASSFAIL,
                  ENDURANCEHOURS,
                  POSSIBLEFAILURESFOUND,
                  CIRCUNFERENCEAFTERTEST,
                  OUTERDIAMETERDIFERENCE,
                  ODDIFERENCETOLERANCE,
                  SERIENOM,
                  FINALJUDGEMENT,
                  APPROVER,
                  ce.CERTIFICATIONTYPEID,
                  ce.CERTIFICATENUMBER,
                  pce.SKUID
            FROM  CERTIFICATE CE
                   inner join productCertificate pce on
                         ce.certificateid       = pce.certificateid and
                         ce.certificationtypeid = pce.certificationtypeid
                       inner join  Certificationtype ct on
                            ce.CERTIFICATIONTYPEID = ct.CERTIFICATIONTYPEID
                       inner join  ENDURANCEHDR E on
                           ce.certificateid      = e.certificateid and
                          ce.certificationtypeid = e.certificationtypeid
            where lower(ce.certificatenumber) = lower(ps_certificateNumber) and
                 ce.CERTIFICATIONTYPEID = pi_certificationTypeID And  rownum < 2  ;

            Open pc_highspeedhdr FOR
            SELECT HIGHSPEEDID,
                  PROJECTNUMBER,
                  TIRENUM,
                  TESTSPEC,
                  COMPETIONDATE,
                  DOTSERIALNUMBER,
                  MFGWWYY,
                  PRECONDSTARTDATE,
                  PRECONDSARTTEMP,
                  RIMDIAMETER,
                  RIMWIDTH,
                  PRECONDENDDATE,
                  PRECONDENDTEMP,
                  INFLATIONPRESSURE,
                  BEFOREDIAMETER,
                  AFTERDIAMETER,
                  BEFOREINFLATION,
                  AFTERINFLATION,
                  WHEELPOSITION,
                  WHEELNUMBER,
                  FINALTEMP,
                  FINALDISTANCE,
                  FINALINFLATION,
                  POSTCONDSTARTDATE,
                  POSTCONDENDDATE,
                  POSTCONDENDTEMP,
                  PASSYN,
                  SERIALDATE,
                  POSTCONDTIME,
                  DIAMETERTESTDRUM,
                  PRECONDTIME,
                  PRECONDTEMP,
                  INFLATIONPRESSUREREADJUSTED,
                  CIRCUNFERENCEBEFORETEST,
                  WHEELSPEEDRPM,
                  WHEELSPEEDKMH,
                  CIRCUNFERENCEAFTERTEST,
                  ODDIFERENCE,
                  ODDIFERENCETOLERANCE,
                  SERIENOM,
                  FINALJUDGEMENT,
                  APPROVER,
                  PASSATKMH,
                  SPEEDTTESTPASSFAIL,
                  SPEEDTOTALTIME,
                  MAXSPEED,
                  MAXLOAD,
                  ce.CERTIFICATIONTYPEID,
                  ce.CERTIFICATENUMBER,
                  pce.SKUID
            FROM  CERTIFICATE CE
                   inner join productCertificate pce on
                          ce.certificateid       = pce.certificateid and
                         ce.certificationtypeid = pce.certificationtypeid
                       inner join  Certificationtype ct on
                            ce.CERTIFICATIONTYPEID = ct.CERTIFICATIONTYPEID
                       inner join  HIGHSPEEDHDR H on
                          ce.certificateid       = h.certificateid and
                          ce.certificationtypeid = h.certificationtypeid
            where lower(ce.certificatenumber) = lower(ps_certificateNumber) and
                 ce.CERTIFICATIONTYPEID = pi_certificationTypeID And  rownum < 2  ;



  EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:=  ' There is at least one parameters null.'  ;
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' Reports_Package.GetGSOPassengerReport',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20005,ls_ErrorMsg);

         when li_ParametersAreInvalid then
            ls_ErrorMsg:=  sqlerrm || ' There is at least one parameters invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' Reports_Package.GetGSOPassengerReport',
                AX_RECORDDATA    => 'There is at least one parameters invalid.',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20006,ls_ErrorMsg);

         when others then
              ls_ErrorMsg:=  'An error have ocurred.(when others)' || sqlerrm;
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' Reports_Package.GetGSOPassengerReport',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);

  end GetGSOPassengerReport;

  PROCEDURE GetCertificateReportInfoBySKU(  pc_Product       out retCursor,
                                             pc_Certificate   out retCursor,
                                             PC_TESTREFERENCE out retCursor,
                                             --ps_sku           in varchar2,
                                             ps_Matl_Num      in varchar2, -- Added as per PRJ3617
                                             ps_Operatorid    in varchar2,
                                             --ps_BrandCode     in varchar2,
                                             ps_Brand         in varchar2,-- Added as per PRJ3617
                                             ps_Brand_Line    in varchar2,-- Added as per PRJ3617
                                             ps_CertType      in varchar2) as
    /************************************************************************************************
     Procedure Name - GetCertificateReportInfoBySKU
     Change History
      --------------------------------------------------------------------------
      Version No  Date          Author    Description
      ---------------------------------------------------------------------------
          1.0                             Intial Version
          1.1     9/17/2012     Krishna   - As per PRJ3617
                                            - Added Matl_num where Sku exist
                                            - Replaced ps_Sku with ps_Matl_Num
                                            - Replaced BrandCode with Brand and Brand_Line
                                            - Replaced NPRID with PSN
                   10/31/2016  JESEITZ - fixed bug where IMARK_FAMILY not joined correctly for GETCERTIFICATEREPORTINFOBYSKU
    *************************************************************************************************/

   --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);

      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);

      li_LatestSkuId  product.skuid%TYPE;
      li_certificationtypeid CERTIFICATE.CERTIFICATIONTYPEID%type;
  begin

      --if ps_sku is null then
      --    raise li_ParametersAreNull ;
      --end if;

       --if ps_sku =''  then
       --   raise li_ParametersAreNull ;
       --end if;

      begin
      ---find the certificationtype code selected.
      select certificationtypeid into li_certificationtypeid from
         certificationtype ct where upper( ps_CertType) = upper(ct.certificationtypename);
      exception
      when others then
        li_certificationtypeid := 0;
      end;

      if ps_Operatorid is not null or ps_Operatorid <> '' then
          ls_OperatorId:=ps_Operatorid;
      end if;

      IF ps_matl_num IS NOT NULL THEN
        li_LatestSkuId := ICS_COMMON_FUNCTIONS.GETLATESTSKUIDBYSKU(PS_Matl_Num => ps_matl_num);
      ELSE
        li_LatestSkuId := NULL;
      END IF;


       Open pc_Product for
         SELECT DISTINCT SKUID,
                      SKU,
                      LPAD(MATL_NUM,18,0) AS MATL_NUM, -- Added as per PRJ3617
                      --BRANDCODE,
                      BRAND,  -- Added as per PRJ3617
                      BRAND_LINE, -- Added as per PRJ3617
                      TIRETYPEID,
                      --NPRID,
                      PSN, -- Added as per PRJ3617
                      SIZESTAMP,
                      DISCONTINUEDDATE,
                      SPECNUMBER,
                      SPEEDRATING,
                      SINGLOADINDEX,
                      DUALLOADINDEX,
                      BIASBELTEDRADIAL,  --JES
                      TUBELESSYN,
                      REINFORCEDYN,
                      EXTRALOADYN,
                      MEARIMWIDTH,
                      UTQGTREADWEAR,
                      UTQGTRACTION,
                      UTQGTEMP,
                      MUDSNOWYN,
                      RIMDIAMETER,
                      --NULL CERTIFICATENUMBER,
                      --NULL EXTENSION_EN
                      CERTIFICATENUMBER,
                      EXTENSION_EN
                FROM  PRODUCTDATA_REPORT_VIEW
                where (SKUID = li_LatestSkuId OR li_LatestSkuId IS NULL)
                    AND   (Brand = ps_Brand OR ps_Brand IS NULL) -- Added as per PRJ3617
                    AND   (Brand_Line = ps_Brand_Line OR ps_Brand_Line IS NULL) -- Added as per PRJ3617
                AND   SKUID = (SELECT MAX(SKUID)
                             FROM PRODUCT
                             WHERE PRODUCT.Matl_Num = LPAD(PRODUCTDATA_REPORT_VIEW.Matl_Num,18,0));-- Added as per PRJ3617


          -- Gets the Certificate information
       Open pc_Certificate for
       SELECT pce.SKUID,
              ce.CERTIFICATIONTYPEID,
              ct.certificationtypename,
              ce.CERTIFICATENUMBER,
              DATESUBMITTED,
              ACTIVESTATUS,
              pce.DATEASSIGNED_EGI,
              DATEAPPROVED_CEGI,
              RENEWALREQUIRED_CGIN,
             ' ' SUPPLEMENTALREQUIRED_EI, --JES 4/4/11
             ' ' SUPPLEMENTALNUMBER_EI,    --JES 4/4/11
              JOBREPORTNUMBER_CEN,
              EXTENSION_EN,
              SUPPLEMENTALMOLDSTAMPING_E,
              ---ps_CertType CERTTYPE, ---JES 2/15/12
               ct.certificationtypename CERTTYPE,
              ---SUPPLEMENTALDATEASSIGNED_E,
              ---SUPPLEMENTALDATESUBMITTED_E,
              ---SUPPLEMENTALDATEAPPROVED_E,
              EMARKREFERENCE_I,
              EXPIRYDATE_I,
              ifam.FAMILY_CODE FAMILY_I,
              PRODUCTLOCATION,
              COUNTRYOFMANUFACTURE_N,
              CUSTOMER CUSTOMER_N,
              CUSTOMERSPECIFIC_N,
              IMPORTER IMPORTER_N, --JES 4/4/11
              IMPORTERADDRESS IMPORTERADDRESS_N,   --JES 4/4/11
              IMPORTERREPRESENTATIVE IMPORTERREPRESENTATIVE_N, --JES 4/4/11
              COUNTRYLOCATION COUNTRYLOCATION_N, -- JES 4/6/11 -- we'll check to see if we need this for the report.
              BATCHNUMBER_G
            FROM  CERTIFICATE CE
                   inner join  productCertificate pce on
                         ce.certificateid       = pce.certificateid and
                         ce.certificationtypeid = pce.certificationtypeid
                   INNER JOIN  CERTIFICATIONTYPE CT ON
                         CE.CERTIFICATIONTYPEID = ct.certificationtypeid
                   INNER JOIN product P on
                        P.skuid = pce.skuid
                   LEFT OUTER JOIN IMARK_FAMILY ifam on
                        ifam.family_id = P.family
                        and IFAM.CERTIFICATEID = CE.CERTIFICATEID  --JES 10/31/2016
                    LEFT OUTER JOIN IMPORTER IM ON   --- JES 4/4/11
                         CE.IMPORTERID = IM.IMPORTERID
                    left outer join CUSTOMER CU ON --- jes 5/2/11
                        CE.CUSTOMERID = CU.CUSTOMERID
        WHERE (pce.skuid = li_LatestSkuId OR li_LatestSkuId IS NULL)
            and   (li_certificationtypeid = 0 or  li_certificationtypeid = CE.CERTIFICATIONTYPEID)
            --Added as per PRJ3617 BrandCode with Brand and Brand_Line, Sku with Matl_Num,
            AND (ps_Brand IS NULL or ps_Brand_Line IS NULL or pce.skuid IN (SELECT SKUID FROM PRODUCT
                                                                             WHERE Brand = ps_Brand
                                                                               AND Brand_Line = ps_Brand_Line
                                                                               AND SKUID = (SELECT MAX(SKUID) FROM PRODUCT P2
                                                                                             WHERE P2.Matl_Num = LPAD(PRODUCT.Matl_Num,18,0))));

        OPEN PC_TESTREFERENCE FOR
        SELECT CERTIFICATENUMBER,
              SKUID,
              MEASUREMENT_TESTREFERENCE,
              PLUNGER_TESTREFERENCE,
              BEADUNSEAT_TESTREFERENCE,
              ENDURANCE_TESTREFERENCE,
              HIGHSPEED_TESTREFERENCE,
              LAB_TESTREFERENCE,
              WHEEL_TESTREFERENCE,
              NOISE_TESTREFERENCE,
              WG_TESTREFERENCE,
              RR_TESTREFERENCE
        FROM  TESTREFERENCE_VIEW T
        WHERE (T.SKUID = li_LatestSkuId OR li_LatestSkuId IS NULL)
        -- Added as per PRJ3617 BrandCode with Brand and Brand_Line, Sku with Matl_Num
            AND (ps_Brand IS NULL Or ps_brand_line IS NULL or T.SKUID IN (SELECT SKUID FROM PRODUCT
                                                                           WHERE Brand = ps_Brand
                                                                           AND   Brand_Line = ps_Brand_Line
                                                                           AND SKUID = (SELECT MAX(SKUID) FROM PRODUCT P2
                                                                                        WHERE P2.Matl_Num = LPAD(PRODUCT.Matl_Num,18,0))));

  EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:=  ' There is at least one parameters null.'  ;
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' Reports_Package.GetCertificateReportInfo',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20005,ls_ErrorMsg);

         when li_ParametersAreInvalid then
            ls_ErrorMsg:=  sqlerrm || ' There is at least one parameters invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' Reports_Package.GetCertificateReportInfo',
                AX_RECORDDATA    => 'There is at least one parameters invalid.',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20006,ls_ErrorMsg);

         when others then
              ls_ErrorMsg:=  'An error have ocurred.(when others)' || sqlerrm;
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' Reports_Package.GetCertificateReportInfo',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);

  end GetCertificateReportInfoBySKU;

   procedure GetImarkCertificationInfo(pc_ImarkCertification out retcursor,pd_DateSearchCriteria in Date) as
    /************************************************************************************************
     Procedure Name - GetImarkCertificationInfo
     Change History
      --------------------------------------------------------------------------
      Version No  Date          Author    Description
      ---------------------------------------------------------------------------
          1.0                             Intial Version
          1.1     9/17/2012     Krishna   - As per PRJ3617
                                            - Added Matl_num where Sku exist
                                            - Removed brand_details_mv in queries, used Brand, Brand_Line
                                              for BrandDesc

    *************************************************************************************************/

      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
   begin
        if pd_DateSearchCriteria is null then
         open pc_ImarkCertification for
          SELECT distinct to_number(PIF.familyID)  AS family,
          p.sku,
          LPAD(p.matl_num,18,0) AS matl_num, -- Added as per PRJ3617
          p.emarkreference_i AS emarkreference,
          p.sizestamp,
          --b.brand_desc brandname,
          p.Brand, -- Added as per PRJ3617
          p.Brand_Line,-- Added as per PRJ3617
          p.singloadindex,
          p.dualloadindex,
          p.speedrating,
          pce.datesubmitted,
          pce.dateapproved_cegi AS dateapproved,
          p.discontinueddate,
          PCE.DATEASSIGNED_EGI as dateassigned
     FROM /*brand_details_mv b
          INNER JOIN product p
             ON b.brand_code = p.brandcode*/
          Product p
          INNER JOIN productcertificate pce
             ON p.skuid = pce.skuid
          INNER JOIN certificate ce
             ON pce.certificateid = ce.certificateid
                AND pce.certificationtypeid = ce.certificationtypeid
                         LEFT OUTER JOIN PRODUCT_IMARK_FAMILY PIF
              ON P.SKUID = PIF.SKUID
              AND PCE.CERTIFICATEID = PIF.CERTIFICATEID
    WHERE ce.certificationtypeid = 4
    and lower(ce.mostrecentcert) = 'y'
    and pce.dateapproved_cegi is not null
    and PCE.DATEREMOVED is null;


--                SELECT FAMILY,
--                        SKU,
--                        EMARKREFERENCE,
--                        SIZESTAMP,
--                        BRANDNAME,
--                        SINGLOADINDEX,
--                        DUALLOADINDEX,
--                        SPEEDRATING,
--                        datesubmitted,
--                        DATEAPPROVED,
--                        DISCONTINUEDDATE
--                 FROM  IMARKCERTIFICATE_VIEW ;

         else
              open pc_ImarkCertification for
            SELECT distinct to_number(PIF.familyID) AS family,
          p.sku,
          LPAD(p.matl_num,18,0) AS matl_num, -- Added as per PRJ3617
          p.emarkreference_i AS emarkreference,
          p.sizestamp,
          --b.brand_desc brandname,
          p.Brand, -- Added as per PRJ3617
          p.Brand_Line, -- Added as per PRJ3617
          p.singloadindex,
          p.dualloadindex,
          p.speedrating,
          pce.datesubmitted,
          pce.dateapproved_cegi AS dateapproved,
          p.discontinueddate,
          PCE.DATEASSIGNED_EGI as dateassigned
     FROM /*brand_details_mv b
          INNER JOIN product p
             ON b.brand_code = p.brandcode*/
           Product p
          INNER JOIN productcertificate pce
             ON p.skuid = pce.skuid
          INNER JOIN certificate ce
             ON pce.certificateid = ce.certificateid
                AND pce.certificationtypeid = ce.certificationtypeid
                         LEFT OUTER JOIN PRODUCT_IMARK_FAMILY PIF
              ON P.SKUID = PIF.SKUID
              AND PCE.CERTIFICATEID = PIF.CERTIFICATEID
    WHERE ce.certificationtypeid = 4
    and lower(ce.mostrecentcert) = 'y'
    and datesubmitted >= pd_DateSearchCriteria
    and pce.dateapproved_cegi is not null
    and pce.dateremoved is null;


--
--
--              SELECT FAMILY,
--                        SKU,
--                        EMARKREFERENCE,
--                        SIZESTAMP,
--                        BRANDNAME,
--                        SINGLOADINDEX,
--                        DUALLOADINDEX,
--                        SPEEDRATING,
--                        datesubmitted,
--                        DATEAPPROVED,
--                        DISCONTINUEDDATE
--                 FROM  IMARKCERTIFICATE_VIEW
--                 WHERE datesubmitted >= pd_DateSearchCriteria ;
         end if ;


  EXCEPTION

         when others then
              ls_ErrorMsg:=  'An error have ocurred.(when others)' || sqlerrm;
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' Reports_Package.GetImarkCertificationInfo',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);
   end GetImarkCertificationInfo;

  procedure GetEmarkCertificationInfo(
                                     pc_EmarkCertification out retcursor,
                                     pc_Product out retcursor,
                                     ps_certificateNumber in varchar2,
                                     ps_BrandCode     in varchar2) as


  begin


        Open pc_Product for
             SELECT p.SKUID,
                    SKU,
                    BRANDCODE,
                    TIRETYPEID,
                    NPRID,
                    SIZESTAMP,
                    DISCONTINUEDDATE,
                    SPECNUMBER,
                    SPEEDRATING,
                    SINGLOADINDEX,
                    DUALLOADINDEX,
                    BIASBELTEDRADIAL,  --JES
                    TUBELESSYN,
                    REINFORCEDYN,
                    EXTRALOADYN,
                    MEARIMWIDTH,
                    UTQGTREADWEAR,
                    UTQGTRACTION,
                    UTQGTEMP,
                    MUDSNOWYN,
                    RIMDIAMETER
             from  product p
                  inner join productCertificate pce on
                          p.skuid = pce.skuid
                  inner join certificate ce on
                           ce.certificateid      = pce.certificateid and
                          ce.certificationtypeid = pce.certificationtypeid
             where ce.certificationtypeid = 1
                       and lower( CE.MOSTRECENTCERT) = 'y'
                       and PCE.DATEAPPROVED_CEGI is not null
                       and(ps_certificatenumber is null or
                          lower(ce.certificatenumber) =lower(ps_certificateNumber))
                        and  (ps_BrandCode is null or lower(P.BRANDCODE) =  lower( ps_BrandCode ) );


--
--          OPEN pc_EmarkCertification for
--          SELECT SKUID,
--            CERTIFICATENUMBER,
--            CERTIFICATIONTYPEID,
--            datesubmitted,
--            ACTIVESTATUS,
--            DATEASSIGNED_EGI,
--            DATEAPPROVED_CEGI,
--            SUPPLEMENTALREQUIRED_EI,
--            SUPPLEMENTALNUMBER_EI,
--            JOBREPORTNUMBER_CEN,
--            EXTENSION_EN,
--            SUPPLEMENTALMOLDSTAMPING_E,
--            ---SUPPLEMENTALDATEASSIGNED_E,
--            WHEELTESTREFERENCE,
--            NOISETESTREFERENCE,
--            WGTESTREFERENCE,
--            RRTESTREFERENCE
--          FROM EMARKCERTIFICATIONREPORT_VIEW
--          where certificationtypeid = 1;
--
         OPEN pc_EmarkCertification for
           SELECT
               pe.SKUID,
               CERTIFICATENUMBER,
               ce.CERTIFICATIONTYPEID,
               DATESUBMITTED,
               ACTIVESTATUS,
               DATEASSIGNED_EGI,
              DATEAPPROVED_CEGI,
              JOBREPORTNUMBER_CEN,
              EXTENSION_EN,
              SUPPLEMENTALMOLDSTAMPING_E,
              'Not defiened yet' AS WHEELTESTREFERENCE,
              'Not defiened yet' AS  NOISETESTREFERENCE,
              'Not defiened yet' AS WGTESTREFERENCE,
              'Not defiened yet' AS RRTESTREFERENCE
               FROM    productcertificate pe
                   INNER JOIN
                   certificate ce
                   ON pe.certificateid = ce.certificateid
                   AND pe.certificationtypeid = ce.certificationtypeid
                   inner join
                   product p
                   on PE.SKUID = p.skuid
                   WHERE ce.certificationtypeid = 1
                   AND lower(CE.MOSTRECENTCERT) = 'y'
                   and PE.DATEAPPROVED_CEGI is not null
                   and(  ps_certificatenumber is null or
                    lower(ce.certificatenumber) =lower(ps_certificateNumber))
                  and (ps_BrandCode is null or lower(P.BRANDCODE) =  lower( ps_BrandCode ) );


  end GetEmarkCertificationInfo;


 Procedure GetEmarkPassengerWithTR( ps_CertificateNumber in varchar2,
                                     pi_tiretypeid        in number,
                                     pc_CertificateDfValue  out retCursor,
                                     pc_CertificateInfo   out retCursor,
                                     pc_Product           out retcursor,
                                     pc_MeasureHDR        out retCursor,
                                     pc_measureDtl        out retCursor,
                                     pc_BEADUNSEATHDR     out retCursor,
                                     pc_BEADUNSEATDTL     out retCursor,
                                     pc_PLUNGERHDR        out retCursor,
                                     pc_PLUNGERDTL        out retCursor,
                                     pc_TREADWEARHDR      out retCursor,
                                     pc_TREADWEARDTL      out retCursor,
                                     pc_ENDURANCEHDR      out retCursor,
                                     pc_ENDURANCEDTL      out retCursor,
                                     pc_HIGHSPEEDHDR      out retCursor,
                                     pc_HIGHSPEEDDTL      out retCursor,
                                     pc_SPEEDTESTDETAIL   out retCursor,
                                     pc_Brand             out retCursor) as

      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
       li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);

      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
  begin

      if ps_CertificateNumber is null then
          raise li_ParametersAreNull;
      end if ;
      if ps_CertificateNumber = '' then
          raise li_ParametersAreInvalid;
      end if ;


      -- Gets the brand information
          Open pc_brand for
          SELECT distinct  BRANDCODE, ---get all brands that have ever been associated with this certificate, because
                        BRANDNAME,           ---the sks's that were on the original test specs may have since been discontinued
                        CERTIFICATENUMBER---but just get each brand once, even though it is multiple extensions.
          FROM  brand_view
          where lower(certificatenumber) = lower(ps_certificateNumber)  ;

      --Gets the default values information.
            OPen pc_CertificateDfValue for
            SELECT CERTIFICATENUMBER,
                    MAX(DECODE(fieldid,1,fieldvalue,NULL)) MANUFACTURERNAME_E,
                    MAX(DECODE(fieldid,2,fieldvalue,NULL)) MANUFACTURERNAMEADDRESS_E,
                    MAX(DECODE(fieldid,3,fieldvalue,NULL)) TECHNICALSERVICE_E,
                    MAX(DECODE(fieldid,4,fieldvalue,NULL)) PLACE_E,
                    MAX(DECODE(fieldid,5,fieldvalue,NULL)) MEASURERIM_E,
                    MAX(DECODE(fieldid,6,fieldvalue,NULL)) INFLATIONPRESSURE_E,
                    MAX(DECODE(fieldid,7,fieldvalue,NULL)) TESTLABORATORY_E,
                    MAX(DECODE(fieldid,8,fieldvalue,NULL)) REPRESENTATIVENAME_E,
                    MAX(DECODE(fieldid,9,fieldvalue,NULL)) REPRESENTATIVEADDRESS_E,
                    MAX(DECODE(fieldid,10,fieldvalue,NULL)) REASONOFEXTENSION_E,
                    MAX(DECODE(fieldid,11,fieldvalue,NULL)) REMARKS_E
            FROM (
                SELECT FIELDID,
                  CERTIFICATIONTYPEID,
                  CERTIFICATENUMBER,
                  FIELDVALUE
                FROM defaultvalues_view
                WHERE lower(certificatenumber) = lower(ps_certificateNumber) and
                      CERTIFICATIONTYPEID = 1
              )
            group by CERTIFICATENUMBER ;

             Open pc_CertificateInfo for
                          Select
                    CERTIFICATEID,
                    ce.CERTIFICATIONTYPEID,
                    CERTIFICATIONTYPENAME,
                    CERTIFICATENUMBER,
                    --datesubmitted,
                    ACTIVESTATUS,
                     --DATEASSIGNED_EGI,
                    --DATEAPPROVED_CEGI,
                     RENEWALREQUIRED_CGIN,
                     ---SUPPLEMENTALREQUIRED_EI,
                     ---SUPPLEMENTALNUMBER_EI,
                     JOBREPORTNUMBER_CEN,
                     EXTENSION_EN,
                     SUPPLEMENTALMOLDSTAMPING_E,
                     ---SUPPLEMENTALDATEASSIGNED_E,
                     ---SUPPLEMENTALDATESUBMITTED_E,
                     ---SUPPLEMENTALDATEAPPROVED_E,
                     ---EMARKREFERENCE_I,
                     EXPIRYDATE_I,
                     ' ' "FAMILY_I"
                     ---PRODUCTLOCATION PRODUCTLOCATION_C,
                    --- COUNTRYOFMANUFACTURE_N,
                    --- CUSTOMER_N,
                     ---CUSTOMERSPECIFIC_N,
                     ---IMPORTER_N,
                     ---IMPORTERADDRESS_N,
                     ---IMPORTERREPRESENTATIVE_N,
                     ---COUNTRYLOCATION_N,
                     ---BATCHNUMBER_G
                        From Certificate ce
                          inner join  certificationtype ct on
                            CT.CERTIFICATIONTYPEID = CE.CERTIFICATIONTYPEID
                          Where ce.CERTIFICATIONTYPEID = 1 And
                           lower(ce.certificatenumber) = lower(ps_certificateNumber) and
                           lower(CE.MOSTRECENTCERT) = 'y'  ;


--     JES - REPLACED 2/20/2011        Select *
--             From Certificate_View cv
--                      inner join productcertificate pce on
--                            cv.certificationtypeid = pce.certificationtypeid and
--                            cv.certificateid   = pce.certificateid and
--                               CV.SKUID = PCE.SKUID   ---jes
--                      inner join product p on
--                            pce.skuid = p.skuid and
--                            p.tiretypeid = pi_tiretypeid
--             Where cv.CERTIFICATIONTYPEID = 1 And
--                   lower(cv.certificatenumber) = lower(ps_certificateNumber);

--                     Open pc_CertificateInfo for
--             Select *
--             From Certificate_View cv ,productcertificate pce, product p
--                     WHERE
--                            cv.certificationtypeid = pce.certificationtypeid and
--                            cv.certificateid   = pce.certificateid and
--                            CV.SKUID = PCE.SKUID
--                   AND
--                            p.skuid = pce.skuid and
--                            p.tiretypeid = pi_tiretypeid
--            AND cv.CERTIFICATIONTYPEID = 1 And
--                   lower(cv.certificatenumber) = lower(ps_certificateNumber);
--

             Open pc_Product for
              SELECT distinct    SKUID,  SKU, BRANDCODE, TIRETYPEID, NPRID,
                 SIZESTAMP,   DISCONTINUEDDATE,   SPECNUMBER,   SPEEDRATING,
                 SINGLOADINDEX,   DUALLOADINDEX,   BIASBELTEDRADIAL,   TUBELESSYN,
                 REINFORCEDYN,   EXTRALOADYN,   UTQGTREADWEAR,   UTQGTRACTION,
                 UTQGTEMP,   MUDSNOWYN,   RIMDIAMETER,   SERIALDATE,   BRANDDESC,
                 LOADRANGE,   MEARIMWIDTH,   REGROOVABLEIND,   PLANTPRODUCED,
                 MOSTRECENTTESTDATE,   IMARK,   INFORMENUMBER,   FECHADATE,
                 TREADPATTERN,   SPECIALPROTECTIVEBAND,   NOMINALTIREWIDTH,
                 ASPECTRATIO,   TREADWEARINDICATORS,   NAMEOFMANUFACTURER,
                 FAMILY,   DOTSERIALNUMBER,   CERTIFICATENUMBER,   SUPPLEMENTALEXTENSION_EN
             ----EXTENSION_EN -- we just want the unique product records that have ever been assoc. with
             ---this certificate.
     FROM  productdata_report_view
              where lower(certificatenumber) = lower(ps_certificateNumber)  and
                    TireTypeID = pi_tiretypeid;
                    ----and rownum < 2;   took this out -- JES 2/25/2010

            Open pc_MeasureHDR for
            SELECT  MEASUREID,
                    PROJECTNUMBER,
                    TIRENUMBER,
                    TESTSPEC,
                    COMPLETIONDATE,
                    INFLATIONPRESSURE,
                    MOLDDESIGN,
                    RIMWIDTH,
                    DOTSERIALNUMBER,
                    DIAMETER,
                    AVGSECTIONWIDTH,
                    AVGOVERALLWIDTH,
                    MAXOVERALLWIDTH,
                    SIZEFACTOR,
                    MOUNTTIME,
                    MOUNTTEMP,
                    SERIALDATE,
                    ENDTIME,
                    ACTSIZEFACTOR,
                    ce.CERTIFICATIONTYPEID,
                    CERTIFICATENUMBER,
                    STARTINFLATIONPRESSURE,
                    ENDINFLATIONPRESSURE,
                    ADJUSTMENT,
                    CIRCUMFERENCE,
                    NOMINALDIAMETER,
                    NOMINALWIDTH,
                    NOMINALWIDTHPASSFAIL,
                    NOMINALWIDTHDIFERENCE,
                    NOMINALWIDTHTOLERANCE,
                    MAXOVERALLDIAMETER,
                    MINOVERALLDIAMETER,
                    OVERALLWIDTHPASSFAIL,
                    OVERALLDIAMETERPASSFAIL,
                    DIAMETERDIFERENCE,
                    DIAMETERTOLERANCE,
                    TEMPRESISTANCEGRADING,
                    TENSILESTRENGHT1,
                    TENSILESTRENGHT2,
                    ELONGATION1,
                    ELONGATION2,
                    TENSILESTRENGHTAFTERAGE1,
                    TENSILESTRENGHTAFTERAGE2,
                    SKU
              FROM Certificate ce inner join MEASUREHDR m on
                       ce.certificateid = m.certificateid and
                       ce.certificationtypeid = m.certificationtypeid
              where ce.certificationtypeid = 1 and
                    lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                    and upper(CE.MOSTRECENTCERT) = 'Y';

              open pc_measureDtl for
              SELECT md.MEASUREID,
                    SECTIONWIDTH,
                    OVERALLWIDTH,
                    ITERATION
              FROM Certificate ce inner join MEASUREHDR m on
                       ce.certificateid = m.certificateid and
                       ce.certificationtypeid = m.certificationtypeid and
                       lower(CE.MOSTRECENTCERT) = 'y'
                    inner join MEASUREDTL md on
                           m.measureid = md.measureid
              where m.certificationtypeid = 1 and
                    lower(ce.certificatenumber) = lower(ps_CertificateNumber);

              open pc_BEADUNSEATHDR for
              SELECT BEADUNSEATID,
                    PROJECTNUMBER,
                    TIRENUMBER,
                    TESTSPEC,
                    COMPLETIONDATE,
                    DOTSERIALNUMBER,
                    LOWESTUNSEATVALUE,
                    PASSYN,
                    b.CERTIFICATIONTYPEID,
                    CERTIFICATENUMBER,
                    SERIALDATE,
                    MINBEADUNSEAT,
                    TESTPASSFAIL,
                    SKU
             FROM Certificate ce inner join BEADUNSEATHDR b on
                       ce.certificateid = b.certificateid and
                       ce.certificationtypeid = b.certificationtypeid
                     where b.certificationtypeid = 1 and
                     lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                    AND lower(CE.MOSTRECENTCERT) = 'y';

               open pc_BEADUNSEATDTL for
               SELECT bd.BEADUNSEATID,
                      UNSEATFORCE,
                      ITERATION
               FROM Certificate ce
                             inner join BEADUNSEATHDR b on
                                    ce.certificateid = b.certificateid and
                                    ce.certificationtypeid = b.certificationtypeid
                             inner join BEADUNSEATDTL bd on
                                   b.beadunseatid = bd.beadunseatid
               where b.certificationtypeid = 1 and
                     lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                     AND lower(CE.MOSTRECENTCERT) = 'y';

               open pc_PLUNGERHDR for
               SELECT PLUNGERID,
                      PROJECTNUMBER,
                      TIRENUMBER,
                      TESTSPEC,
                      COMPLETIONDATE,
                      DOTSERIALNUMBER,
                      AVGBREAKINGENERGY,
                      PASSYN,
                      p.CERTIFICATIONTYPEID,
                      CERTIFICATENUMBER,
                      SERIALDATE,
                      MINPLUNGER,
                      SKU
                 FROM Certificate ce
                             inner join  PLUNGERHDR p on
                                    ce.certificateid = p.certificateid and
                                    ce.certificationtypeid = p.certificationtypeid
                where p.certificationtypeid = 1 and
                       lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                       AND lower(CE.MOSTRECENTCERT) = 'y';

                open pc_PLUNGERDTL for
                SELECT pd.PLUNGERID,
                        BREAKINGENERGY,
                        ITERATION
                 FROM Certificate ce
                             inner join PLUNGERHDR ph on
                                   ce.certificateid       = ph.certificateid and
                                   ce.certificationtypeid = ph.certificationtypeid
                             inner join PLUNGERDTL pd on
                                  ph.plungerid = pd.plungerid
                where ph.certificationtypeid = 1 and
                      lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                      AND lower(CE.MOSTRECENTCERT) = 'y';


                open pc_TREADWEARHDR for
                SELECT TREADWEARID,
                      PROJECTNUMBER,
                      TIRENUMBER,
                      TESTSPEC,
                      COMPLETIONDATE,
                      DOTSERIALNUMBER,
                      LOWESTWEARBAR,
                      PASSYN,
                      SERIALDATE,
                      t.CERTIFICATIONTYPEID,
                      CERTIFICATENUMBER,
                      INDICATORSREQUIREMENT,
                      SKU
                FROM Certificate ce
                             inner join TREADWEARHDR t on
                                   ce.certificateid       = t.certificateid and
                                   ce.certificationtypeid = t.certificationtypeid
                where t.certificationtypeid = 1 and
                       lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                        and lower(CE.MOSTRECENTCERT) = 'y';

                 open pc_TREADWEARDTL for
                  SELECT  td.TREADWEARID,
                          WEARBARHEIGHT,
                          ITERATION
                 FROM Certificate ce
                             inner join TREADWEARHDR t on
                                   ce.certificateid       = t.certificateid and
                                   ce.certificationtypeid = t.certificationtypeid
                            inner join TREADWEARDTL td on
                                   t.treadwearid = td.treadwearid
                where t.certificationtypeid = 1 and
                      lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                      AND lower(CE.MOSTRECENTCERT) = 'y';

                open pc_ENDURANCEHDR for
                SELECT ENDURANCEID,
                      PROJECTNUMBER,
                      TIRENUMBER,
                      TESTSPEC,
                      COMPLETIONDATE,
                      DOTSERIALNUMBER,
                      MFGWWYY,
                      PRECONDSTARTDATE,
                      PRECONDSTARTTEMP,
                      RIMDIAMETER,
                      RIMWIDTH,
                      PRECONDENDDATE,
                      PRECONDENDTEMP,
                      INFLATIONPRESSURE,
                      BEFOREDIAMETER,
                      AFTERDIAMETER,
                      BEFOREINFLATION,
                      AFTERINFLATION,
                      WHEELPOSITION,
                      WHEELNUMBER,
                      FINALTEMP,
                      FINALDISTANCE,
                      FINALINFLATION,
                      POSTCONDSTARTDATE,
                      POSTCONDENDDATE,
                      POSTCONDENDTEMP,
                      PASSYN,
                      e.CERTIFICATIONTYPEID,
                      CERTIFICATENUMBER,
                      SERIALDATE,
                      PRECONDTIME,
                      POSTCONDTIME,
                      DIAMETERTESTDRUM,
                      PRECONDTEMP,
                      INFLATIONPRESSUREREADJUSTED,
                      CIRCUNFERENCEBEFORETEST,
                      RESULTPASSFAIL,
                      ENDURANCEHOURS,
                      POSSIBLEFAILURESFOUND,
                      CIRCUNFERENCEAFTERTEST,
                      OUTERDIAMETERDIFERENCE,
                      ODDIFERENCETOLERANCE,
                      SERIENOM,
                      FINALJUDGEMENT,
                      APPROVER,
                      SKU
                    FROM Certificate ce inner join ENDURANCEHDR e on
                               ce.certificateid = e.certificateid and
                               ce.certificationtypeid = e.certificationtypeid
                    where e.certificationtypeid = 1 and
                       lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                       AND lower(CE.MOSTRECENTCERT) = 'y';

                    open pc_ENDURANCEDTL for
                    SELECT TESTSTEP,
                      TIMEINMIN,
                      SPEED,
                      TOTMILES,
                      LOAD,
                      LOADPERCENT,
                      SETINFLATION,
                      AMBTEMP,
                      INFPRESSURE,
                      STEPCOMPLETIONDATE,
                      ed.ENDURANCEID
                    FROM Certificate ce
                              inner join ENDURANCEHDR e on
                                     ce.certificateid = e.certificateid and
                                     ce.certificationtypeid = e.certificationtypeid
                              inner join ENDURANCEDTL ed on
                                     e.enduranceid = ed.enduranceid
                    where e.certificationtypeid = 1 and
                          lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                          AND lower(CE.MOSTRECENTCERT) = 'y';

                    open pc_HIGHSPEEDHDR for
                    SELECT HIGHSPEEDID,
                      PROJECTNUMBER,
                      TIRENUM,
                      TESTSPEC,
                      COMPETIONDATE,
                      DOTSERIALNUMBER,
                      MFGWWYY,
                      PRECONDSTARTDATE,
                      PRECONDSARTTEMP,
                      RIMDIAMETER,
                      RIMWIDTH,
                      PRECONDENDDATE,
                      PRECONDENDTEMP,
                      INFLATIONPRESSURE,
                      BEFOREDIAMETER,
                      AFTERDIAMETER,
                      BEFOREINFLATION,
                      AFTERINFLATION,
                      WHEELPOSITION,
                      WHEELNUMBER,
                      FINALTEMP,
                      FINALDISTANCE,
                      FINALINFLATION,
                      POSTCONDSTARTDATE,
                      POSTCONDENDDATE,
                      POSTCONDENDTEMP,
                      PASSYN,
                      SERIALDATE,
                      POSTCONDTIME,
                      h.CERTIFICATIONTYPEID,
                      CERTIFICATENUMBER,
                      DIAMETERTESTDRUM,
                      PRECONDTIME,
                      PRECONDTEMP,
                      INFLATIONPRESSUREREADJUSTED,
                      CIRCUNFERENCEBEFORETEST,
                      WHEELSPEEDRPM,
                      WHEELSPEEDKMH,
                      CIRCUNFERENCEAFTERTEST,
                      ODDIFERENCE,
                      ODDIFERENCETOLERANCE,
                      SERIENOM,
                      FINALJUDGEMENT,
                      APPROVER,
                      PASSATKMH,
                      SPEEDTTESTPASSFAIL,
                      SPEEDTOTALTIME,
                      MAXSPEED,
                      MAXLOAD,
                      SKU
                    FROM Certificate ce inner join HIGHSPEEDHDR h on
                               ce.certificateid = h.certificateid and
                               ce.certificationtypeid = h.certificationtypeid
                    where h.certificationtypeid = 1 and
                          lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                          AND lower(CE.MOSTRECENTCERT) = 'y';



                  open pc_HIGHSPEEDDTL for
                  SELECT TESTSTEP,
                    TIMEINMIN,
                    SPEED,
                    TOTMILES,
                    LOAD,
                    LOADPERCENT,
                    SETINFLATION,
                    AMBTEMP,
                    INFPRESSURE,
                    STEPCOMPLETIONDATE,
                    hd.HIGHSPEEDID
                  FROM Certificate ce
                              inner join HIGHSPEEDHDR h on
                                     ce.certificateid = h.certificateid and
                                     ce.certificationtypeid = h.certificationtypeid
                              inner join HIGHSPEEDDTL hd on
                                     h.highspeedid = hd.highspeedid
                    where h.certificationtypeid = 1 and
                          lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                          AND lower(CE.MOSTRECENTCERT) = 'y';



                  open pc_SPEEDTESTDETAIL for
                  SELECT ITERATION,
                      TIME,
                        SPEED,
                        s.HIGHSPEEDID
                  FROM Certificate ce
                              inner join HIGHSPEEDHDR h  on
                                     ce.certificateid = h.certificateid and
                                     ce.certificationtypeid = h.certificationtypeid
                              inner join SPEEDTESTDETAIL s on
                                     h.highspeedid = s.highspeedid
                  WHERE h.certificationtypeid = 1 and
                        lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                        AND lower(CE.MOSTRECENTCERT) = 'y';


  EXCEPTION
          when li_ParametersAreNull then
            ls_ErrorMsg:=  sqlerrm ||  '-GetEmarkPassengerWithTR.There is at least one parameters null.'  ;
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' Reports_Package.GetInfoReportPassenger',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20005,ls_ErrorMsg);

         when li_ParametersAreInvalid then
            ls_ErrorMsg:=  sqlerrm || '-GetEmarkPassengerWithTR. There is at least one parameters invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' Reports_Package.GetInfoReportPassenger',
                AX_RECORDDATA    => 'There is at least one parameters invalid.',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || '-GetEmarkPassengerWithTR. An error have ocurred.(when others)' || sqlerrm;
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' Reports_Package.GetEmarkPassengerWithTR',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);
  end GetEmarkPassengerWithTR;

  procedure GetTraceabilityReportInfo(pc_Traceability out retcursor,
                                      ps_CertificateNumber in varchar2,
                                      pi_certificationTypeID in number,
                                      ps_IncludeArchived in varchar2 ) AS
    /************************************************************************************************
     Procedure Name - GetTraceabilityReportInfo
     Change History
      --------------------------------------------------------------------------
      Version No  Date          Author    Description
      ---------------------------------------------------------------------------
          1.0                             Intial Version
          1.1       9/17/2012    Krishna    - As per PRJ3617
                                            - Added Matl_Num wherever SKU is available in Select list of the query
                                            - Added TireSize,ServiceDescription in select list
          1.2      11/14/2012    Krishna    - Added Brand,Brand_Line to the select query
          1.3      11/6/2013     Jill Seitz - rewrote to eliminate TRAC
          1.4      11/11/2013    Harini     - Added new paramter ps_IncludeArchived and replaced the query that is given
                                              by Jill for Traceability_Vw
    *************************************************************************************************/

      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      ld_ArchiveDate date;

  begin

      if upper(ps_IncludeArchived) = 'Y' then
        --ld_ArchiveDate := to_date('01/01/1900','MM/DD/YYYY');
         ld_ArchiveDate := SYSDATE; -- THIS WILL GET ALL
      ELSE
        ld_ArchiveDate := to_date('01/01/1902','MM/DD/YYYY');--NULL VALUES WILL BE CONVERTED TO 1901
      END IF;

      if (ps_CertificateNumber is not null  or ps_CertificateNumber <> '' ) and pi_certificationTypeID > 0 then
          Open pc_Traceability for
      SELECT DISTINCT  CE.CertificateNumber,
                       CT.CertificationTypeId,
                      CT.CertificationTypeName,
                       P.Sku,
                       LPAD(P.Matl_Num,18,0) AS matl_num, -- Added as per PRJ3617
                       PCE.DateSubmitted,
                       PCE.DateAssigned_Egi,
                       PCE.DateApproved_Cegi,
                      ----supplementaldateassigned_e,
                      ---supplementaldatesubmitted_e,
                      ---supplementaldateapproved_e,
                     (CASE
                         WHEN CE.CERTIFICATENUMBER IS NOT NULL THEN 'Y'
                         WHEN CE.CERTIFICATENUMBER IS NULL THEN 'N'
                      END)  CertificateRequested,
                       p.sizestamp TireSize, -- Added as per PRJ3617
                       case when P.DUALLOADINDEX IS NULL OR P.DUALLOADINDEX = '0'
                          THEN P.SINGLOADINDEX||P.SPEEDRATING
                          ELSE P.SINGLOADINDEX||'/'||P.DUALLOADINDEX||P.SPEEDRATING
                          END ServiceDescription,-- Added as per PRJ3617
                      P.Brand,-- Added as per PRJ3617
                      P.Brand_Line -- Added as per PRJ3617
                FROM  ---ICS.Traceability_View tv
                       ICS.PRODUCT P
                       inner JOIN ICS.PRODUCTCERTIFICATE PCE ON
                           PCE.SKUID = P.SKUID
                       LEFT OUTER JOIN ICS.CERTIFICATE CE ON
                           CE.CERTIFICATEID = PCE.CERTIFICATEID
                           AND CE.CERTIFICATIONTYPEID = PCE.CERTIFICATIONTYPEID
                       LEFT OUTER JOIN ICS.CERTIFICATIONTYPE CT ON
                           CT.CERTIFICATIONTYPEID = PCE.CERTIFICATIONTYPEID
                WHERE  LOWER(ce.CertificateNumber) = LOWER(ps_CertificateNumber)
               AND ce.CertificationTypeId = pi_CertificationTypeId
               AND NVL(CE.ARCHIVEDATE_CEGI,TO_DATE('01/01/1901','MM/DD/YYYY')) < ld_ArchiveDate
             ORDER BY  DateApproved_Cegi DESC,DateSubmitted DESC;

      elsif (ps_CertificateNumber is null  or ps_CertificateNumber = '' ) and pi_certificationTypeID  > 0 then
          Open pc_Traceability for
              SELECT DISTINCT  CE.CertificateNumber,
                       CT.CertificationTypeId,
                      CT.CertificationTypeName,
                       P.Sku,
                       LPAD(P.Matl_Num,18,0) AS matl_num, -- Added as per PRJ3617
                       PCE.DateSubmitted,
                       PCE.DateAssigned_Egi,
                       PCE.DateApproved_Cegi,
                      ----supplementaldateassigned_e,
                      ---supplementaldatesubmitted_e,
                      ---supplementaldateapproved_e,
                     (CASE
                         WHEN CE.CERTIFICATENUMBER IS NOT NULL THEN 'Y'
                         WHEN CE.CERTIFICATENUMBER IS NULL THEN 'N'
                      END)  CertificateRequested,
                       p.sizestamp TireSize, -- Added as per PRJ3617
                       case when P.DUALLOADINDEX IS NULL OR P.DUALLOADINDEX = '0'
                          THEN P.SINGLOADINDEX||P.SPEEDRATING
                          ELSE P.SINGLOADINDEX||'/'||P.DUALLOADINDEX||P.SPEEDRATING
                          END ServiceDescription,-- Added as per PRJ3617
                      P.Brand,-- Added as per PRJ3617
                      P.Brand_Line -- Added as per PRJ3617
                FROM  ---ICS.Traceability_View tv
                            ICS.PRODUCT P
                       inner JOIN ICS.PRODUCTCERTIFICATE PCE ON
                           PCE.SKUID = P.SKUID
                        LEFT OUTER JOIN ICS.CERTIFICATE CE ON
                           CE.CERTIFICATEID = PCE.CERTIFICATEID
                           AND PCE.CERTIFICATIONTYPEID = CE.CERTIFICATIONTYPEID
                       LEFT OUTER JOIN ICS.CERTIFICATIONTYPE CT ON
                           CT.CERTIFICATIONTYPEID = PCE.CERTIFICATIONTYPEID
                WHERE  ct.CertificationTypeId = pi_CertificationTypeId
                   AND NVL(CE.ARCHIVEDATE_CEGI,TO_DATE('01/01/1901','MM/DD/YYYY')) <  ld_ArchiveDate
            ORDER BY  DateApproved_Cegi DESC,DateSubmitted DESC;

      elsif  (ps_CertificateNumber is not null  or ps_CertificateNumber <> '' ) and pi_certificationTypeID  = 0 then
            Open pc_Traceability for
               SELECT DISTINCT  CE.CertificateNumber,
                       CT.CertificationTypeId,
                       CT.CertificationTypeName,
                       P.Sku,
                       LPAD(P.Matl_Num,18,0) AS matl_num, -- Added as per PRJ3617
                       PCE.DateSubmitted,
                       PCE.DateAssigned_Egi,
                       PCE.DateApproved_Cegi,
                      ----supplementaldateassigned_e,
                      ---supplementaldatesubmitted_e,
                      ---supplementaldateapproved_e,
                      (CASE
                         WHEN CE.CERTIFICATENUMBER IS NOT NULL THEN 'Y'
                         WHEN CE.CERTIFICATENUMBER IS NULL THEN 'N'
                      END)  CertificateRequested,
                       p.sizestamp TireSize, -- Added as per PRJ3617
                       case when P.DUALLOADINDEX IS NULL OR P.DUALLOADINDEX = '0'
                          THEN P.SINGLOADINDEX||P.SPEEDRATING
                          ELSE P.SINGLOADINDEX||'/'||P.DUALLOADINDEX||P.SPEEDRATING
                          END ServiceDescription,-- Added as per PRJ3617
                      P.Brand,-- Added as per PRJ3617
                      P.Brand_Line -- Added as per PRJ3617
                FROM  ---ICS.Traceability_View tv
                      ICS.PRODUCT P
                       inner JOIN ICS.PRODUCTCERTIFICATE PCE ON
                           PCE.SKUID = P.SKUID
                       LEFT OUTER JOIN ICS.CERTIFICATE CE ON
                           CE.CERTIFICATEID = PCE.CERTIFICATEID
                           AND CE.CERTIFICATIONTYPEID = PCE.CERTIFICATIONTYPEID
                       LEFT OUTER JOIN ICS.CERTIFICATIONTYPE CT ON
                           CT.CERTIFICATIONTYPEID = CE.CERTIFICATIONTYPEID
                   WHERE LOWER(ce.CertificateNumber) = LOWER(ps_CertificateNumber)
                      AND NVL(CE.ARCHIVEDATE_CEGI,TO_DATE('01/01/1901','MM/DD/YYYY' )) <  ld_ArchiveDate
                  ORDER BY  DateApproved_Cegi DESC,DateSubmitted DESC;
    end if;

   EXCEPTION
         when others then
              ls_ErrorMsg:=  sqlerrm || '-GetTraceabilityReportInfo. An error have ocurred.(when others)' || sqlerrm;
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' Reports_Package.GetTraceabilityReportInfo',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);

  end GetTraceabilityReportInfo;

    PROCEDURE GetAuthenticityReportInfo(pc_Authenticity OUT retcursor) AS
      ls_ErrorMsg       varchar2(4000);
      ls_MachineId      VARCHAR2(50):=null;
      ls_OperatorId     VARCHAR2(50):='ICSDEV';
    BEGIN
/*          OPEN pc_Authenticity FOR
          SELECT distinct CERTIFICATENUMBER
            FROM ICS.CERTIFICATE c, ICS.PRODUCTCERTIFICATE pc
            WHERE C.CERTIFICATEID = PC.CERTIFICATEID
            AND C.CERTIFICATIONTYPEID = 1
            AND PC.DATEAPPROVED_CEGI <= sysdate
            AND LENGTH(SUBSTR(pc.dateremoved,INSTR(pc.dateremoved, '/', 1, 2) + 1)) is null;
 */
          OPEN pc_Authenticity FOR
          SELECT distinct   p.emarkreference_i  CERTIFICATENUMBER
            FROM ICS.CERTIFICATE c, ICS.PRODUCTCERTIFICATE pc, ICS.PRODUCT p
            WHERE C.CERTIFICATEID = PC.CERTIFICATEID
            AND C.CERTIFICATIONTYPEID = 4
            AND pc.DATESUBMITTED  IS NULL
            AND pc.skuid =  p.skuid
            AND p.emarkreference_i IS NOT NULL;

    EXCEPTION
        WHEN others THEN
              ls_ErrorMsg:=  sqlerrm || '-AuthenticityReportInfo. An error have ocurred.(when others)' || sqlerrm;
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' Reports_Package.AuthenticityReportInfo',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);
    END GetAuthenticityReportInfo;

  procedure GetExceptionReportInfo(pc_Exception out retcursor) as
   /************************************************************************************************
     Procedure Name - GetExceptionReportInfo
     Change History
      --------------------------------------------------------------------------
      Version No  Date          Author    Description
      ---------------------------------------------------------------------------
          1.0                             Intial Version
          1.1     9/17/2012     Krishna   - As per PRJ3617
                                            - Added Matl_Num wherever SKU is available in Select list of the query
    *************************************************************************************************/

  ls_MachineId VARCHAR2(50):=null;
  ls_OperatorId VARCHAR2(50):='ICSDEV';
  ls_ErrorMsg varchar2(4000);
  begin

       ---LOAD EXCEPTION TABLE.
       CompareSKUMainProductColumns;

       ---EXTRACT CURSOR FOR REPORT
       Open pc_Exception For
          SELECT DISTINCT
                 er.Sku,
                 LPAD(er.Matl_Num,18,0) AS Matl_Num, -- added as per prj3617
                 er.ProductDataFieldName,
                 er.LastModified,
                 er.IcsValue,
                 er.SkuMasterValue,
                 p.SizeStamp AS TireSize,
                 CASE WHEN p.DualloadIndex IS NULL OR p.DualloadIndex = 0
                      THEN p.SingloadIndex||p.SpeedRating
                  ELSE p.SingLoadIndex||'/'|| p.DualloadIndex|| p.SpeedRating END AS ServiceDescription
         FROM ICS.ExceptionReport er,
          ICS.Product p
        WHERE er.Matl_Num = LPAD(p.Matl_Num,18,0)
        ORDER BY LPAD(er.Matl_Num,18,0),er.ProductDataFieldName ;

   EXCEPTION
         when others then
              ls_ErrorMsg:=  sqlerrm || '-GetExceptionReportInfo. An error have ocurred.(when others)' || sqlerrm;
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' Reports_Package.GetExceptionReportInfo',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);

  end  GetExceptionReportInfo;

  procedure CompareSKUMainProductColumns as
   /************************************************************************************************
     Procedure Name - CompareSKUMainProductColumns
     Change History
      --------------------------------------------------------------------------
      Version No  Date          Author    Description
      ---------------------------------------------------------------------------
          1.0                             Intial Version
          1.1     9/17/2012     Krishna
                    11/1/2018      Jill  Seitz - fixed problem in differences report where it was not finding speed rating changes.
    *************************************************************************************************/

  ls_MachineId VARCHAR2(50):=null;
  ls_OperatorId VARCHAR2(50):='ICSDEV';
  ls_ErrorMsg varchar2(4000);

  -- Added matl_num, brand, brand_line instead of sku and brandcode
  Cursor Prod Is
  Select --p.Sku,p.brandcode
         p.skuid,p.sku,p.matl_num AS Matl_Num,p.brand,p.brand_line
  from product p
  where p.skuid = (select max(p2.skuid)  ---  most recent product record
                     From Product P2
                     where p2.matl_num = LPAD(p.matl_num,18,0))
       and  p.skuid in (select skuid from productcertificate pc, certificate c
       where pc.certificateid = c.certificateid and
       upper(mostrecentcert) = 'Y') --- skuid is on a current certificate
        and P.DISCONTINUEDDATE is null -- only care about differences in active sku's
        and SUBSTR(LTRIM(p.MATL_NUM,'0'),1,3) <> '999' ;

  ls_Sku varchar(30);
  --ls_BrandCode varchar2(10);

  ls_Matl_Num Product.Matl_Num%Type;
  ls_Brand    Product.Brand%TYPE;
  ls_Brand_Line Product.Brand_Line%TYPE;

  ls_SMColNames varchar2(200);
  ls_ProdColNames varchar2(200);
  ls_Sql varchar2(5000);

  ls_SkuMainValue varchar2(200);
  ls_ProductValue varchar2(200);
  ---ld_ModifiedOn timestamp:= systimestamp;
  ---ld_ModifiedOn date:=sysdate;
   ld_ModifiedOn date;
  ln_count integer;
  ln_reccnt integer;
  ls_matchfound varchar2 (5):='N';
  ln_skuid                          number;
  ln_p_TIRETYPEID             number;
  ls_p_SIZESTAMP              varchar2(30);
  ls_p_SPEEDRATING            varchar2(10);
  ls_p_SINGLOADINDEX          varchar2(10);
  ls_p_DUALLOADINDEX          varchar2(10);
  ls_p_TUBELESSYN             varchar2(1);
  ls_p_REINFORCEDYN           varchar2(1);
  ls_p_EXTRALOADYN            varchar2(1);
  ls_p_UTQGTEMP               varchar2(10);
  ls_p_UTQGTRACTION           varchar2(10);
  ls_p_UTQGTREADWEAR          varchar2(10);
   ls_p_MudSnowYN              varchar2(5);
  ls_p_LOADRANGE            varchar2(30);
    ls_p_RegroovableInd     varchar2(5);
    ls_p_TreadPattern         varchar2(30);

  --ln_p_PPN                    number;
  ln_p_TPN                    Product.Tpn%TYPE; -- Added as per PRJ3617
  ls_p_BIASBELTEDRADIAL       varchar2(10);
  ls_p_SevereWeatherInd        varchar2(5);

  ln_sm_TIRETYPEID             number;
  ls_sm_SPEEDRATING            varchar2(10);
  ls_sm_SINGLOADINDEX          varchar2(10);
  ls_sm_TUBELESSYN             varchar2(1);
  ls_sm_REINFORCEDYN           varchar2(1);
  ls_sm_EXTRALOADYN            varchar2(1);
  ls_sm_UTQGTEMP               varchar2(10);
  ls_sm_UTQGTRACTION           varchar2(10);
  ls_sm_UTQGTREADWEAR          varchar2(10);
  ls_sm_LOADRANGE              varchar2(30);
  --ln_sm_PPN                    number;
  ln_sm_TPN                    Product.Tpn%TYPE;
  ls_sm_BIASBELTEDRADIAL       varchar2(10);
  --
ls_SM_Brand                              varchar2(30);
 ls_SM_BrandLine                        varchar2(30);
 ls_SM_SizeStamp                        varchar2(30);
   ls_SM_PSN  varchar2(30);
ls_SM_DiscontinueDate   varchar2(30);
ls_SM_SpecNumber  varchar2(30);
ls_SM_DualLoadIndex varchar2(30);
ls_SM_MudSnowYN            varchar2(5);
ls_SM_SevereWeatherInd   varchar2(5);
ls_SM_RimDiameter   varchar2(10);
 ls_SM_SerialDate  varchar2(30);
 ls_SM_MeaRimWidth varchar2(10);
     ls_SM_RegroovableInd   varchar2(5);
     ls_SM_PlantProduced   varchar2(10);
     ls_SM_MostRecentDate varchar2(30);
      ls_SM_IMark varchar2(30);
      ls_SM_InformeNumber varchar2(30);
      ls_SM_FechaDate varchar2(30);
      ls_SM_TreadPattern varchar2(30);
      ls_SM_SpecialProtBrand varchar2(30);
      ls_SM_NominalTireWidth  varchar2(30);
       ls_SM_AspectRatio  varchar2(30);
      ls_SM_TreadWearInd  varchar2(30);
      ls_SM_NameOfManufac  varchar2(30);
      ls_SM_Family  varchar2(30);
      ls_SM_DotSerialNumber  varchar2(30);
      ls_SM_SKU varchar2(30);

  begin

    delete from EXCEPTIONREPORT;
    Commit;



    Open Prod;
--    for ln_reccnt IN 1..5 LOOP
    Loop
      FETCH Prod INTO ln_skuid, ls_Sku ,ls_Matl_Num,ls_Brand,ls_Brand_Line;
          EXIT WHEN Prod%NOTFOUND;
       if substr(ls_Matl_Num,1,3) <> '999' then


           -- Replaced sku wtih Matl_num and BrandCode with Brand and Brand_Line
           --   and PPN with TPN
           Select  p.TIRETYPEID,P.SIZESTAMP, p.SPEEDRATING, p.SINGLOADINDEX,P.DUALLOADINDEX,
               p.TUBELESSYN,
               p.REINFORCEDYN, p.EXTRALOADYN, p.UTQGTEMP, p.UTQGTRACTION,
                p.UTQGTREADWEAR, p.MudSnowYN, p.LOADRANGE,  p.RegroovableInd,
                p.TreadPattern,
                p.TPN, p.BIASBELTEDRADIAL, P.MODIFIEDON
            INTO
                  ln_p_TIRETYPEID,ls_p_SIZESTAMP, ls_p_SPEEDRATING, ls_p_SINGLOADINDEX,
                   ls_p_DUALLOADINDEX ,
                   ls_p_TUBELESSYN, ls_p_REINFORCEDYN, ls_p_EXTRALOADYN,
                   ls_p_UTQGTEMP, ls_p_UTQGTRACTION, ls_p_UTQGTREADWEAR,
                   ls_p_MudSnowYN, ls_p_LOADRANGE,  ls_p_RegroovableInd,
                   ls_p_TreadPattern,ln_p_TPN, ls_p_BIASBELTEDRADIAL,  ld_ModifiedOn
            From Product P
            Where p.skuid = ln_skuid;


           BEGIN

              -- Called GetTireCharacteristics procedure instead of SkuMain_Vw as per PRJ3617
              ICS_PROCS.ICS_CRUD.GetTireCharacteristicsAll(ls_Matl_Num, ls_SM_Brand,
                                           ls_SM_BrandLine, ls_SM_SizeStamp, ln_SM_TireTypeId,
                                           ls_SM_PSN,ls_SM_DiscontinueDate,ls_SM_SpecNumber,
                                           ls_SM_SpeedRating,ls_SM_SingLoadIndex,ls_SM_DualLoadIndex,
                                           ls_SM_Tubelessyn,ls_SM_ReinforcedYN,ls_SM_ExtraLoadYN,
                                           ls_SM_UTQGTreadWear,ls_SM_UTQGTraction, ls_SM_UTQGTemp,
                                           ls_SM_MudSnowYN,ls_SM_SevereWeatherInd, ls_SM_RimDiameter,
                                           ls_SM_SerialDate,ls_SM_LoadRange,ls_SM_MeaRimWidth,
                                           ls_SM_RegroovableInd,ls_SM_PlantProduced,ls_SM_MostRecentDate,
                                           ls_SM_IMark,ls_SM_InformeNumber,ls_SM_FechaDate, ls_SM_TreadPattern,
                                           ls_SM_SpecialProtBrand, ls_SM_NominalTireWidth, ls_SM_AspectRatio,
                                           ls_SM_TreadWearInd,ls_SM_NameOfManufac,ls_SM_Family,
                                           ls_SM_DotSerialNumber,ln_SM_TPN,ls_SM_BiasBeltedRadial,ls_SM_SKU);

               If  ls_sm_SIZESTAMP is not null and --TRIM(ls_sm_SIZESTAMP) <> '' AND  removed jeseitz 11/1/2018
                       nvl(upper(trim(ls_p_SIZESTAMP)),'IsNull') <> nvl(upper(trim(ls_sm_SIZESTAMP)),'IsNull') then
                  Insert INTO EXCEPTIONREPORT (MATL_NUM, SKU,PRODUCTDATAFIELDNAME,LASTMODIFIED,ICSVALUE,SKUMASTERVALUE)
                      VALUES (ls_Matl_Num,ls_Sku,'SIZESTAMP',ld_ModifiedOn, nvl(ls_p_SIZESTAMP,null), nvl(ls_sm_SIZESTAMP,null) );
                  Commit;
              END IF;

              If  ls_sm_SPEEDRATING is not null and --TRIM(ls_sm_SPEEDRATING) <> '' AND   emoved jeseitz 11/1/2018
                       nvl(upper(trim(ls_p_SPEEDRATING)),'IsNull') <> nvl(upper(trim(ls_sm_SPEEDRATING)),'IsNull') then
                  Insert INTO EXCEPTIONREPORT (MATL_NUM, SKU,PRODUCTDATAFIELDNAME,LASTMODIFIED,ICSVALUE,SKUMASTERVALUE)
                      VALUES (ls_Matl_Num,ls_Sku,'SPEEDRATING',ld_ModifiedOn, nvl(ls_p_SPEEDRATING,null), nvl(ls_sm_SPEEDRATING,null) );
                  Commit;
              END IF;

              If  not ls_sm_SINGLOADINDEX is null and
                       nvl(upper(ls_p_SINGLOADINDEX),'IsNull') <> nvl(upper(ls_sm_SINGLOADINDEX),'IsNull') then
                  Insert INTO EXCEPTIONREPORT ( MATL_NUM,SKU,PRODUCTDATAFIELDNAME,LASTMODIFIED,ICSVALUE,SKUMASTERVALUE)
                      VALUES (ls_Matl_Num,ls_Sku,'SINGLOADINDEX',ld_ModifiedOn, nvl(ls_p_SINGLOADINDEX,null), nvl(ls_sm_SINGLOADINDEX,null) );
                  Commit;
              END IF;

              If  not ls_sm_DUALLOADINDEX is null and
                       nvl(upper(ls_p_DUALLOADINDEX),'IsNull') <> nvl(upper(ls_sm_DUALLOADINDEX),'IsNull') then
                  Insert INTO EXCEPTIONREPORT ( MATL_NUM,SKU,PRODUCTDATAFIELDNAME,LASTMODIFIED,ICSVALUE,SKUMASTERVALUE)
                      VALUES (ls_Matl_Num,ls_Sku,'DUALLOADINDEX',ld_ModifiedOn, nvl(ls_p_DUALLOADINDEX,null), nvl(ls_sm_DUALLOADINDEX,null) );
                  Commit;
              END IF;

              If  not ls_sm_TUBELESSYN is null and
                      nvl(upper(ls_p_TUBELESSYN),'IsNull') <> nvl(upper(ls_sm_TUBELESSYN),'IsNull') then
                  Insert INTO EXCEPTIONREPORT ( MATL_NUM,SKU,PRODUCTDATAFIELDNAME,LASTMODIFIED,ICSVALUE,SKUMASTERVALUE)
                      VALUES (ls_Matl_Num,ls_Sku,'TUBELESSYN',ld_ModifiedOn, nvl(ls_p_TUBELESSYN,null), nvl(ls_sm_TUBELESSYN,null) );
                  Commit;
              END IF;

              If not  ls_sm_REINFORCEDYN is null and
                       nvl(upper(ls_p_REINFORCEDYN),'IsNull') <> nvl(upper(ls_sm_REINFORCEDYN),'IsNull') then
                  Insert INTO EXCEPTIONREPORT ( MATL_NUM,SKU,PRODUCTDATAFIELDNAME,LASTMODIFIED,ICSVALUE,SKUMASTERVALUE)
                      VALUES (ls_Matl_Num,ls_Sku,'REINFORCEDYN',ld_ModifiedOn, nvl(ls_p_REINFORCEDYN,null), nvl(ls_sm_REINFORCEDYN,null) );
                  Commit;
              END IF;

              If  not ls_sm_EXTRALOADYN is null and
                       nvl(upper(ls_p_EXTRALOADYN),'IsNull') <> nvl(upper(ls_sm_EXTRALOADYN),'IsNull') then
                  Insert INTO EXCEPTIONREPORT ( MATL_NUM,SKU,PRODUCTDATAFIELDNAME,LASTMODIFIED,ICSVALUE,SKUMASTERVALUE)
                      VALUES (ls_Matl_Num,ls_Sku,'EXTRALOADYN',ld_ModifiedOn, nvl(ls_p_EXTRALOADYN,null), nvl(ls_sm_EXTRALOADYN,null) );
                  Commit;
              END IF;

              --JESEITZ ADDED 11/03/2012
              if ls_sm_UTQGTEMP = '0' or UPPER(ls_sm_UTQGTEMP) = 'N/A' then
                  ls_sm_UTQGTEMP := 'IsNull'   ;
              END IF;
             --

              If not ls_sm_UTQGTEMP is null and
                   nvl(TRIM(upper(ls_p_UTQGTEMP)),'IsNull') <> nvl(TRIM(upper(ls_sm_UTQGTEMP)),'IsNull') then
                  Insert INTO EXCEPTIONREPORT ( MATL_NUM,SKU,PRODUCTDATAFIELDNAME,LASTMODIFIED,ICSVALUE,SKUMASTERVALUE)
                      VALUES (ls_Matl_Num,ls_Sku,'UTQGTEMP',ld_ModifiedOn, nvl(ls_p_UTQGTEMP,null), nvl(ls_sm_UTQGTEMP,null) );
                  Commit;
              END IF;

             If not  ls_sm_UTQGTRACTION is null and
                         nvl(TRIM(upper(ls_p_UTQGTRACTION)),'0') <> nvl(TRIM(upper(ls_sm_UTQGTRACTION)),'0') then
                  Insert INTO EXCEPTIONREPORT ( MATL_NUM,SKU,PRODUCTDATAFIELDNAME,LASTMODIFIED,ICSVALUE,SKUMASTERVALUE)
                      VALUES (ls_Matl_Num,ls_Sku,'UTQGTRACTION',ld_ModifiedOn, nvl(ls_p_UTQGTRACTION,null), nvl(ls_sm_UTQGTRACTION,null) );
                  Commit;
              END IF;

              --JESEITZ ADDED 11/03/2012
               if ls_sm_UTQGTREADWEAR = '0' or UPPER(ls_sm_UTQGTREADWEAR) = 'N/A' then
                  ls_sm_UTQGTREADWEAR := ''   ;
               END IF;
         --
              If  not ls_sm_UTQGTREADWEAR is null and
                       nvl(TRIM(upper(ls_p_UTQGTREADWEAR)),'IsNull') <> nvl(TRIM(upper(ls_sm_UTQGTREADWEAR)),'IsNull') then
                  Insert INTO EXCEPTIONREPORT ( MATL_NUM,SKU,PRODUCTDATAFIELDNAME,LASTMODIFIED,ICSVALUE,SKUMASTERVALUE)
                      VALUES (ls_Matl_Num,ls_Sku,'UTQGTREADWEAR',ld_ModifiedOn, nvl(ls_p_UTQGTREADWEAR,null), nvl(ls_sm_UTQGTREADWEAR,null) );
                  Commit;
              END IF;

              If  not ls_SM_MudSnowYN is null and
                       nvl(TRIM(upper(ls_p_MudSnowYN)),'IsNull') <> nvl(TRIM(upper(ls_SM_MudSnowYN)),'IsNull') then
                  Insert INTO EXCEPTIONREPORT ( MATL_NUM,SKU,PRODUCTDATAFIELDNAME,LASTMODIFIED,ICSVALUE,SKUMASTERVALUE)
                      VALUES (ls_Matl_Num,ls_Sku,'MUDSNOWYN',ld_ModifiedOn, nvl(ls_p_MudSnowYN,null), nvl(ls_SM_MudSnowYN,null) );
                  Commit;
              END IF;

              If not  ls_sm_LOADRANGE is null and
                       nvl(upper(ls_p_LOADRANGE),'IsNull') <> nvl(upper(ls_sm_LOADRANGE),'IsNull') then
                  Insert INTO EXCEPTIONREPORT ( MATL_NUM,SKU,PRODUCTDATAFIELDNAME,LASTMODIFIED,ICSVALUE,SKUMASTERVALUE)
                      VALUES (ls_Matl_Num,ls_Sku,'LOADRANGE',ld_ModifiedOn, nvl(ls_p_LOADRANGE,null), nvl(ls_sm_LOADRANGE,null) );
                  Commit;
              END IF;

             If  not  ls_SM_RegroovableInd is null and
                       nvl(TRIM(upper( ls_p_RegroovableInd)),'IsNull') <> nvl(TRIM(upper( ls_SM_RegroovableInd)),'IsNull') then
                  Insert INTO EXCEPTIONREPORT ( MATL_NUM,SKU,PRODUCTDATAFIELDNAME,LASTMODIFIED,ICSVALUE,SKUMASTERVALUE)
                      VALUES (ls_Matl_Num,ls_Sku,'REGROOVABLEIND',ld_ModifiedOn, nvl( ls_p_RegroovableInd,null), nvl( ls_SM_RegroovableInd,null) );
                  Commit;
              END IF;

              If  not  ls_SM_TreadPattern is null and
                       nvl(TRIM(upper( ls_p_TreadPattern)),'IsNull') <> nvl(TRIM(upper( ls_SM_TreadPattern)),'IsNull') then
                  Insert INTO EXCEPTIONREPORT ( MATL_NUM,SKU,PRODUCTDATAFIELDNAME,LASTMODIFIED,ICSVALUE,SKUMASTERVALUE)
                      VALUES (ls_Matl_Num,ls_Sku,'TREADPATTERN',ld_ModifiedOn, nvl( ls_p_TreadPattern,null), nvl( ls_SM_TreadPattern,null) );
                  Commit;
              END IF;

             -- Replaced PPN with TPN
              If not  ln_sm_TPN is null and
                       nvl(upper(ln_p_TPN),'IsNull') <> nvl(upper(ln_sm_TPN),'IsNull') then
                  Insert INTO EXCEPTIONREPORT ( MATL_NUM,SKU,PRODUCTDATAFIELDNAME,LASTMODIFIED,ICSVALUE,SKUMASTERVALUE)
                      VALUES (ls_Matl_Num,ls_Sku,'TPN',ld_ModifiedOn, nvl(ln_p_TPN,null), nvl(ln_sm_TPN,null) );
                  Commit;
              END IF;

              If  not ls_sm_BIASBELTEDRADIAL is null and
                       nvl(upper(ls_p_BIASBELTEDRADIAL),'IsNull') <> nvl(upper(ls_sm_BIASBELTEDRADIAL),'IsNull') then
                  Insert INTO EXCEPTIONREPORT (MATL_NUM, SKU,PRODUCTDATAFIELDNAME,LASTMODIFIED,ICSVALUE,SKUMASTERVALUE)
                      VALUES (ls_Matl_Num,ls_Sku,'BIASBELTEDRADIAL',ld_ModifiedOn, nvl(ls_p_BIASBELTEDRADIAL,null), nvl(ls_sm_BIASBELTEDRADIAL,null) );
                  Commit;
              END IF;

             If  not ls_SM_BRAND is null and
                       nvl(upper(ls_BRAND),'IsNull') <> nvl(upper(ls_sm_BRAND),'IsNull') then
                  Insert INTO EXCEPTIONREPORT (MATL_NUM, SKU,PRODUCTDATAFIELDNAME,LASTMODIFIED,ICSVALUE,SKUMASTERVALUE)
                      VALUES (ls_Matl_Num,ls_Sku,'BRAND',ld_ModifiedOn, nvl(ls_BRAND,null), nvl(ls_sm_BRAND,null) );
                  Commit;
             END IF;

              If  not   ls_SM_BrandLine is null and
                       nvl(upper(  ls_Brand_Line),'IsNull') <> nvl(upper(ls_SM_BrandLine),'IsNull') then
                  Insert INTO EXCEPTIONREPORT (MATL_NUM, SKU,PRODUCTDATAFIELDNAME,LASTMODIFIED,ICSVALUE,SKUMASTERVALUE)
                      VALUES (ls_Matl_Num,ls_Sku,'BRANDLINE',ld_ModifiedOn, nvl(ls_BRAND_LINE,null), nvl(  ls_SM_BrandLine,null) );
                  Commit;
              END IF;

              If  not ls_SM_SevereWeatherInd is null and
                       nvl(TRIM(upper( ls_p_SevereWeatherInd)),'IsNull') <> nvl(TRIM(upper (ls_p_SevereWeatherInd)),'IsNull') then
                  Insert INTO EXCEPTIONREPORT ( MATL_NUM,SKU,PRODUCTDATAFIELDNAME,LASTMODIFIED,ICSVALUE,SKUMASTERVALUE)
                      VALUES (ls_Matl_Num,ls_Sku,'SEVEREWEATHERIND',ld_ModifiedOn, nvl( ls_p_SevereWeatherInd,null), nvl(ls_SM_SevereWeatherInd,null) );
                  Commit;
              END IF;

             -- JESEITZ added 4/27/2018 - per REQ0029020
              If  not ls_SM_SKU is null and
                       nvl(TRIM(upper( ls_Sku)),'IsNull') <> nvl(TRIM(upper (ls_SM_SKU)),'IsNull') then
                  Insert INTO EXCEPTIONREPORT ( MATL_NUM,SKU,PRODUCTDATAFIELDNAME,LASTMODIFIED,ICSVALUE,SKUMASTERVALUE)
                      VALUES (ls_Matl_Num,ls_Sku,'SKU',ld_ModifiedOn, nvl(ls_sku,null), nvl(ls_SM_SKU,null) );
                  Commit;
              END IF;

           exception
              when others then
                  null;
           end;
       end if;
    end loop;
    close Prod;

  EXCEPTION
    When Others Then
      dbms_output.put_line(ls_Matl_Num||'-'||ls_brand ||' - '||ls_brand_line ||'-' ||ls_SMColNames||'-'||ls_SkuMainValue||'-'||ls_ProductValue);
      ls_ErrorMsg:=  sqlerrm || '-CompareSKUMainProductColumns. An error have ocurred.(when others)' || sqlerrm;
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' Reports_Package.CompareSKUMainProductColumns',
                      AX_RECORDDATA    => 'An error has ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);

  end CompareSKUMainProductColumns;
  Procedure GetEmarkTestReportInfo( ps_CertificateNumber in varchar2,
                                     pi_tiretypeid        in number,
                                     pc_CertificateDfValue  out retCursor,
                                     pc_CertificateInfo   out retCursor,
                                     pc_Product           out retcursor,
                                     pc_MeasureHDR        out retCursor,
                                     pc_measureDtl        out retCursor,
                                     pc_BEADUNSEATHDR     out retCursor,
                                     pc_BEADUNSEATDTL     out retCursor,
                                     pc_PLUNGERHDR        out retCursor,
                                     pc_PLUNGERDTL        out retCursor,
                                     pc_TREADWEARHDR      out retCursor,
                                     pc_TREADWEARDTL      out retCursor,
                                     pc_ENDURANCEHDR      out retCursor,
                                     pc_ENDURANCEDTL      out retCursor,
                                     pc_HIGHSPEEDHDR      out retCursor,
                                     pc_HIGHSPEEDDTL      out retCursor,
                                     pc_SPEEDTESTDETAIL   out retCursor,
                                     pc_Brand             out retCursor) as
    /************************************************************************************************
     Procedure Name - GetEmarkTestReportInfo
     Change History
      --------------------------------------------------------------------------
      Version No  Date          Author    Description
      ---------------------------------------------------------------------------
          1.0                             Intial Version
          1.1     9/17/2012     Krishna   - As per PRJ3617
                                            - Replaced NPRID with PSN
                                            - Added Matl_Num wherever SKU exist
                                            - Replaced query instead of Brand_View
                                            - Added Brand, Brand_Line columns instead of Brandcode
    *************************************************************************************************/

      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
       li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);

      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
  begin

      if ps_CertificateNumber is null then
          raise li_ParametersAreNull;
      end if ;
      if ps_CertificateNumber = '' then
          raise li_ParametersAreInvalid;
      end if ;


      -- Gets the brand information
      -- Added query instead of Brand_View
      -- Added Brand and Brand_Line instead of BrandCode and BrandName
          Open pc_brand for
          SELECT distinct  --BRANDCODE, ---get all brands that have ever been associated with this certificate, because
                        --BRANDNAME,           ---the sks's that were on the original test specs may have since been discontinued
                        BRAND,
                        BRAND_LINE,
                        CERTIFICATENUMBER---but just get each brand once, even though it is multiple extensions.
          FROM  ( SELECT DISTINCT  p.Brand
                                  ,p.Brand_Line
                                  ,c.CertificateNumber
                                  ,c.Extension_En
                            FROM  Product p,
                                  ProductCertificate pc,
                                  Certificate c
                            WHERE c.CertificateId = pc.CertificateId
                              AND pc.SkuId = p.SkuId)
          where lower(certificatenumber) = lower(ps_certificateNumber)  ;

      --Gets the default values information.
            OPen pc_CertificateDfValue for
            SELECT CERTIFICATENUMBER,
                    MAX(DECODE(fieldid,1,fieldvalue,NULL)) MANUFACTURERNAME_E,
                    MAX(DECODE(fieldid,2,fieldvalue,NULL)) MANUFACTURERNAMEADDRESS_E,
                    MAX(DECODE(fieldid,3,fieldvalue,NULL)) TECHNICALSERVICE_E,
                    MAX(DECODE(fieldid,4,fieldvalue,NULL)) PLACE_E,
                    MAX(DECODE(fieldid,5,fieldvalue,NULL)) MEASURERIM_E,
                    MAX(DECODE(fieldid,6,fieldvalue,NULL)) INFLATIONPRESSURE_E,
                    MAX(DECODE(fieldid,7,fieldvalue,NULL)) TESTLABORATORY_E,
                    MAX(DECODE(fieldid,8,fieldvalue,NULL)) REPRESENTATIVENAME_E,
                    MAX(DECODE(fieldid,9,fieldvalue,NULL)) REPRESENTATIVEADDRESS_E,
                    MAX(DECODE(fieldid,10,fieldvalue,NULL)) REASONOFEXTENSION_E,
                    MAX(DECODE(fieldid,11,fieldvalue,NULL)) REMARKS_E,
                    MAX(DECODE(fieldid,175,fieldvalue,NULL)) PPNPROFILEFAMILY_E,
                    MAX(DECODE(fieldid,176,fieldvalue,NULL)) RIMSMOUNTED_E,
                    MAX(DECODE(fieldid,177,fieldvalue,NULL)) OVERALLDIMENSIONSTYPE_E,
                    MAX(DECODE(fieldid,178,fieldvalue,NULL)) REFERENCETIRE_E,
                    MAX(DECODE(fieldid,179,fieldvalue,NULL)) NOMINALRIMSIZE_E,
                    MAX(DECODE(fieldid,180,fieldvalue,NULL)) NOMINALLOAD_E,
                    MAX(DECODE(fieldid,181,fieldvalue,NULL)) ADDITIONALNOMSPEED_E,
                    MAX(DECODE(fieldid,182,fieldvalue,NULL)) ADDITIONALLOADINDEX_E,
                    MAX(DECODE(fieldid,183,fieldvalue,NULL)) APPLICATIONCOMMENT_E,
                    MAX(DECODE(fieldid,189,fieldvalue,NULL)) NOMTESTDRUMSPEED_E
               FROM (
                SELECT FIELDID,
                  CERTIFICATIONTYPEID,
                  CERTIFICATENUMBER,
                  FIELDVALUE
                FROM defaultvalues_view
                WHERE lower(certificatenumber) = lower(ps_certificateNumber) and
                      CERTIFICATIONTYPEID = 1
              )
            group by CERTIFICATENUMBER ;

             Open pc_CertificateInfo for
                          Select
                    CERTIFICATEID,
                    ce.CERTIFICATIONTYPEID,
                    CERTIFICATIONTYPENAME,
                    CERTIFICATENUMBER,
                      ACTIVESTATUS,
                         RENEWALREQUIRED_CGIN,
                      JOBREPORTNUMBER_CEN,
                     EXTENSION_EN,
                     SUPPLEMENTALMOLDSTAMPING_E,
                     CERTDATESUBMITTED,
                     CERTDATEAPPROVED
                        From Certificate ce
                          inner join  certificationtype ct on
                            CT.CERTIFICATIONTYPEID = CE.CERTIFICATIONTYPEID
                          Where ce.CERTIFICATIONTYPEID = 1 And
                           lower(ce.certificatenumber) = lower(ps_certificateNumber) and
                           lower(CE.MOSTRECENTCERT) = 'y'  ;


             -- As per PRJ3617
             -- Added PSN instead of NPRID
             -- Added Matl_Num
             -- Added Brand and Brand_Line instead of BrandCode
             -- Removed BrandDesc
             Open pc_Product for
              SELECT distinct    SKUID,  SKU, LPAD(MATL_NUM,18,0) AS MATL_NUM, BRAND,BRAND_LINE, TIRETYPEID, PSN,
                 SIZESTAMP,   DISCONTINUEDDATE,   SPECNUMBER,   SPEEDRATING,
                 SINGLOADINDEX,   DUALLOADINDEX,   BIASBELTEDRADIAL,   TUBELESSYN,
                 REINFORCEDYN,   EXTRALOADYN,   UTQGTREADWEAR,   UTQGTRACTION,
                 UTQGTEMP,   MUDSNOWYN,   RIMDIAMETER,   SERIALDATE,
                 LOADRANGE,   MEARIMWIDTH,   REGROOVABLEIND,   PLANTPRODUCED,
                 MOSTRECENTTESTDATE,   IMARK,   INFORMENUMBER,   FECHADATE,
                 TREADPATTERN,   SPECIALPROTECTIVEBAND,   NOMINALTIREWIDTH,
                 ASPECTRATIO,   TREADWEARINDICATORS,   NAMEOFMANUFACTURER,
                 FAMILY,   DOTSERIALNUMBER,   CERTIFICATENUMBER,   SUPPLEMENTALEXTENSION_EN,
                 ROWNUM
             ----EXTENSION_EN -- we just want the unique product records that have ever been assoc. with
             ---this certificate.
              FROM  productdata_report_view
              where lower(certificatenumber) = lower(ps_certificateNumber)  and
                    TireTypeID = pi_tiretypeid;




                    ----and rownum < 2;   took this out -- JES 2/25/2010

            Open pc_MeasureHDR for
            SELECT  MEASUREID,
                    PROJECTNUMBER,
                    TIRENUMBER,
                    TESTSPEC,
                    COMPLETIONDATE,
                    INFLATIONPRESSURE,
                    MOLDDESIGN,
                    RIMWIDTH,
                    DOTSERIALNUMBER,
                    DIAMETER,
                    AVGSECTIONWIDTH,
                    AVGOVERALLWIDTH,
                    MAXOVERALLWIDTH,
                    SIZEFACTOR,
                    MOUNTTIME,
                    MOUNTTEMP,
                    SERIALDATE,
                    ENDTIME,
                    ACTSIZEFACTOR,
                    ce.CERTIFICATIONTYPEID,
                    CERTIFICATENUMBER,
                    STARTINFLATIONPRESSURE,
                    ENDINFLATIONPRESSURE,
                    ADJUSTMENT,
                    CIRCUMFERENCE,
                    NOMINALDIAMETER,
                    NOMINALWIDTH,
                    NOMINALWIDTHPASSFAIL,
                    NOMINALWIDTHDIFERENCE,
                    NOMINALWIDTHTOLERANCE,
                    MAXOVERALLDIAMETER,
                    MINOVERALLDIAMETER,
                    OVERALLWIDTHPASSFAIL,
                    OVERALLDIAMETERPASSFAIL,
                    DIAMETERDIFERENCE,
                    DIAMETERTOLERANCE,
                    TEMPRESISTANCEGRADING,
                    TENSILESTRENGHT1,
                    TENSILESTRENGHT2,
                    ELONGATION1,
                    ELONGATION2,
                    TENSILESTRENGHTAFTERAGE1,
                    TENSILESTRENGHTAFTERAGE2,
                    SKU,
                    LPAD(MATL_NUM,18,0) AS MATL_NUM-- Added as per PRJ3617
              FROM Certificate ce
                  inner join MEASUREHDR m on
                       ce.certificateid = m.certificateid and
                       ce.certificationtypeid = m.certificationtypeid
                 where ce.certificationtypeid = 1 and
                    lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                    and upper(CE.MOSTRECENTCERT) = 'Y';

              open pc_measureDtl for
              SELECT md.MEASUREID,
                    SECTIONWIDTH,
                    OVERALLWIDTH,
                    ITERATION
              FROM Certificate ce inner join MEASUREHDR m on
                       ce.certificateid = m.certificateid and
                       ce.certificationtypeid = m.certificationtypeid and
                       lower(CE.MOSTRECENTCERT) = 'y'
                    inner join MEASUREDTL md on
                           m.measureid = md.measureid
              where m.certificationtypeid = 1 and
                    lower(ce.certificatenumber) = lower(ps_CertificateNumber);

              open pc_BEADUNSEATHDR for
              SELECT BEADUNSEATID,
                    PROJECTNUMBER,
                    TIRENUMBER,
                    TESTSPEC,
                    COMPLETIONDATE,
                    DOTSERIALNUMBER,
                    LOWESTUNSEATVALUE,
                    PASSYN,
                    b.CERTIFICATIONTYPEID,
                    CERTIFICATENUMBER,
                    SERIALDATE,
                    MINBEADUNSEAT,
                    TESTPASSFAIL,
                    SKU,
                    LPAD(MATL_NUM,18,0) AS MATL_NUM-- Added as per PRJ3617
             FROM Certificate ce inner join BEADUNSEATHDR b on
                       ce.certificateid = b.certificateid and
                       ce.certificationtypeid = b.certificationtypeid
                     where b.certificationtypeid = 1 and
                     lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                    AND lower(CE.MOSTRECENTCERT) = 'y';

               open pc_BEADUNSEATDTL for
               SELECT bd.BEADUNSEATID,
                      UNSEATFORCE,
                      ITERATION
               FROM Certificate ce
                             inner join BEADUNSEATHDR b on
                                    ce.certificateid = b.certificateid and
                                    ce.certificationtypeid = b.certificationtypeid
                             inner join BEADUNSEATDTL bd on
                                   b.beadunseatid = bd.beadunseatid
               where b.certificationtypeid = 1 and
                     lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                     AND lower(CE.MOSTRECENTCERT) = 'y';

               open pc_PLUNGERHDR for
               SELECT PLUNGERID,
                      PROJECTNUMBER,
                      TIRENUMBER,
                      TESTSPEC,
                      COMPLETIONDATE,
                      DOTSERIALNUMBER,
                      AVGBREAKINGENERGY,
                      PASSYN,
                      p.CERTIFICATIONTYPEID,
                      CERTIFICATENUMBER,
                      SERIALDATE,
                      MINPLUNGER,
                      SKU,
                      LPAD(MATL_NUM,18,0) AS MATL_NUM-- Added as per PRJ3617
                 FROM Certificate ce
                             inner join  PLUNGERHDR p on
                                    ce.certificateid = p.certificateid and
                                    ce.certificationtypeid = p.certificationtypeid
                where p.certificationtypeid = 1 and
                       lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                       AND lower(CE.MOSTRECENTCERT) = 'y';

                open pc_PLUNGERDTL for
                SELECT pd.PLUNGERID,
                        BREAKINGENERGY,
                        ITERATION
                 FROM Certificate ce
                             inner join PLUNGERHDR ph on
                                   ce.certificateid       = ph.certificateid and
                                   ce.certificationtypeid = ph.certificationtypeid
                             inner join PLUNGERDTL pd on
                                  ph.plungerid = pd.plungerid
                where ph.certificationtypeid = 1 and
                      lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                      AND lower(CE.MOSTRECENTCERT) = 'y';


                open pc_TREADWEARHDR for
                SELECT TREADWEARID,
                      PROJECTNUMBER,
                      TIRENUMBER,
                      TESTSPEC,
                      COMPLETIONDATE,
                      DOTSERIALNUMBER,
                      LOWESTWEARBAR,
                      PASSYN,
                      SERIALDATE,
                      t.CERTIFICATIONTYPEID,
                      CERTIFICATENUMBER,
                      INDICATORSREQUIREMENT,
                      SKU,
                      LPAD(MATL_NUM,18,0) AS MATL_NUM-- Added as per PRJ3617
                FROM Certificate ce
                             inner join TREADWEARHDR t on
                                   ce.certificateid       = t.certificateid and
                                   ce.certificationtypeid = t.certificationtypeid
                where t.certificationtypeid = 1 and
                       lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                        and lower(CE.MOSTRECENTCERT) = 'y';

                 open pc_TREADWEARDTL for
                  SELECT  td.TREADWEARID,
                          WEARBARHEIGHT,
                          ITERATION
                 FROM Certificate ce
                             inner join TREADWEARHDR t on
                                   ce.certificateid       = t.certificateid and
                                   ce.certificationtypeid = t.certificationtypeid
                            inner join TREADWEARDTL td on
                                   t.treadwearid = td.treadwearid
                where t.certificationtypeid = 1 and
                      lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                      AND lower(CE.MOSTRECENTCERT) = 'y';

                open pc_ENDURANCEHDR for
                SELECT e.ENDURANCEID,
                      PROJECTNUMBER,
                      TIRENUMBER,
                      TESTSPEC,
                      COMPLETIONDATE,
                      DOTSERIALNUMBER,
                      MFGWWYY,
                      PRECONDSTARTDATE,
                      PRECONDSTARTTEMP,
                      RIMDIAMETER,
                      RIMWIDTH,
                      PRECONDENDDATE,
                      PRECONDENDTEMP,
                      INFLATIONPRESSURE,
                      BEFOREDIAMETER,
                      AFTERDIAMETER,
                      BEFOREINFLATION,
                      AFTERINFLATION,
                      WHEELPOSITION,
                      WHEELNUMBER,
                      FINALTEMP,
                      FINALDISTANCE,
                      FINALINFLATION,
                      POSTCONDSTARTDATE,
                      POSTCONDENDDATE,
                      POSTCONDENDTEMP,
                      PASSYN,
                      e.CERTIFICATIONTYPEID,
                      CERTIFICATENUMBER,
                      SERIALDATE,
                      PRECONDTIME,
                      POSTCONDTIME,
                      DIAMETERTESTDRUM,
                      PRECONDTEMP,
                      INFLATIONPRESSUREREADJUSTED,
                      CIRCUNFERENCEBEFORETEST,
                      RESULTPASSFAIL,
                      ENDURANCEHOURS,
                      POSSIBLEFAILURESFOUND,
                      CIRCUNFERENCEAFTERTEST,
                      OUTERDIAMETERDIFERENCE,
                      ODDIFERENCETOLERANCE,
                      SERIENOM,
                      FINALJUDGEMENT,
                      APPROVER,
                      SKU,
                      LPAD(MATL_NUM,18,0) AS MATL_NUM, -- Added as per PRJ3617
                      ROUND(ENS.SPEED*.62)*5 DRUMSPEED
                    FROM Certificate ce inner join ENDURANCEHDR e on
                               ce.certificateid = e.certificateid and
                               ce.certificationtypeid = e.certificationtypeid
                         LEFT OUTER JOIN (select enduranceid, max(speed) speed from
                              ENDURANCEDTL ENDL group by enduranceid) ENS
                              on ENS.enduranceid = e.enduranceid
                    where e.certificationtypeid = 1 and
                       lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                       AND lower(CE.MOSTRECENTCERT) = 'y';

                    open pc_ENDURANCEDTL for
                    SELECT TESTSTEP,
                      TIMEINMIN,
                      SPEED,
                      TOTMILES,
                      LOAD,
                      LOADPERCENT,
                      SETINFLATION,
                      AMBTEMP,
                      INFPRESSURE,
                      STEPCOMPLETIONDATE,
                      ed.ENDURANCEID
                    FROM Certificate ce
                              inner join ENDURANCEHDR e on
                                     ce.certificateid = e.certificateid and
                                     ce.certificationtypeid = e.certificationtypeid
                              inner join ENDURANCEDTL ed on
                                     e.enduranceid = ed.enduranceid
                    where e.certificationtypeid = 1 and
                          lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                          AND lower(CE.MOSTRECENTCERT) = 'y';

                    open pc_HIGHSPEEDHDR for
                    SELECT h.HIGHSPEEDID,
                      PROJECTNUMBER,
                      TIRENUM,
                      TESTSPEC,
                      COMPETIONDATE,
                      DOTSERIALNUMBER,
                      MFGWWYY,
                      PRECONDSTARTDATE,
                      PRECONDSARTTEMP,
                      RIMDIAMETER,
                      RIMWIDTH,
                      PRECONDENDDATE,
                      PRECONDENDTEMP,
                      INFLATIONPRESSURE,
                      BEFOREDIAMETER,
                      AFTERDIAMETER,
                      BEFOREINFLATION,
                      AFTERINFLATION,
                      WHEELPOSITION,
                      WHEELNUMBER,
                      FINALTEMP,
                      FINALDISTANCE,
                      FINALINFLATION,
                      POSTCONDSTARTDATE,
                      POSTCONDENDDATE,
                      POSTCONDENDTEMP,
                      PASSYN,
                      SERIALDATE,
                      POSTCONDTIME,
                      h.CERTIFICATIONTYPEID,
                      CERTIFICATENUMBER,
                      DIAMETERTESTDRUM,
                      PRECONDTIME,
                      PRECONDTEMP,
                      INFLATIONPRESSUREREADJUSTED,
                      CIRCUNFERENCEBEFORETEST,
                      WHEELSPEEDRPM,
                      WHEELSPEEDKMH,
                      CIRCUNFERENCEAFTERTEST,
                      ODDIFERENCE,
                      ODDIFERENCETOLERANCE,
                      SERIENOM,
                      FINALJUDGEMENT,
                      APPROVER,
                      PASSATKMH,
                      SPEEDTTESTPASSFAIL,
                      SPEEDTOTALTIME,
                      MAXSPEED,
                      hsl.load MAXLOAD,
                      SKU,
                      LPAD(MATL_NUM,18,0) AS MATL_NUM-- Added as per PRJ3617
                    FROM Certificate ce inner join HIGHSPEEDHDR h on
                               ce.certificateid = h.certificateid and
                               ce.certificationtypeid = h.certificationtypeid
                        LEFT OUTER JOIN (select highspeedid, max(load) LOAD from
                              HIGHSPEEDDTL HSD group by highspeedid) HSL
                              on HSL.highspeedid = h.highspeedID
                    where h.certificationtypeid = 1 and
                          lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                          AND lower(CE.MOSTRECENTCERT) = 'y';



                  open pc_HIGHSPEEDDTL for
                  SELECT TESTSTEP,
                    TIMEINMIN,
                    SPEED,
                    TOTMILES,
                    LOAD,
                    LOADPERCENT,
                    SETINFLATION,
                    AMBTEMP,
                    INFPRESSURE,
                    STEPCOMPLETIONDATE,
                    hd.HIGHSPEEDID
                  FROM Certificate ce
                              inner join HIGHSPEEDHDR h on
                                     ce.certificateid = h.certificateid and
                                     ce.certificationtypeid = h.certificationtypeid
                              inner join HIGHSPEEDDTL hd on
                                     h.highspeedid = hd.highspeedid
                    where h.certificationtypeid = 1 and
                          lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                          AND lower(CE.MOSTRECENTCERT) = 'y';



                  open pc_SPEEDTESTDETAIL for
                  SELECT ITERATION,
                      TIME,
                        SPEED,
                        s.HIGHSPEEDID
                  FROM Certificate ce
                              inner join HIGHSPEEDHDR h  on
                                     ce.certificateid = h.certificateid and
                                     ce.certificationtypeid = h.certificationtypeid
                              inner join SPEEDTESTDETAIL s on
                                     h.highspeedid = s.highspeedid
                  WHERE h.certificationtypeid = 1 and
                        lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                        AND lower(CE.MOSTRECENTCERT) = 'y';


  EXCEPTION
          when li_ParametersAreNull then
            ls_ErrorMsg:=  sqlerrm ||  '-GetEmarkTestReportInfo.There is at least one parameters null.'  ;
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' Reports_Package.GetEmarkTestReportInfor',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20005,ls_ErrorMsg);

         when li_ParametersAreInvalid then
            ls_ErrorMsg:=  sqlerrm || '-GetEmarkTestReportInfo. There is at least one parameters invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' Reports_Package.GetEmarkTestReportInfo',
                AX_RECORDDATA    => 'There is at least one parameters invalid.',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || '-GetEmarkTestReportInfo. An error have ocurred.(when others)' || sqlerrm;
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' Reports_Package.GetEmarkTestReportInfo',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);
  end GetEmarkTestReportInfo;

     Procedure GetNOMCertification( ps_CertificateNumber in varchar2,
                                     pi_tiretypeid        in number,
                                     pc_CertificateDfValue  out retCursor,
                                     pc_CertificateInfo   out retCursor,
                                     pc_Product           out retcursor,
                                     pc_MeasureHDR        out retCursor,
                                     pc_measureDtl        out retCursor,
                                     pc_BEADUNSEATHDR     out retCursor,
                                     pc_BEADUNSEATDTL     out retCursor,
                                     pc_PLUNGERHDR        out retCursor,
                                     pc_PLUNGERDTL        out retCursor,
                                     pc_TREADWEARHDR      out retCursor,
                                     pc_TREADWEARDTL      out retCursor,
                                     pc_ENDURANCEHDR      out retCursor,
                                     pc_ENDURANCEDTL      out retCursor,
                                     pc_HIGHSPEEDHDR      out retCursor,
                                     pc_HIGHSPEEDDTL      out retCursor,
                                     pc_SPEEDTESTDETAIL   out retCursor,
                                     pc_Brand             out retCursor) as
    /************************************************************************************************
     Procedure Name - GetNOMCertification
     Change History
      --------------------------------------------------------------------------
      Version No  Date          Author    Description
      ---------------------------------------------------------------------------
          1.0                             Intial Version
          1.1     9/17/2012     Krishna   - As per PRJ3617
                                            - Replaced NPRID with PSN
                                            - Added Matl_Num wherever SKU is available in Select list of the query
    *************************************************************************************************/

      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
       li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);

      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);

      --ls_brandcode VARCHAR2(10):= NULL;
      -- Added as per PRJ3617
      ls_Brand  Product.Brand%TYPE;
      ls_Brand_Line Product.Brand_Line%TYPE;
  begin

      if ps_CertificateNumber is null then
          raise li_ParametersAreNull;
      end if ;
      if ps_CertificateNumber = '' then
          raise li_ParametersAreInvalid;
      end if ;


      -- Gets the brand information
--          Open pc_brand for
--          SELECT distinct  BRANDCODE, ---get all brands that have ever been associated with this certificate, because
--                        BRANDNAME,           ---the sks's that were on the original test specs may have since been discontinued
--                        CERTIFICATENUMBER---but just get each brand once, even though it is multiple extensions.
--          FROM  brand_view
--          where lower(certificatenumber) = lower(ps_certificateNumber)  ;
     --- use this cursor to return the sizes for this brand



      --Gets the default values information.
            OPen pc_CertificateDfValue for
            SELECT CERTIFICATENUMBER,
                   MAX(DECODE(fieldid,153,fieldvalue,NULL)) Dimension_N,
                   MAX(DECODE(FIELDID,120,fieldvalue,NULL)) EquipoEmpleadoRinDesc1_N,
                   MAX(DECODE(FIELDID,123,fieldvalue,NULL)) EquipoEmpleadoRinDESC2_N,
                   MAX(DECODE(FIELDID,126,fieldvalue,NULL)) EquipoEmpleadoRinDESC3_N ,
                   MAX(DECODE(FIELDID,129,fieldvalue,NULL)) EquipoEmpleadoRinDESC4_N ,
                   MAX(DECODE(FIELDID,132,fieldvalue,NULL)) EquipoEmpleadoRinDESC5_N,
                   MAX(DECODE(FIELDID,135,fieldvalue,NULL)) EquipoEmpleadoRinDESC6_N,
                   MAX(DECODE(FIELDID,138,fieldvalue,NULL)) EquipoEmpleadoRinDESC7_N,
                   MAX(DECODE(FIELDID,141,fieldvalue,NULL)) EquipoEmpleadoRinDESC8_N,
                   MAX(DECODE(FIELDID,121,fieldvalue,NULL)) EquipoEmpleadoRinMarca1_N,
                   MAX(DECODE(FIELDID,124,fieldvalue,NULL)) EquipoEmpleadoRinMarca2_N,
                   MAX(DECODE(FIELDID,127,fieldvalue,NULL)) EquipoEmpleadoRinMarca3_N,
                   MAX(DECODE(FIELDID,130,fieldvalue,NULL)) EquipoEmpleadoRinMarca4_N ,
                   MAX(DECODE(FIELDID,133,fieldvalue,NULL)) EquipoEmpleadoRinMarca5_N,
                   MAX(DECODE(FIELDID,136,fieldvalue,NULL)) EquipoEmpleadoRinMarca6_N,
                   MAX(DECODE(FIELDID,139,fieldvalue,NULL)) EquipoEmpleadoRinMarca7_N,
                   MAX(DECODE(FIELDID,142,fieldvalue,NULL)) EquipoEmpleadoRinMarca8_N,
                   MAX(DECODE(FIELDID,122,fieldvalue,NULL)) EquipoEmpleadoRinModelo1_N,
                   MAX(DECODE(FIELDID,125,fieldvalue,NULL)) EquipoEmpleadoRinModelo2_N ,
                   MAX(DECODE(FIELDID,128,fieldvalue,NULL)) EquipoEmpleadoRinModelo3_N,
                   MAX(DECODE(FIELDID,131,fieldvalue,NULL)) EquipoEmpleadoRinModelo4_N ,
                   MAX(DECODE(FIELDID,134,fieldvalue,NULL)) EquipoEmpleadoRinModelo5_N,
                   MAX(DECODE(FIELDID,137,fieldvalue,NULL)) EquipoEmpleadoRinModelo6_N,
                   MAX(DECODE(FIELDID,140,fieldvalue,NULL)) EquipoEmpleadoRinModelo7_N,
                   MAX(DECODE(FIELDID,143,fieldvalue,NULL)) EquipoEmpleadoRinModelo8_N,
                   MAX(DECODE(FIELDID,144,fieldvalue,NULL)) EquipoPruebaResistencia_N,
                   MAX(DECODE(FIELDID,150,fieldvalue,NULL)) EvaluationDate_N,
                   MAX(DECODE(FIELDID,159,fieldvalue,NULL)) FinalPressure_N,
                   MAX(DECODE(FIELDID,152,fieldvalue,NULL)) Height_N,
                   MAX(DECODE(FIELDID,146,fieldvalue,NULL)) IdentificationKey_N,
                   MAX(DECODE(FIELDID,158,fieldvalue,NULL)) LoadBehavior_N,
                   MAX(DECODE(FIELDID,147,fieldvalue,NULL)) Loadcapacity_N,
                   MAX(DECODE(FIELDID,155,fieldvalue,NULL)) MeasurementFactor_N,
                   MAX(DECODE(FIELDID,148,fieldvalue,NULL)) Model_N,
                   MAX(DECODE(FIELDID,157,fieldvalue,NULL)) PenetrationResistence_N,
                   MAX(DECODE(FIELDID,156,fieldvalue,NULL)) RimResistence_N,
                   MAX(DECODE(FIELDID,160,fieldvalue,NULL)) RoomTemp_N,
                  --- MAX(DECODE(FIELDID,154,fieldvalue,NULL)) SectionWidth_N,
                   MAX(DECODE(FIELDID,119,fieldvalue,NULL)) SinalpAddress_N,
                   MAX(DECODE(FIELDID,118,fieldvalue,NULL)) SinalpCentroEvaluacion_N,
                   MAX(DECODE(FIELDID,114,fieldvalue,NULL)) SinalpDomicilio_N,
                   MAX(DECODE(FIELDID,113,fieldvalue,NULL)) SinalpEmpresa_N,
                   MAX(DECODE(FIELDID,116,fieldvalue,NULL)) SinalpHulera_N,
                   MAX(DECODE(FIELDID,117,fieldvalue,NULL)) SinalpManufacturerName_N,
                   MAX(DECODE(FIELDID,115,fieldvalue,NULL)) SinalpRepresentante_N,
                   MAX(DECODE(FIELDID,161,fieldvalue,NULL)) SpeedBehavior_N,
                   MAX(DECODE(FIELDID,162,fieldvalue,NULL)) TestInfo_N,
                   MAX(DECODE(FIELDID,164,fieldvalue,NULL)) TestReport_N,
                   MAX(DECODE(FIELDID,163,fieldvalue,NULL)) TestSerie_N,
                   MAX(DECODE(FIELDID,145,fieldvalue,NULL)) TireIdentification_N,
                   MAX(DECODE(FIELDID,149,fieldvalue,NULL)) Type_N,
                   MAX(DECODE(FIELDID,151,fieldvalue,NULL)) WearingDownIndicator_N,
                   MAX(DECODE(FIELDID,187,fieldvalue,NULL)) SIGNATURENAME_N,
                   MAX(DECODE(FIELDID,188,fieldvalue,NULL)) SIGNATURENTITLE_N,
                   MAX(DECODE(FIELDID,190,fieldvalue,NULL)) NominalBeadUnseat_N,
                   MAX(DECODE(FIELDID,191,fieldvalue,NULL)) NominalPlunger_N,
                   MAX(DECODE(FIELDID,192,fieldvalue,NULL)) LowPressEndurInitInfl_N
        FROM (
                SELECT FIELDID,
                   CERTIFICATENUMBER,
                   FIELDVALUE
                FROM defaultvalues_view
                WHERE lower(certificatenumber) =lower(ps_certificateNumber)  and
                      CERTIFICATIONTYPEID = 3
              )   group by CERTIFICATENUMBER ;

             Open pc_CertificateInfo for
                          Select
                    CERTIFICATEID,
                    ce.CERTIFICATIONTYPEID,
                    CERTIFICATIONTYPENAME,
                    CERTIFICATENUMBER,
                     ACTIVESTATUS,
                     RENEWALREQUIRED_CGIN,
                     EXTENSION_EN,
                                  ---PRODUCTLOCATION PRODUCTLOCATION_C,
                     COUNTRYOFMANUFACTURE_N,
                     CUSTOMER CUSTOMER_N,
                     CUSTOMERSPECIFIC_N,
                     IMPORTER,
                    IMPORTERREPRESENTATIVE,
                    IMPORTERADDRESS,
                    CERTDATESUBMITTED,
                    CERTDATEAPPROVED,
                    CU.SIGNATUREIND
                        From Certificate ce
                          inner join  certificationtype ct on
                            CT.CERTIFICATIONTYPEID = CE.CERTIFICATIONTYPEID
                           LEFT OUTER JOIN IMPORTER IM ON
                             CE.IMPORTERID = IM.IMPORTERID
                           LEFT OUTER JOIN CUSTOMER CU ON
                             CE.CUSTOMERID = CU.CUSTOMERID
                          Where ce.CERTIFICATIONTYPEID = 3 And
                           lower(ce.certificatenumber) = lower(ps_certificateNumber) and
                           lower(CE.MOSTRECENTCERT) = 'y'  ;
             --As per PRJ3617,
             -- Added PSN instead of NPRID
             -- Added Matl_Num
             -- Added brand and brand_line instead of brandcode and removed BrandDesc
             Open pc_Product for
            SELECT distinct  P.SKUID,  SKU,LPAD(MATL_NUM,18,0) AS MATL_NUM, BRAND,BRAND_LINE, TIRETYPEID, PSN,
                  SIZESTAMP,
                   DISCONTINUEDDATE,   SPECNUMBER,   SPEEDRATING,
                 SINGLOADINDEX,   DUALLOADINDEX,   BIASBELTEDRADIAL,   TUBELESSYN,
                 REINFORCEDYN,   EXTRALOADYN,   UTQGTREADWEAR,   UTQGTRACTION,
                 UTQGTEMP,   MUDSNOWYN,   RIMDIAMETER,   SERIALDATE,
                 LOADRANGE,   MEARIMWIDTH,   REGROOVABLEIND,   PLANTPRODUCED,
                 MOSTRECENTTESTDATE,   IMARK,   INFORMENUMBER,   FECHADATE,
                 TREADPATTERN,   SPECIALPROTECTIVEBAND,   NOMINALTIREWIDTH,
                 ASPECTRATIO,   TREADWEARINDICATORS,   NAMEOFMANUFACTURER,
                 FAMILY,   DOTSERIALNUMBER,  ce.CERTIFICATENUMBER
             ----EXTENSION_EN -- we just want the unique product records that have ever been assoc. with
             ---this certificate.
--     FROM  productdata_report_view
--              where lower(certificatenumber) = lower(ps_certificateNumber)  and
--                    TireTypeID = pi_tiretypeid;
--                    ----and rownum < 2;   took this out -- JES 2/25/2010
               FROM product p
           INNER JOIN productcertificate pce
             ON p.skuid = pce.skuid
          INNER JOIN certificate ce
             ON pce.certificateid = ce.certificateid
                AND pce.certificationtypeid = ce.certificationtypeid
          where lower(certificatenumber) = lower(ps_certificateNumber);
            ---and TireTypeID = pi_tiretypeid;

       BEGIN
           -- Added  ls_Brand,ls_Brand_Line instead of ls_brandcode
          SELECT DISTINCT Brand,  Brand_Line
            INTO ls_Brand,ls_Brand_Line--ls_brandcode
             FROM product p
          INNER JOIN productcertificate pce
             ON p.skuid = pce.skuid
          INNER JOIN certificate ce
             ON pce.certificateid = ce.certificateid
                AND pce.certificationtypeid = ce.certificationtypeid
          where lower(ce.certificatenumber) = lower(ps_certificateNumber)  and
              ---TireTypeID = pi_tiretypeid AND
               LOWER(CE.MOSTRECENTCERT)='y'               ;
       EXCEPTION
                       WHEN OTHERS THEN
                              --ls_brandcode:=NULL;
                              ls_Brand := NULL;
                              ls_Brand_Line := NULL;
       END;

                -- Gets the brand information
--          Open pc_brand for
--          SELECT distinct  BRANDCODE, ---get all brands that have ever been associated with this certificate, because
--                        BRANDNAME,           ---the sks's that were on the original test specs may have since been discontinued
--                        CERTIFICATENUMBER---but just get each brand once, even though it is multiple extensions.
--          FROM  brand_view
--          where lower(certificatenumber) = lower(ps_certificateNumber)  ;
     --- use this cursor to return the sizes for this brand
            Open pc_brand for
             /*   SELECT DISTINCT BRAND_CODE,
                SIZE_STAMP||' '||DECODE(nvl(S.LOAD_RANGE,' '),'XL','XL', 'RE','RE',' ')  SIZESTAMP,
                CASE WHEN(pi_tiretypeid= 1) THEN 1
                        WHEN(pi_tiretypeid= 3) THEN
                               ( CASE WHEN (SLOAD_IDX>112) THEN 2
                                          ELSE 1
                               END)
                          ELSE 1
                   END SLOAD_IDX
                     FROM  BOM_DATA.SKU_MASTER_MV S
                   WHERE BRAND_CODE =  ls_brandcode
                   AND NVL (disc_date, SYSDATE) > '01-NOV-1991'; --lets only get the more recent sku's
                  --- and disc_date is null; -- hasn't been discontined
                   -- nope - now Mario said to include everything, even ones that are discontinued - 4/28/2011
              */
              SELECT DISTINCT p.Brand,
                              p.Brand_Line,
                              Size_Stamp||' '||DECODE(NVL(Load_Range,' '),'XL','XL', 'RE','RE',' ') Size_Stamp,
                              CASE WHEN(pi_tiretypeid= 1)
                                   THEN 1
                                   WHEN(pi_tiretypeid= 3)
                                   THEN
                                       ( CASE WHEN (Sload_Idx>112)
                                              THEN 2
                                              ELSE 1
                                          END)
                                ELSE 1
                              END Sload_Idx
                      FROM (  SELECT  LPAD(Matl_Num,18,0) AS Matl_Num
                                     ,MAX(DECODE(Attrib_Name,'LOAD_RANGE',Attrib_Value))                 AS LOAD_RANGE
                                     ,MAX(DECODE(Attrib_Name,'STAMPED_SINGLE_LOAD_INDEX',Attrib_Value))  AS Sload_Idx
                                     ,MAX(DECODE(Attrib_Name,'TIRE_SIZE',Attrib_Value))                  AS Size_Stamp
                               FROM ( SELECT ma.*,
                                             DENSE_RANK() OVER(PARTITION BY LPAD(ma.Matl_Num,18,0), ma.Attrib_Name ORDER BY ma.Counter DESC) AS rk
                                        FROM Material_Attribute ma
                                       WHERE Attrib_Name IN ('STAMPED_SINGLE_LOAD_INDEX' ,'TIRE_SIZE' ,'LOAD_RANGE')
                                       )
                              WHERE rk = 1
                           GROUP BY Matl_Num) ma,
                              Product p
                WHERE p.matl_num = LPAD(ma.matl_num,18,0)
                  AND p.Brand = ls_Brand
                  AND p.Brand_Line = ls_Brand_Line
                  AND NVL (p.DiscontinuedDate, SYSDATE) > '01-NOV-1991';

            Open pc_MeasureHDR for
            SELECT  MEASUREID,
                    PROJECTNUMBER,
                    TIRENUMBER,
                    TESTSPEC,
                    COMPLETIONDATE,
                    INFLATIONPRESSURE,
                    MOLDDESIGN,
                    RIMWIDTH,
                    DOTSERIALNUMBER,
                    DIAMETER,
                    AVGSECTIONWIDTH,
                    AVGOVERALLWIDTH,
                    MAXOVERALLWIDTH,
                    SIZEFACTOR,
                    MOUNTTIME,
                    MOUNTTEMP,
                    SERIALDATE,
                    ENDTIME,
                    ACTSIZEFACTOR,
                    ce.CERTIFICATIONTYPEID,
                    CERTIFICATENUMBER,
                    STARTINFLATIONPRESSURE,
                    ENDINFLATIONPRESSURE,
                    ADJUSTMENT,
                    CIRCUMFERENCE,
                    NOMINALDIAMETER,
                    NOMINALWIDTH,
                    NOMINALWIDTHPASSFAIL,
                    NOMINALWIDTHDIFERENCE,
                    NOMINALWIDTHTOLERANCE,
                    MAXOVERALLDIAMETER,
                    MINOVERALLDIAMETER,
                    OVERALLWIDTHPASSFAIL,
                    OVERALLDIAMETERPASSFAIL,
                    DIAMETERDIFERENCE,
                    DIAMETERTOLERANCE,
                    TEMPRESISTANCEGRADING,
                    TENSILESTRENGHT1,
                    TENSILESTRENGHT2,
                    ELONGATION1,
                    ELONGATION2,
                    TENSILESTRENGHTAFTERAGE1,
                    TENSILESTRENGHTAFTERAGE2,
                    SKU,
                    LPAD(MATL_NUM,18,0) AS MATL_NUM-- Added as per PRJ3617
              FROM Certificate ce inner join MEASUREHDR m on
                       ce.certificateid = m.certificateid and
                       ce.certificationtypeid = m.certificationtypeid
                   where ce.certificationtypeid = 3 and
                    lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                    and upper(CE.MOSTRECENTCERT) = 'Y';

              open pc_measureDtl for
              SELECT md.MEASUREID,
                    SECTIONWIDTH,
                    OVERALLWIDTH,
                    ITERATION
              FROM Certificate ce inner join MEASUREHDR m on
                       ce.certificateid = m.certificateid and
                       ce.certificationtypeid = m.certificationtypeid and
                       lower(CE.MOSTRECENTCERT) = 'y'
                    inner join MEASUREDTL md on
                           m.measureid = md.measureid
              where m.certificationtypeid = 3 and
                    lower(ce.certificatenumber) = lower(ps_CertificateNumber);

              open pc_BEADUNSEATHDR for
              SELECT BEADUNSEATID,
                    PROJECTNUMBER,
                    TIRENUMBER,
                    TESTSPEC,
                    COMPLETIONDATE,
                    DOTSERIALNUMBER,
                    LOWESTUNSEATVALUE,
                    PASSYN,
                    b.CERTIFICATIONTYPEID,
                    CERTIFICATENUMBER,
                    SERIALDATE,
                    MINBEADUNSEAT,
                    TESTPASSFAIL,
                    SKU,
                    LPAD(MATL_NUM,18,0) AS MATL_NUM-- Added as per PRJ3617
             FROM Certificate ce inner join BEADUNSEATHDR b on
                       ce.certificateid = b.certificateid and
                       ce.certificationtypeid = b.certificationtypeid
                     where b.certificationtypeid = 3 and
                     lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                    AND lower(CE.MOSTRECENTCERT) = 'y';

               open pc_BEADUNSEATDTL for
               SELECT bd.BEADUNSEATID,
                      UNSEATFORCE,
                      ITERATION
               FROM Certificate ce
                             inner join BEADUNSEATHDR b on
                                    ce.certificateid = b.certificateid and
                                    ce.certificationtypeid = b.certificationtypeid
                             inner join BEADUNSEATDTL bd on
                                   b.beadunseatid = bd.beadunseatid
               where b.certificationtypeid = 3 and
                     lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                     AND lower(CE.MOSTRECENTCERT) = 'y';

               open pc_PLUNGERHDR for
               SELECT PLUNGERID,
                      PROJECTNUMBER,
                      TIRENUMBER,
                      TESTSPEC,
                      COMPLETIONDATE,
                      DOTSERIALNUMBER,
                      AVGBREAKINGENERGY,
                      PASSYN,
                      p.CERTIFICATIONTYPEID,
                      CERTIFICATENUMBER,
                      SERIALDATE,
                      MINPLUNGER,
                      SKU,
                      LPAD(MATL_NUM,18,0) AS MATL_NUM -- Added as per PRJ3617
                 FROM Certificate ce
                             inner join  PLUNGERHDR p on
                                    ce.certificateid = p.certificateid and
                                    ce.certificationtypeid = p.certificationtypeid
                where p.certificationtypeid = 3 and
                       lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                       AND lower(CE.MOSTRECENTCERT) = 'y';

                open pc_PLUNGERDTL for
                SELECT pd.PLUNGERID,
                        BREAKINGENERGY,
                        ITERATION
                 FROM Certificate ce
                             inner join PLUNGERHDR ph on
                                   ce.certificateid       = ph.certificateid and
                                   ce.certificationtypeid = ph.certificationtypeid
                             inner join PLUNGERDTL pd on
                                  ph.plungerid = pd.plungerid
                where ph.certificationtypeid = 3 and
                      lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                      AND lower(CE.MOSTRECENTCERT) = 'y';


                open pc_TREADWEARHDR for
                SELECT TREADWEARID,
                      PROJECTNUMBER,
                      TIRENUMBER,
                      TESTSPEC,
                      COMPLETIONDATE,
                      DOTSERIALNUMBER,
                      LOWESTWEARBAR,
                      PASSYN,
                      SERIALDATE,
                      t.CERTIFICATIONTYPEID,
                      CERTIFICATENUMBER,
                      INDICATORSREQUIREMENT,
                      SKU,
                      LPAD(MATL_NUM,18,0) AS MATL_NUM -- Added as per PRJ3617
                FROM Certificate ce
                             inner join TREADWEARHDR t on
                                   ce.certificateid       = t.certificateid and
                                   ce.certificationtypeid = t.certificationtypeid
                where t.certificationtypeid = 3 and
                       lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                        and lower(CE.MOSTRECENTCERT) = 'y';

                 open pc_TREADWEARDTL for
                  SELECT  td.TREADWEARID,
                          WEARBARHEIGHT,
                          ITERATION
                 FROM Certificate ce
                             inner join TREADWEARHDR t on
                                   ce.certificateid       = t.certificateid and
                                   ce.certificationtypeid = t.certificationtypeid
                            inner join TREADWEARDTL td on
                                   t.treadwearid = td.treadwearid
                where t.certificationtypeid = 3 and
                      lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                      AND lower(CE.MOSTRECENTCERT) = 'y';

                open pc_ENDURANCEHDR for
                SELECT e.ENDURANCEID,
                      PROJECTNUMBER,
                      TIRENUMBER,
                      TESTSPEC,
                      COMPLETIONDATE,
                      DOTSERIALNUMBER,
                      MFGWWYY,
                      PRECONDSTARTDATE,
                      PRECONDSTARTTEMP,
                      RIMDIAMETER,
                      RIMWIDTH,
                      PRECONDENDDATE,
                      PRECONDENDTEMP,
                      INFLATIONPRESSURE,
                      BEFOREDIAMETER,
                      AFTERDIAMETER,
                      BEFOREINFLATION,
                      AFTERINFLATION,
                      WHEELPOSITION,
                      WHEELNUMBER,
                      FINALTEMP,
                      FINALDISTANCE,
                      FINALINFLATION,
                      POSTCONDSTARTDATE,
                      POSTCONDENDDATE,
                      POSTCONDENDTEMP,
                      PASSYN,
                      e.CERTIFICATIONTYPEID,
                      CERTIFICATENUMBER,
                      SERIALDATE,
                      PRECONDTIME,
                      POSTCONDTIME,
                      DIAMETERTESTDRUM,
                      PRECONDTEMP,
                      INFLATIONPRESSUREREADJUSTED,
                      CIRCUNFERENCEBEFORETEST,
                      RESULTPASSFAIL,
                      ENDURANCEHOURS,
                      POSSIBLEFAILURESFOUND,
                      CIRCUNFERENCEAFTERTEST,
                      OUTERDIAMETERDIFERENCE,
                      ODDIFERENCETOLERANCE,
                      SERIENOM,
                      FINALJUDGEMENT,
                      APPROVER,
                      SKU, SPEED,
                      LPAD(MATL_NUM,18,0) AS MATL_NUM, -- Added as per PRJ3617
                      LOWPRESSURESTARTINFLATION,
                      LOWPRESSUREENDINFLATION,
                      LOWPRESSUREENDTEMP
                    FROM Certificate ce inner join ENDURANCEHDR e on
                               ce.certificateid = e.certificateid and
                               ce.certificationtypeid = e.certificationtypeid
                          INNER JOIN (select enduranceid, max(speed) SPEED from
                              ENDURANCEDTL ed
                              where ed.TESTSTEP <= 1 group by enduranceid
                                ) eds
                              on eds.enduranceid = e.ENDURANCEID

                    where e.certificationtypeid = 3 and
                       lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                       AND lower(CE.MOSTRECENTCERT) = 'y';

                    open pc_ENDURANCEDTL for
                    SELECT TESTSTEP,
                      TIMEINMIN,
                      SPEED,
                      TOTMILES,
                      LOAD,
                      LOADPERCENT,
                      SETINFLATION,
                      AMBTEMP,
                      INFPRESSURE,
                      STEPCOMPLETIONDATE,
                      ed.ENDURANCEID
                    FROM Certificate ce
                              inner join ENDURANCEHDR e on
                                     ce.certificateid = e.certificateid and
                                     ce.certificationtypeid = e.certificationtypeid
                              inner join ENDURANCEDTL ed on
                                     e.enduranceid = ed.enduranceid
                    where e.certificationtypeid = 3 and
                          lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                          AND lower(CE.MOSTRECENTCERT) = 'y';

                    open pc_HIGHSPEEDHDR for
                    SELECT H.HIGHSPEEDID,
                      PROJECTNUMBER,
                      TIRENUM,
                      TESTSPEC,
                      COMPETIONDATE,
                      DOTSERIALNUMBER,
                      MFGWWYY,
                      PRECONDSTARTDATE,
                      PRECONDSARTTEMP,
                      RIMDIAMETER,
                      RIMWIDTH,
                      PRECONDENDDATE,
                      PRECONDENDTEMP,
                      INFLATIONPRESSURE,
                      BEFOREDIAMETER,
                      AFTERDIAMETER,
                      BEFOREINFLATION,
                      AFTERINFLATION,
                      WHEELPOSITION,
                      WHEELNUMBER,
                      FINALTEMP,
                      FINALDISTANCE,
                      FINALINFLATION,
                      POSTCONDSTARTDATE,
                      POSTCONDENDDATE,
                      POSTCONDENDTEMP,
                      PASSYN,
                      SERIALDATE,
                      POSTCONDTIME,
                      h.CERTIFICATIONTYPEID,
                      CERTIFICATENUMBER,
                      DIAMETERTESTDRUM,
                      PRECONDTIME,
                      PRECONDTEMP,
                      INFLATIONPRESSUREREADJUSTED,
                      CIRCUNFERENCEBEFORETEST,
                      WHEELSPEEDRPM,
                      WHEELSPEEDKMH,
                      CIRCUNFERENCEAFTERTEST,
                      ODDIFERENCE,
                      ODDIFERENCETOLERANCE,
                      SERIENOM,
                      FINALJUDGEMENT,
                      APPROVER,
                      PASSATKMH,
                      SPEEDTTESTPASSFAIL,
                      SPEEDTOTALTIME,
                      MAXSPEED,
                       HDM.load MAXLOAD,
                      SKU,
                      LPAD(MATL_NUM,18,0) AS MATL_NUM -- Added as per PRJ3617
                    FROM Certificate ce inner join HIGHSPEEDHDR h on
                               ce.certificateid = h.certificateid and
                               ce.certificationtypeid = h.certificationtypeid
                           inner join (select hd.highspeedid, max(load) LOAD  from highspeeddtl hd
                                where HD.TESTSTEP <= 1 ---Mario wanted this added so it just pulls the load from the first step, so that he only
                                                                        ---has to change one of them, and they are really all the same. - had to do it with
                                                                        ---the  <= so that if it doesn't have a step one, it won't error out.
                                                                         ---jes 5/10/11
                                group by hd.highspeedid) hdm on
                                H.HIGHSPEEDID = HDM.HIGHSPEEDID
                    where h.certificationtypeid = 3 and
                          lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                          AND lower(CE.MOSTRECENTCERT) = 'y';



                  open pc_HIGHSPEEDDTL for
                  SELECT TESTSTEP,
                    TIMEINMIN,
                    SPEED,
                    TOTMILES,
                    LOAD,
                    LOADPERCENT,
                    SETINFLATION,
                    AMBTEMP,
                    INFPRESSURE,
                    STEPCOMPLETIONDATE,
                    hd.HIGHSPEEDID
                  FROM Certificate ce
                              inner join HIGHSPEEDHDR h on
                                     ce.certificateid = h.certificateid and
                                     ce.certificationtypeid = h.certificationtypeid
                              inner join HIGHSPEEDDTL hd on
                                     h.highspeedid = hd.highspeedid
                    where h.certificationtypeid = 3 and
                          lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                          AND lower(CE.MOSTRECENTCERT) = 'y';



                  open pc_SPEEDTESTDETAIL for
                  SELECT ITERATION,
                      TIME,
                        SPEED,
                        s.HIGHSPEEDID
                  FROM Certificate ce
                              inner join HIGHSPEEDHDR h  on
                                     ce.certificateid = h.certificateid and
                                     ce.certificationtypeid = h.certificationtypeid
                              inner join SPEEDTESTDETAIL s on
                                     h.highspeedid = s.highspeedid
                  WHERE h.certificationtypeid = 3 and
                        lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                        AND lower(CE.MOSTRECENTCERT) = 'y';


  EXCEPTION
          when li_ParametersAreNull then
            ls_ErrorMsg:=  sqlerrm ||  '-GetNOMCertification.There is at least one parameters null.'  ;
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' Reports_Package.GetNOMCertification',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20005,ls_ErrorMsg);

         when li_ParametersAreInvalid then
            ls_ErrorMsg:=  sqlerrm || '-GetNOMCertification. There is at least one parameters invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' Reports_Package.GetNOMCertification',
                AX_RECORDDATA    => 'There is at least one parameters invalid.',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || '-GetNOMCertification. An error have ocurred.(when others)' || sqlerrm;
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' Reports_Package.GetNOMCertification',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);
  end GetNOMCertification;

 Procedure GetEmarkApplicationInfo( ps_CertificateNumber in varchar2,
                                     pi_tiretypeid        in number,
                                     pc_CertificateDfValue  out retCursor,
                                     pc_CertificateInfo   out retCursor,
                                     pc_Product           out retcursor,
                                     pc_MeasureHDR        out retCursor,
                                     pc_HIGHSPEEDHDR     out retCursor,
                                     pc_Brand             out retCursor) as
    /************************************************************************************************
     Procedure Name - GetEmarkApplicationInfo
     Change History
      --------------------------------------------------------------------------
      Version No  Date          Author    Description
      ---------------------------------------------------------------------------
          1.0                             Intial Version
          1.1     9/17/2012     Krishna   - As per PRJ3617
                                            - Replaced NPRID with PSN
                                            - Added Matl_Num wherever SKU is available in Select list of the query
                                            - Added Query instead of Brand_View
                                            - Added Brand, Brand_Line columns instead of Brandcode
          1.2    11/20/2013     Guru      - 1.Remove UPPER(CE.MOSTRECENTCERT) = 'Y' in the first select clause.
                                            2.When finding the max measureid's and Highspeedid set that Id=0 if no data is found
    *************************************************************************************************/

      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
       li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);

      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      ln_CertficateCount    number;
      ln_maxid            number;
  begin

      if ps_CertificateNumber is null then
          raise li_ParametersAreNull;
      end if ;
      if ps_CertificateNumber = '' then
          raise li_ParametersAreInvalid;
      end if ;

      select count(*) into ln_CertficateCount from
               certificate ce
                     inner join productcertificate pc
                           on CE.CERTIFICATEID = PC.CERTIFICATEID
                     inner join product p
                           on PC.SKUID = p.skuid
       Where ce.CERTIFICATIONTYPEID = 1 And
                  lower(ce.certificatenumber) = lower(ps_certificateNumber) and
                  ---CE.EXTENSION_EN = 0 and
                 ----UPPER(CE.MOSTRECENTCERT) = 'Y' AND
                  P.TIRETYPEID = pi_tiretypeid;

        if     ln_CertficateCount  = 0 then
           ---certificate number not found for this tiretype
               raise li_ParametersAreInvalid;
        else


            Open pc_CertificateInfo for
                 Select
                    ce.certificateid,
                    ce.CERTIFICATIONTYPEID,
                    CERTIFICATIONTYPENAME,
                    CERTIFICATENUMBER,
                    ACTIVESTATUS,
                    CERTdatesubmitted,
                     CERTDATEAPPROVED,
                     RENEWALREQUIRED_CGIN,
                    ---SUPPLEMENTALREQUIRED_EI,  JES 4/4/11
                    --- SUPPLEMENTALNUMBER_EI,    JES 4/4/11
                     JOBREPORTNUMBER_CEN,
                     EXTENSION_EN,
                     SUPPLEMENTALMOLDSTAMPING_E
                        From Certificate ce
                            inner join certificationtype ct on
                              ct.CERTIFICATIONTYPEID = ce.CERTIFICATIONTYPEID
                       Where ce.CERTIFICATIONTYPEID = 1 And---emark
                           lower(ce.certificatenumber) = lower(ps_certificateNumber ) and
                          --- CE.EXTENSION_EN = 0;
                           lower(CE.MOSTRECENTCERT) = 'y'  ;


      -- Gets the brand information
      -- Replaced query instead of Brand_View
          Open pc_brand for
          SELECT distinct  --BRANDCODE, ---get all brands that have ever been associated with this certificate, because
                        --BRANDNAME,           ---the sks's that were on the original test specs may have since been discontinued
                        BRAND,
                        BRAND_LINE,
                        CERTIFICATENUMBER---but just get each brand once, even though it is multiple extensions.
          FROM  ( SELECT DISTINCT  p.Brand
                                  ,p.Brand_Line
                                  ,c.CertificateNumber
                                  ,c.Extension_En
                            FROM  Product p,
                                  ProductCertificate pc,
                                  Certificate c
                            WHERE c.CertificateId = pc.CertificateId
                              AND pc.SkuId = p.SkuId)
          where lower(certificatenumber) = lower(ps_certificateNumber) ;
         --- AND EXTENSION_EN = 0;
          ---AND  lower(.) = 'y'  ;

      --Gets the default values information.
            OPen pc_CertificateDfValue for
            SELECT CERTIFICATENUMBER,
                    MAX(DECODE(fieldid,1,fieldvalue,NULL)) MANUFACTURERNAME_E,
                    MAX(DECODE(fieldid,2,fieldvalue,NULL)) MANUFACTURERNAMEADDRESS_E,
                    MAX(DECODE(fieldid,3,fieldvalue,NULL)) TECHNICALSERVICE_E,
                    MAX(DECODE(fieldid,4,fieldvalue,NULL)) PLACE_E,
                    MAX(DECODE(fieldid,5,fieldvalue,NULL)) MEASURERIM_E,
                    MAX(DECODE(fieldid,6,fieldvalue,NULL)) INFLATIONPRESSURE_E,
                    MAX(DECODE(fieldid,7,fieldvalue,NULL)) TESTLABORATORY_E,
                    MAX(DECODE(fieldid,8,fieldvalue,NULL)) REPRESENTATIVENAME_E,
                    MAX(DECODE(fieldid,9,fieldvalue,NULL)) REPRESENTATIVEADDRESS_E,
                    MAX(DECODE(fieldid,10,fieldvalue,NULL)) REASONOFEXTENSION_E,
                    MAX(DECODE(fieldid,11,fieldvalue,NULL)) REMARKS_E,
                    MAX(DECODE(fieldid,171,fieldvalue,NULL))TIRESIZEDESIGNATIONS_E,
                    MAX(DECODE(fieldid,167,fieldvalue,NULL))REFERENCESPEED_E,
                    MAX(DECODE(fieldid,169,fieldvalue,NULL))PERFORMANCECHARACTERISTICS_E,
                    MAX(DECODE(fieldid,170,fieldvalue,NULL))PLANTSADDRESSES_E,
                    MAX(DECODE(fieldid,175,fieldvalue,NULL)) PPNPROFILEFAMILY_E,
                    MAX(DECODE(fieldid,176,fieldvalue,NULL)) RIMSMOUNTED_E,
                    MAX(DECODE(fieldid,177,fieldvalue,NULL)) OVERALLDIMENSIONSTYPE_E,
                    MAX(DECODE(fieldid,178,fieldvalue,NULL)) REFERENCETIRE_E,
                    MAX(DECODE(fieldid,179,fieldvalue,NULL)) NOMINALRIMSIZE_E,
                    MAX(DECODE(fieldid,180,fieldvalue,NULL)) NOMINALLOAD_E,
                    MAX(DECODE(fieldid,181,fieldvalue,NULL)) ADDITIONALNOMSPEED_E,
                    MAX(DECODE(fieldid,182,fieldvalue,NULL)) ADDITIONALLOADINDEX_E,
                    MAX(DECODE(fieldid,183,fieldvalue,NULL)) APPLICATIONCOMMENT_E
            FROM (
                SELECT FIELDID,
                  CERTIFICATIONTYPEID,
                  CERTIFICATENUMBER,
                  FIELDVALUE
                FROM defaultvalues_view
                WHERE lower(certificatenumber) = lower(ps_certificateNumber) and
                      CERTIFICATIONTYPEID = 1
              )
            group by CERTIFICATENUMBER ;




              --As per PRJ3617
              --Added Matl_Num
              --Added PSN instead of NPRID
              --Added Brand and Brand_Line instead of BrandCode
              --Removed BrandDesc
             Open pc_Product for
             SELECT ROWNUM, SKUID,  SKU, MATL_NUM,BRAND,BRAND_LINE, TIRETYPEID, PSN,
                 SIZESTAMP,   DISCONTINUEDDATE,   SPECNUMBER,   SPEEDRATING,
                 SINGLOADINDEX,   DUALLOADINDEX,   BIASBELTEDRADIAL,   TUBELESSYN,
                 REINFORCEDYN,   EXTRALOADYN,   UTQGTREADWEAR,   UTQGTRACTION,
                 UTQGTEMP,   MUDSNOWYN,   RIMDIAMETER,   SERIALDATE,
                 LOADRANGE,   MEARIMWIDTH,   REGROOVABLEIND,   PLANTPRODUCED,
                 MOSTRECENTTESTDATE,   IMARK,   INFORMENUMBER,   FECHADATE,
                 TREADPATTERN,   SPECIALPROTECTIVEBAND,   NOMINALTIREWIDTH,
                 ASPECTRATIO,   TREADWEARINDICATORS,   NAMEOFMANUFACTURER,
                 FAMILY,   DOTSERIALNUMBER,   CERTIFICATENUMBER FROM
              (SELECT distinct    SKUID,  SKU,LPAD(MATL_NUM,18,0) AS MATL_NUM, BRAND,BRAND_lINE, TIRETYPEID, PSN,
                 SIZESTAMP,   DISCONTINUEDDATE,   SPECNUMBER,   SPEEDRATING,
                 SINGLOADINDEX,   DUALLOADINDEX,   BIASBELTEDRADIAL,   TUBELESSYN,
                 REINFORCEDYN,   EXTRALOADYN,   UTQGTREADWEAR,   UTQGTRACTION,
                 UTQGTEMP,   MUDSNOWYN,   RIMDIAMETER,   SERIALDATE,
                 LOADRANGE,   MEARIMWIDTH,   REGROOVABLEIND,   PLANTPRODUCED,
                 MOSTRECENTTESTDATE,   IMARK,   INFORMENUMBER,   FECHADATE,
                 TREADPATTERN,   SPECIALPROTECTIVEBAND,   NOMINALTIREWIDTH,
                 ASPECTRATIO,   TREADWEARINDICATORS,   NAMEOFMANUFACTURER,
                 FAMILY,   DOTSERIALNUMBER,   CERTIFICATENUMBER
             ----EXTENSION_EN -- we just want the unique product records that have ever been assoc. with
             ---this certificate.
                FROM  productdata_report_view
               where lower(certificatenumber) = lower(ps_certificateNumber)  and
              ---EXTENSION_EN = 0 AND
               ---lower(CE.MOSTRECENTCERT) = 'y'   and
                    TireTypeID = pi_tiretypeid
                    ORDER BY LPAD(MATL_NUM,18,0))
                    ;
                    ----and rownum < 2;   took this out -- JES 2/25/2010
BEGIN
SELECT MAX(m.MEASUREID) into ln_maxid
FROM   measurehdr m, certificate c
WHERE  c.certificatenumber = ps_CertificateNumber and
   m.certificateid = c.certificateid;
Exception
When NO_DATA_FOUND THEN
ln_maxid := 0;
End;
            Open pc_MeasureHDR for
            SELECT  MEASUREID,
                    PROJECTNUMBER,
                    TIRENUMBER,
                    TESTSPEC,
                    COMPLETIONDATE,
                    INFLATIONPRESSURE,
                    MOLDDESIGN,
                    RIMWIDTH,
                    DOTSERIALNUMBER,
                    DIAMETER,
                    AVGSECTIONWIDTH,
                    AVGOVERALLWIDTH,
                    MAXOVERALLWIDTH,
                    SIZEFACTOR,
                    MOUNTTIME,
                    MOUNTTEMP,
                    SERIALDATE,
                    ENDTIME,
                    ACTSIZEFACTOR,
                    ce.CERTIFICATIONTYPEID,
                    CERTIFICATENUMBER,
                    STARTINFLATIONPRESSURE,
                    ENDINFLATIONPRESSURE,
                    ADJUSTMENT,
                    CIRCUMFERENCE,
                    NOMINALDIAMETER,
                    NOMINALWIDTH,
                    NOMINALWIDTHPASSFAIL,
                    NOMINALWIDTHDIFERENCE,
                    NOMINALWIDTHTOLERANCE,
                    MAXOVERALLDIAMETER,
                    MINOVERALLDIAMETER,
                    OVERALLWIDTHPASSFAIL,
                    OVERALLDIAMETERPASSFAIL,
                    DIAMETERDIFERENCE,
                    DIAMETERTOLERANCE,
                    TEMPRESISTANCEGRADING,
                    TENSILESTRENGHT1,
                    TENSILESTRENGHT2,
                    ELONGATION1,
                    ELONGATION2,
                    TENSILESTRENGHTAFTERAGE1,
                    TENSILESTRENGHTAFTERAGE2,
                    SKU,
                    LPAD(MATL_NUM,18,0) AS MATL_NUM -- Added as per PRJ3617
              FROM Certificate ce inner join MEASUREHDR m on
                       ce.certificateid = m.certificateid and
                       ce.certificationtypeid = m.certificationtypeid
              where ce.certificationtypeid = 1 and
                    lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                    ---AND EXTENSION_EN = 0;
                   -- and upper(CE.MOSTRECENTCERT) = 'Y'
   and m.MEASUREID = ln_maxid;

    Begin
SELECT MAX(h.HIGHSPEEDID) into ln_maxid
FROM   HIGHSPEEDHDR h, certificate c
WHERE  c.certificatenumber = ps_CertificateNumber and
   h.certificateid = c.certificateid;
Exception
When NO_DATA_FOUND THEN
ln_maxid := 0;
End;
            open pc_HIGHSPEEDHDR for
                    SELECT HIGHSPEEDID,
                      PROJECTNUMBER,
                      TIRENUM,
                      TESTSPEC,
                      COMPETIONDATE,
                      DOTSERIALNUMBER,
                      MFGWWYY,
                      PRECONDSTARTDATE,
                      PRECONDSARTTEMP,
                      RIMDIAMETER,
                      RIMWIDTH,
                      PRECONDENDDATE,
                      PRECONDENDTEMP,
                      INFLATIONPRESSURE,
                      BEFOREDIAMETER,
                      AFTERDIAMETER,
                      BEFOREINFLATION,
                      AFTERINFLATION,
                      WHEELPOSITION,
                      WHEELNUMBER,
                      FINALTEMP,
                      FINALDISTANCE,
                      FINALINFLATION,
                      POSTCONDSTARTDATE,
                      POSTCONDENDDATE,
                      POSTCONDENDTEMP,
                      PASSYN,
                      SERIALDATE,
                      POSTCONDTIME,
                      h.CERTIFICATIONTYPEID,
                      CERTIFICATENUMBER,
                      DIAMETERTESTDRUM,
                      PRECONDTIME,
                      PRECONDTEMP,
                      INFLATIONPRESSUREREADJUSTED,
                      CIRCUNFERENCEBEFORETEST,
                      WHEELSPEEDRPM,
                      WHEELSPEEDKMH,
                      CIRCUNFERENCEAFTERTEST,
                      ODDIFERENCE,
                      ODDIFERENCETOLERANCE,
                      SERIENOM,
                      FINALJUDGEMENT,
                      APPROVER,
                      PASSATKMH,
                      SPEEDTTESTPASSFAIL,
                      SPEEDTOTALTIME,
                      MAXSPEED,
                      MAXLOAD,
                      SKU,
                      LPAD(MATL_NUM,18,0) AS MATL_NUM-- Added as per PRJ3617
                    FROM Certificate ce inner join HIGHSPEEDHDR h on
                               ce.certificateid = h.certificateid and
                               ce.certificationtypeid = h.certificationtypeid
                    where h.certificationtypeid = 1 and
                          lower(ce.certificatenumber) = lower(ps_CertificateNumber)
                          --AND lower(CE.MOSTRECENTCERT) = 'y';
                           and h.HIGHSPEEDID = ln_maxid;
          end if;

  EXCEPTION
          when li_ParametersAreNull then
            ls_ErrorMsg:=  sqlerrm ||  '-GetEmarkApplicationInfo.There is at least one parameters null.'  ;
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' Reports_Package.GetEmarkApplicationInfo',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20005,ls_ErrorMsg);

         when li_ParametersAreInvalid then
            ls_ErrorMsg:=  sqlerrm || 'GetEmarkApplicationInfo. There is at least one parameters invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' Reports_Package.GetEmarkApplicationInfor',
                AX_RECORDDATA    => 'There is at least one parameters invalid*'||ps_CertificateNumber||'*'|| pi_tiretypeid ,
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || 'GetEmarkApplicationInfo. An error have ocurred.(when others)' || sqlerrm;
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' Reports_PackageGetEmarkApplicationInfo',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);
  end GetEmarkApplicationInfo;

      procedure GetGSOConformityReport(   pc_Certificate out retCursor,
                                       pc_Brand out retCursor,
                                       pc_SkuList out retCursor,
                                       ps_BatchNumber in varchar2,
                                        pi_certificationTypeID in number,
                                       ps_Operatorid in varchar2,
                                       pi_TireTypeId in number
                                       ) as
/*
pi_TireTypeId is ignored for now.
kept in place for future use.
- jeseitz 4/15/2014 - inc 103649 - R. Riedel needs XL or RE to print with size on conformity report.
*/
      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);

      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
  begin
      if ps_BatchNumber is null or
          pi_certificationTypeID is null then
          raise li_ParametersAreNull ;
      end if;

       if ps_BatchNumber ='' or
          pi_certificationTypeID  <= 0 then
          raise li_ParametersAreNull ;
      end if;

      if ps_Operatorid is not null or
         ps_Operatorid <> '' then
          ls_OperatorId:=ps_Operatorid;
      end if;


             ---THIS CURSOR DOES NOT APPEAR TO BE USED -- JESEITZ 3/15/2013
              Open pc_Certificate for
              select distinct(CE.certificatenumber),ce.extension_en
              from  certificate ce
                   inner join productcertificate pce on
                           ce.certificateid   = pce.certificateid and
                           ce.certificationtypeid = pce.certificationtypeid
                   inner join product p on
                           pce.skuid = p.skuid
              where lower(ce.batchnumber_g) = lower(ps_BatchNumber) and
                    ce.certificationtypeid = pi_certificationTypeID
                    and CE.ARCHIVEDATE_CEGI is null  ; -- added archive date check jeseitz 8/20/2012

             ---THIS CURSOR DOES NOT APPEAR TO BE USED -- JESEITZ 3/15/2013
             -- Gets the brand information
              Open pc_brand for
                 SELECT DISTINCT (P.BRANDCODE) BRANDCODE,
                   P.BRANDDESC BRANDNAME,
                   CE.CERTIFICATENUMBER,
                   CE.EXTENSION_EN
          ----      FROM BRAND_DETAILS_MV B
          ----INNER JOIN PRODUCT P
          ----   ON B.BRAND_CODE = P.BRANDCODE
          from product p
          INNER JOIN PRODUCTCERTIFICATE pe
             ON p.skuid = pe.skuid
          INNER JOIN CERTIFICATE CE
             ON pe.CERTIFICATEID = ce.CERTIFICATEID
                AND pe.certificationtypeid = ce.certificationtypeid
           WHERE lower(ce.batchnumber_g) = lower(ps_BatchNumber)
                  and CE.ARCHIVEDATE_CEGI is null  ; -- added archive date check jeseitz 8/20/2012

             --- SELECT *
             --- FROM  brand_view
             ---where lower(certificatenumber) = lower(ps_certificateNumber) and  rownum < 2 ;

              Open pc_SkuList for
              SELECT  P.BRANDCODE BRANDCODE,
                    --- P.BRANDDESC  BRANDNAME,
                     P.BRAND||' '||P.BRAND_LINE BRANDNAME, ----JESEITZ 3/15/2013
                      CERTIFICATENUMBER,
                      EXTENSION_EN,
                      p.SKUID,
                      SKU,
                      ----SIZESTAMP, - jeseitz 4/15/2014 - inc 103649 - R. Riedel needs XL or RE to print with size on conformity report.
                      p.sizestamp||
                            case when (p.tiretypeid = 1 and UPPER(p.extraloadyn) = 'Y')  then ' XL'
                                    when (p.tiretypeid = 1 and UPPER(P.REINFORCEDYN) = 'Y') THEN ' RE'
                                    else ' '
                     end SIZESTAMP,
                      SINGLOADINDEX,
                      DUALLOADINDEX,
                      SPEEDRATING
            FROM
          PRODUCT P
             INNER JOIN PRODUCTCERTIFICATE pe
             ON p.skuid = pe.skuid
          INNER JOIN CERTIFICATE CE
             ON pe.CERTIFICATEID = ce.CERTIFICATEID
                AND pe.certificationtypeid = ce.certificationtypeid
            where lower(batchnumber_g) = lower(ps_batchNumber)
             and CE.ARCHIVEDATE_CEGI is null  ; -- added archive date check jeseitz 8/20/2012;






  EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:=  ' There is at least one parameters null.'  ;
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' Reports_Package.GetGSOConformityReport',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20005,ls_ErrorMsg);

         when li_ParametersAreInvalid then
            ls_ErrorMsg:=  sqlerrm || ' There is at least one parameters invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' Reports_Package.GetGSOConformityReport',
                AX_RECORDDATA    => 'There is at least one parameters invalid.',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20006,ls_ErrorMsg);

         when others then
              ls_ErrorMsg:=  'An error has ocurred.(when others)' || sqlerrm;
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' Reports_Package.GetGSOConformityReport',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);

  end GetGSOConformityReport;

 PROCEDURE getEceSimilarCertificates
    (ps_matl_num                   IN  VARCHAR2,
     pc_SimilarCertificates   out retCursor)

IS
/************************************************************************************************
 Procedure Name - getEceSimilarCertificates
 Change History
  --------------------------------------------------------------------------
  Version No  Date          Author    Description
  ---------------------------------------------------------------------------
      1.0                             Intial Version
      1.1     9/17/2012     Krishna   - As per PRJ3617 Added
                                        - Replaced ps_in_sku with ps_Matl_Num
                                        - Matl_Num wherever SKU is available in Select list of the query
                                        - Replaced BrandCode with Brand and Brand_Line and removed
                                          BrandDesc
      1.2    11/20/2013     Guru    - Remove upper(C2.MOSTRECENTCERT) = 'Y') in pc_SimilarTires cursor
*************************************************************************************************/

     ln_RecCount        NUMBER(1);
--     ln_TireTypeID      product.tiretypeid%TYPE;
     ls_MudSnowYN       product.mudsnowyn%TYPE;
     ls_SpeedRating     product.speedrating%TYPE;
     ls_SingLoadIndex   product.singloadindex%TYPE;
     ls_SizeStamp       product.sizestamp%TYPE;
     sku_not_found     varchar2(1);

     ls_MachineId VARCHAR2(50):=null;
     ls_OperatorId VARCHAR2(50):='ICSDEV';
     ls_ErrorMsg varchar2(4000);

   BEGIN

       sku_not_found := ' ';
       BEGIN
         /* SELECT DECODE(mud_snow,'T', 'Y', 'N') mud_snow,
                      speed_rating, sload_idx, trim(upper(size_stamp)) size_stamp
            INTO ls_MudSnowYN,
               ls_SpeedRating, ls_SingLoadIndex, ls_SizeStamp
            FROM sku_master_mv
           WHERE sku_cqbs =UPPER(ps_in_sku);
          */
           -- Added below logic by removing Sku_Master_MV as per PRJ3617
            SELECT  DECODE(Mud_Snow,'M+S', 'Y', 'N') AS Mud_Snow
                   ,Speed_Rating
                   ,Sload_Idx
                   ,TRIM(UPPER(Size_Stamp)) AS Size_Stamp
              INTO ls_MudSnowYN,
                   ls_SpeedRating,
                   ls_SingLoadIndex,
                   ls_SizeStamp
              FROM (  SELECT  LPAD(Matl_Num,18,0) AS Matl_Num
                             ,MAX(DECODE(Attrib_Name,'MUD_SNOW_STAMPING',Attrib_Value))          AS Mud_Snow
                             ,MAX(DECODE(Attrib_Name,'SPEED_RATING',Attrib_Value))               AS Speed_Rating
                             ,MAX(DECODE(Attrib_Name,'STAMPED_SINGLE_LOAD_INDEX',Attrib_Value))  AS Sload_Idx
                             ,MAX(DECODE(Attrib_Name,'TIRE_SIZE',Attrib_Value))                  AS Size_Stamp
                       FROM ( SELECT ma.*,
                                     DENSE_RANK() OVER(PARTITION BY LPAD(ma.Matl_Num,18,0), ma.Attrib_Name ORDER BY ma.Counter DESC) AS rk
                                FROM Material_Attribute ma
                               WHERE ma.Attrib_Name IN ('MUD_SNOW_STAMPING' ,'SPEED_RATING' ,'STAMPED_SINGLE_LOAD_INDEX','TIRE_SIZE')
                                 AND Matl_Num = LPAD(ps_matl_num,18,0) )
                      WHERE rk = 1
                   GROUP BY Matl_Num);

       EXCEPTION
          WHEN NO_DATA_FOUND THEN
           sku_not_found := 'Y';
       END;

       IF sku_not_found = 'Y' THEN
          Open pc_SimilarCertificates for
              SELECT -9999 CERTIFICATEID, ' ' CERTIFICATENUMBER, ' ' ON_CERTIFICATE FROM DUAL;
       ELSE
--         Open pc_SimilarCertificates for
--             SELECT  distinct C.CERTIFICATEID, C.CERTIFICATENUMBER,'*' ON_CERTIFICATE
--                 FROM product p, productcertificate pc,
--                 certificate c
--               WHERE p.skuid = pc.skuid
--               AND pc.certificateid = c.certificateid
--               AND c.certificationtypeid = 1
--               AND p.sku =UPPER(ps_in_sku)
--               and  PC.DATEREMOVED is null
--               and  upper(C.MOSTRECENTCERT) = 'Y'
--            UNION
--             SELECT  distinct C.CERTIFICATEID, C.CERTIFICATENUMBER,' ' ON_CERTIFICATE
--                  FROM product p, productcertificate pc,
--                  certificate c
--                  WHERE p.skuid = pc.skuid
--                  AND pc.certificateid = c.certificateid
--                  AND c.certificationtypeid = 1
--                  AND p.sku <> ps_in_sku
--                  AND p.discontinueddate IS NULL
--                  AND p.mudsnowyn = ls_MudSnowYN
--                  AND p.singloadindex = ls_SingLoadIndex
--                  AND p.speedrating = ls_SpeedRating
--                  AND trim(upper(p.sizestamp)) = ls_SizeStamp
--                  AND C.CERTIFICATEID NOT IN (SELECT C2.CERTIFICATEID
--                               FROM product p2, productcertificate pc2,
--                 certificate c2
--               WHERE p2.skuid = pc2.skuid
--               AND pc2.certificateid = c2.certificateid
--               AND c2.certificationtypeid = 1
--               AND p2.sku =UPPER(ps_in_sku)
--               and  PC2.DATEREMOVED is null
--               and  upper(C2.MOSTRECENTCERT) = 'Y')
--           and  PC.DATEREMOVED is null
--           and  upper(C.MOSTRECENTCERT) = 'Y';
         Open pc_SimilarCertificates for
--             SELECT  distinct C.CERTIFICATEID, C.CERTIFICATENUMBER,P.SKU,P.BRANDCODE,
--                   P.BRANDDESC,PC.DATEASSIGNED_EGI DATE_ASSIGNED,'*' ON_CERTIFICATE
--                 FROM product p, productcertificate pc,
--                 certificate c
--               WHERE p.skuid = pc.skuid
--               AND pc.certificateid = c.certificateid
--               AND c.certificationtypeid = 1
--               AND p.sku =UPPER(ps_in_sku)
--               and  PC.DATEREMOVED is null
--               and  upper(C.MOSTRECENTCERT) = 'Y'
--            UNION
-- Added Matl_Num as per PRJ3617
-- Replaced BrandCode with Brand and Brand_Line as per PRJ3617 and removed BRANDDESC
             SELECT  distinct C.CERTIFICATEID, C.CERTIFICATENUMBER,P.SKU,LPAD(P.MATL_NUM,18,0) AS MATL_NUM,P.BRAND,P.BRAND_LINE
                   ,PC.DATEASSIGNED_EGI DATE_ON, PC.DATEREMOVED DATE_OFF,
                   P.DISCONTINUEDDATE,
                    (CASE
                      WHEN UPPER(P.MATL_NUM) = UPPER(LPAD(ps_matl_num,18,0)) THEN '*' -- Changed SKU to MATL_NUM as per PRJ3617
                      ELSE ' '
                    END) ON_CERTIFICATE
                  FROM product p, productcertificate pc,
                  certificate c
                  WHERE p.skuid = pc.skuid
                  AND pc.certificateid = c.certificateid
                  AND c.certificationtypeid = 1
                  ---AND p.sku <> ps_in_sku
                  ---AND p.discontinueddate IS NULL
                  AND p.mudsnowyn = ls_MudSnowYN
                  AND p.singloadindex = ls_SingLoadIndex
                  AND p.speedrating = ls_SpeedRating
                  AND trim(upper(p.sizestamp)) = ls_SizeStamp
--                  AND C.CERTIFICATEID NOT IN (SELECT C2.CERTIFICATEID
--                               FROM product p2, productcertificate pc2,
--                 certificate c2
--               WHERE p2.skuid = pc2.skuid
--               AND pc2.certificateid = c2.certificateid
--               AND c2.certificationtypeid = 1
--               AND p2.sku =UPPER(ps_in_sku)
--               and  PC2.DATEREMOVED is null
--               and  upper(C2.MOSTRECENTCERT) = 'Y')
    ---       and  PC.DATEREMOVED is null
           ORDER BY CERTIFICATENUMBER, LPAD(P.MATL_NUM,18,0);

       END IF;

   EXCEPTION
     WHEN OTHERS THEN
                 ls_ErrorMsg:=  'An error has ocurred.(when others)' || sqlerrm;
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' Reports_Package.get_ece_similar_certificates',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);

   END getEceSimilarCertificates;

  PROCEDURE SETIMARKFLAG (
             pi_certificateid in number)
     AS
  BEGIN
       UPDATE PRODUCTCERTIFICATE
             SET IMARKCHANGE = 'I'
                   where certificateid = pi_certificateid
              AND ((DATESUBMITTED IS NULL AND
             DATEASSIGNED_EGI IS NOT NULL) OR
             DATEASSIGNED_EGI >  DATESUBMITTED OR
              DATEREMOVED > DATESUBMITTED  );
   end SETIMARKFLAG;

--Request  226425

  procedure GetWeeklyReportInfo as
   /************************************************************************************************
     Procedure Name - GetWeeklyReportInfo
     Change History
      --------------------------------------------------------------------------
      Version No  Date          Author    Description
      ---------------------------------------------------------------------------
          1.0                             Intial Version
    *************************************************************************************************/

  ls_MachineId VARCHAR2(50):=null;
  ls_OperatorId VARCHAR2(50):='ICSDEV';
  ls_ErrorMsg varchar2(4000);
 --Email variables
  ln_recs                            number;
  ls_From                            VARCHAR2(80) := 'SCMallampalli@coopertire.com';
  ls_Recipient                       VARCHAR2(80) := 'SCMallampalli@coopertire.com';
  ls_RecipientCC                     VARCHAR2(80) := 'jrnelatu@coopertire.com';
  ls_Bcc                             VARCHAR2(32767);
  ls_Subject                         VARCHAR2(80) := 'ICS - Weekly Report';
  ls_Mail_Host                       VARCHAR2(30) := 'SMTP';
  ls_Body                            VARCHAR2(32767) := '';
  ls_Message                         VARCHAR2(32767);
  ls_Note                            VARCHAR2(100) := ' ';
  ls_header                          VARCHAR2(32767);
  ls_header2                         VARCHAR2(32767);
  ls_MimeType                        VARCHAR2(200);
  v_Mail_Conn                        utl_smtp.Connection;
  crlf                               VARCHAR2(2)  := chr(13)||chr(10);
  ls_db_name                         VARCHAR2(50);

  a ExceptionReport.Sku%type;
  b ExceptionReport.Matl_Num%type;
  c ExceptionReport.ProductDataFieldName%type;
  d ExceptionReport.LastModified%type;
  e ExceptionReport.IcsValue%type;
  f ExceptionReport.SkuMasterValue%type;
  g Product.SizeStamp%type;
  h Product.SingloadIndex%type;


       ---LOAD EXCEPTION TABLE.


       ---EXTRACT CURSOR FOR REPORT


  BEGIN

  CompareSKUMainProductColumns;

  FOR c1 IN (SELECT DISTINCT
                 er.Sku,
                 LPAD(er.Matl_Num,18,0) AS Matl_Num, -- added as per prj3617
                 er.ProductDataFieldName,
                 er.LastModified,
                 er.IcsValue,
                 er.SkuMasterValue,
                 p.SizeStamp AS TireSize,
                 CASE WHEN p.DualloadIndex IS NULL OR p.DualloadIndex = 0
                      THEN p.SingloadIndex||p.SpeedRating
                  ELSE p.SingLoadIndex||'/'|| p.DualloadIndex|| p.SpeedRating END AS ServiceDescription
         FROM ICS.ExceptionReport er,
          ICS.Product p
        WHERE er.Matl_Num = LPAD(p.Matl_Num,18,0) AND
        er.lastmodified >= add_months(SYSDATE,-10)
        ORDER BY LPAD(er.Matl_Num,18,0),er.ProductDataFieldName) loop

  /*open c1;
  loop

  FETCH c1
    INTO  a, b,c,d,e,f,g,h;
EXIT WHEN c1%NOTFOUND;*/
  --don't send emails out to everone if not on production system
 /* IF INSTR(ls_db_name,'FA0017_TECH') = 0 THEN -- not on PRODUCTION
     ls_Recipient := 'sxpuri@COOPERTIRE.COM';
     ls_RecipientCC   := '';
  END IF;*/

  ls_mimetype := 'text/html; charset=us-ascii';
   ln_recs :=0;

   ls_header2 := '<TABLE BORDER=''1'' BGCOLOR=''#EEEEEE'' style=''font-size:12px; font-family : Arial'' >';
   ls_header2 :=  ls_header2 || '<TR BGCOLOR=''BLACK''>';
   ls_header2 :=  ls_header2 ||'<TH STYLE=''TEXT-ALIGN:CENTER''><FONT COLOR=''WHITE''>Material Number</FONT></TH>';
   ls_header2 :=  ls_header2 ||'<TH STYLE=''TEXT-ALIGN:CENTER''><FONT COLOR=''WHITE''>Product Data Field</FONT></TH>';
   ls_header2 :=  ls_header2 ||'<TH STYLE=''TEXT-ALIGN:CENTER''><FONT COLOR=''WHITE''>Last Modified</FONT></TH>';
   ls_header2 :=  ls_header2 ||'<TH STYLE=''TEXT-ALIGN:CENTER''><FONT COLOR=''WHITE''>ICS Value</FONT></TH>';
   ls_header2 :=  ls_header2 ||'<TH STYLE=''TEXT-ALIGN:CENTER''><FONT COLOR=''WHITE''>Material Master Value</FONT></TH>';
   ls_header2 :=  ls_header2 ||'</TR>';


         ls_Body := ls_Body || '<TR>';
         ls_Body := ls_Body || '<TD>'||ltrim(c1.Matl_Num,'0')|| '</TD>';
         ls_Body := ls_Body || '<TD>'||c1.ProductDataFieldName|| '</TD>';
         ls_Body := ls_Body || '<TD>'||c1.LastModified|| '</TD>';
         ls_Body := ls_Body || '<TD>'||c1.IcsValue|| '</TD>';
         ls_Body := ls_Body || '<TD>'||c1.SkuMasterValue|| '</TD>';
         ls_Body := ls_Body || '</TR>' ;

          ln_recs := ln_recs + 1;

end loop;

        IF LENGTH(LS_BODY)> 32767-65 THEN
          LS_BODY := LS_BODY||'...'||crlf;
        END IF;
    --check for  email that needs sent
    if ln_recs > 0 then

        ls_message := '<div>'
                  || '<table width=''100%'' height=''182'' border=''0'' cellpadding=''3'' cellspacing=''1'' bgcolor=''#006699'' style=''font-size:12px; font-family : Arial''>'
                  || ' <tr><td bgcolor=''#FFFFFF''>' || '<br />'
                  || '<span style=''font-size:12px; font-family : Arial''>'|| 'Weekly Report: '
                  || '</span>' || '<br /><br />'|| '<table cellspacing=''0'' cellpadding=''0'' > '
                  || '<tr><td style=''text-align:left; FONT-SIZE: 12px;  font-family : Arial''>'||  ls_header2 || ls_Body ||'</TABLE></td></tr>' || '</table> ' || '<br />'
                  || '<b><span style=''font-size:12px; font-family : Arial''>' || ls_note
                  || '</span></b><br /><br />' || ' Thanks,<br />'
                  || '<b><span style=''font-size:12px; font-family : Arial''>' || 'Quality Group'
                  || '</span></b><br /><br />' || ' </td></tr></table></div>';

        utl_mail.send(sender => ls_from,   recipients => ls_recipient,   cc =>  ls_RecipientCC,   bcc => ls_bcc,
        subject => ls_subject,   message => ls_message,   mime_type => ls_mimetype,   priority => '3');

    end if;

    ---DBMS_OUTPUT.PUT_LINE(ls_body);

     end  GetWeeklyReportInfo;

end reports_package;
/

create or replace PACKAGE           SIMILAR_TIRES AS
/******************************************************************************
   NAME:       similar_tires
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        3/13/2011     arsherri       1. Created this package.
   1.1        10/2/2012     Harini         1.Modified Get_Similar_Sku,Get_Ece_Similar_Sku
                                           Get_Gso_Similar_Sku,Get_Nom_Similar_Sku,Get_Imark_Similar_Sku,
                                           Get_Ccc_Similar_sku,Get_E117_Similar_Sku,Get_Imark_Family
                                           such that if sku is present ,replace with Matl_num
******************************************************************************/

PROCEDURE Get_Similar_Sku
    (pn_cert_type           IN   NUMBER,
     ps_in_Matl_Num         IN   VARCHAR2,
     ps_Similar_Matl_Num    OUT  VARCHAR2,
     ps_imark_family        OUT  NUMBER,
     ps_ece_reference       OUT  VARCHAR2,    
     pn_error_num           OUT  NUMBER,
     ps_error_desc          OUT  VARCHAR2);   

--FUNCTION get_tire_type_id
--    (ps_sku                 IN  VARCHAR2) RETURN NUMBER;

PROCEDURE Get_Ece_Similar_Sku
    (pn_tire_type_id        IN  NUMBER,
     ps_in_Matl_Num         IN  VARCHAR2,
     ps_Similar_Matl_Num    OUT VARCHAR2,
     pn_error_num           OUT NUMBER,
     ps_error_desc          OUT VARCHAR2);

PROCEDURE Get_Gso_Similar_Sku
    (pn_tire_type_id        IN  NUMBER,
     ps_in_Matl_Num         IN  VARCHAR2,
     ps_Similar_Matl_Num    OUT VARCHAR2,
     pn_error_num           OUT NUMBER,
     ps_error_desc          OUT VARCHAR2);

PROCEDURE Get_Nom_Similar_Sku
    (pn_tire_type_id        IN  NUMBER,
     ps_in_Matl_Num         IN  VARCHAR2,
     ps_Similar_Matl_Num    OUT VARCHAR2,
     pn_error_num           OUT NUMBER,
     ps_error_desc          OUT VARCHAR2);

PROCEDURE Get_Imark_Similar_Sku
    (pn_tire_type_id        IN  NUMBER,
     ps_in_Matl_Num         IN  VARCHAR2,
     ps_Similar_Matl_Num    OUT VARCHAR2,
     ps_imark_family        OUT NUMBER,    
     ps_ece_reference       OUT VARCHAR2,    
     pn_error_num           OUT NUMBER,
     ps_error_desc          OUT VARCHAR2);

PROCEDURE Get_Ccc_Similar_Sku
    (pn_tire_type_id        IN  NUMBER,
     ps_in_Matl_Num         IN  VARCHAR2,
     ps_Similar_Matl_Num    OUT VARCHAR2,
     pn_error_num           OUT NUMBER,
     ps_error_desc          OUT VARCHAR2);

PROCEDURE Get_E117_Similar_Sku
    (pn_tire_type_id        IN  NUMBER,
     ps_in_Matl_Num         IN  VARCHAR2,
     ps_Similar_Matl_Num    OUT VARCHAR2,
     pn_error_num           OUT NUMBER,
     ps_error_desc          OUT VARCHAR2);

PROCEDURE get_imark_family
    (ps_Matl_Num            IN  VARCHAR2,
     pn_certificateid           IN NUMBER,
     pn_family_id           OUT NUMBER,
     ps_family_code         OUT VARCHAR2,    
     pn_error_num           OUT NUMBER,
     ps_error_desc          OUT VARCHAR2);
     
END SIMILAR_TIRES;
/

create or replace PACKAGE BODY           SIMILAR_TIRES AS
/******************************************************************************
   NAME:       similar_tires
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        3/13/2011     arsherri       1. Created this package body.
   1.1        10/2/2012     Harini         1.Modified Get_Similar_Sku,Get_Ece_Similar_Sku
                                           Get_Gso_Similar_Sku,Get_Nom_Similar_Sku,Get_Imark_Similar_Sku,
                                           Get_Ccc_Similar_sku,Get_E117_Similar_Sku,Get_Imark_Family
                                            such that if sku is present ,replace with Matl_num
   1.2        11/19/2013    Harini         Changed logic in For loop for the SP Get_Imark_Family
   1.3        04/04/2016    jeseitz         added product_imark_family table.
******************************************************************************/

PROCEDURE Get_Similar_Sku
    (pn_cert_type           IN  NUMBER,
     ps_in_Matl_Num         IN  VARCHAR2,
     ps_Similar_Matl_Num    OUT VARCHAR2,
     ps_imark_family        OUT NUMBER,
     ps_ece_reference       OUT VARCHAR2,    
     pn_error_num           OUT NUMBER,
     ps_error_desc          OUT VARCHAR2)   
IS
  /******************************************************************************
   NAME:       Get_Similar_Sku
   PURPOSE:    Get the similar material of the given matl_num

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        
   1.1        10/04/2012    Harini         1.Replaced ps_in_SKU with ps_in_Matl_Num,
                                            ps_similar_sku with ps_Similar_Matl_Num.
                                             Replaced SKU with Matl_Num in where
                                             condition.
******************************************************************************/
     ln_TireTypeID         product.tiretypeid%TYPE;
     ls_SimilarMatl        product.Matl_Num%TYPE;  -- As per PRJ3617,replaced ls_SimilarSKU with ls_SimilarMatl
     ln_ImarkFamily        product_imark_family.familyid%TYPE; -- new table 4/4/16 jeseitz
     ls_EceReference       product.emarkreference_i%TYPE;
     ln_ErrorNum           NUMBER(2);
     ls_ErrorDesc          VARCHAR2(150);    

BEGIN

    pn_error_num := 0;
    ps_error_desc := '';

    ln_TireTypeID := BOM_ATTRIBUTES.Get_Product_Type (ps_in_Matl_Num);

    IF pn_cert_type = 1 THEN
        Get_Ece_Similar_Sku (ln_TireTypeID, ps_in_Matl_Num, ls_SimilarMatl, ln_ErrorNum, ls_ErrorDesc);    
    ELSIF pn_cert_type = 2 THEN
        Get_Gso_Similar_Sku (ln_TireTypeID, ps_in_Matl_Num, ls_SimilarMatl, ln_ErrorNum, ls_ErrorDesc);                
    ELSIF pn_cert_type = 3 THEN 
        Get_Nom_Similar_Sku (ln_TireTypeID, ps_in_Matl_Num, ls_SimilarMatl, ln_ErrorNum, ls_ErrorDesc);    
    ELSIF pn_cert_type = 4 THEN
        Get_Imark_Similar_Sku (ln_TireTypeID, ps_in_Matl_Num, ls_SimilarMatl, ln_ImarkFamily, ls_EceReference, ln_ErrorNum, ls_ErrorDesc);    
    ELSIF pn_cert_type = 5 THEN
        Get_Ccc_Similar_Sku (ln_TireTypeID, ps_in_Matl_Num, ls_SimilarMatl, ln_ErrorNum, ls_ErrorDesc);                
    ELSIF pn_cert_type = 6 THEN
        Get_E117_Similar_Sku (ln_TireTypeID, ps_in_Matl_Num, ls_SimilarMatl, ln_ErrorNum, ls_ErrorDesc);                 
    ELSE
        ls_SimilarMatl := '';
    END IF;
    
    ps_Similar_Matl_Num := ls_SimilarMatl;
    IF pn_cert_type = 4 THEN
        ps_imark_family := ln_ImarkFamily;
        ps_ece_reference := ls_EceReference;
    END IF;    
    
END;

/*
FUNCTION get_tire_type_id
    (ps_sku             IN  VARCHAR2) RETURN NUMBER

Is
    ln_TireTypeID    product.tiretypeid%TYPE;
    ls_ClassCode    sku_master_mv.class_code%TYPE;
BEGIN

    ln_TireTypeID := 0;

    SELECT class_code
      INTo ls_ClassCode
      FROM sku_master_mv
     WHERE sku_cqbs = ps_SKU;
    
    IF ls_ClassCode IS NOT NULL THEN
        ln_TireTypeID :=
         CASE 
             WHEN ls_ClassCode IN ('H','W') THEN  1
             WHEN ls_ClassCode = 'S' THEN         3
             WHEN ls_ClassCode = 'L' THEN         7 
             ELSE 0
         END;           
    ELSE
    ln_TireTypeID := 0;    
    END IF;

    RETURN (ln_TireTypeID);

END;
*/

    PROCEDURE Get_Ece_Similar_Sku
    (pn_tire_type_id        IN  NUMBER,
     ps_in_Matl_Num         IN  VARCHAR2,
     ps_Similar_Matl_Num    OUT VARCHAR2,
     pn_error_num           OUT NUMBER,
     ps_error_desc          OUT VARCHAR2)

IS
/******************************************************************************
   NAME:       Get_Ece_Similar_Sku
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        
   1.1        10/04/2012    Harini         1.Replaced ps_in_SKU with ps_in_Matl_Num,
                                            ps_similar_sku with ps_Similar_Matl_Num.
                                            Replaced SKU with Matl_Num in where
                                            condition.Query is replaced with the 
                                            query in TD
******************************************************************************/

     ln_RecCount        NUMBER(1);
--     ln_TireTypeID      product.tiretypeid%TYPE;
     ls_MudSnowYN       product.mudsnowyn%TYPE;
     ls_SpeedRating     product.speedrating%TYPE;
     ls_SingLoadIndex   product.singloadindex%TYPE;
     ls_SizeStamp       product.sizestamp%TYPE;
     e_NoMatlFound       EXCEPTION;   -- As per PRJ3617,Replace SKU with Matl_Num
     e_NoSimMatlFound    EXCEPTION;   -- As per PRJ3617,Replace SKU with Matl_Num 

    cursor LCR_SKUS is
        SELECT p.sku,LPAD(p.matl_Num,18,0) Matl_Num, pc.dateapproved_cegi  -- As per PRJ3617,Retrieving Matl_Num along with SKU
          FROM product p, productcertificate pc,
               certificate c
         WHERE p.skuid = pc.skuid
           AND pc.certificateid = c.certificateid
           and C.CERTIFICATIONTYPEID = 1
           AND p.Matl_Num <> LPAD(ps_in_Matl_Num,18,0)    -- As per PRJ3617,Replace SKU with Matl_Num
          --  Testing only >>>>>>>>>>>>>>>>>>>>>>>>> 
          --AND c.activestatus = 'Y'
           --AND pc.dateapproved_cegi IS NOT NULL
           AND p.discontinueddate IS NULL
           AND p.tiretypeid = pn_tire_type_id
           AND p.mudsnowyn = ls_MudSnowYN
           AND p.singloadindex = ls_SingLoadIndex
           AND p.speedrating = ls_SpeedRating
           AND p.sizestamp = ls_SizeStamp
        ORDER BY pc.dateapproved_cegi DESC;

BEGIN
    
    pn_error_num := 0;
    ps_error_desc := '';
    ps_Similar_Matl_Num := '';    --As per PRJ3617,Replace ps_Similar_SKu with ps_Similar_Matl_Num
    
--    ln_TireTypeID := get_tire_type_id(ps_in_sku);

    BEGIN
     -- As per PRJ3617,Query was modified as per TD
          SELECT
                DECODE(MUD_SNOW_STAMPING,'M+S','Y','N'),
                SPEED_RATING,
                STAMPED_SINGLE_LOAD_INDEX,
                TIRE_SIZE
           INTO ls_MudSnowYN,
                ls_SpeedRating, 
                ls_SingLoadIndex, 
                ls_SizeStamp
          FROM (
          SELECT  Matl_Num 
                 ,MAX(DECODE(Attrib_Name,'MUD_SNOW_STAMPING',Attrib_Value))          AS MUD_SNOW_STAMPING
                 ,MAX(DECODE(Attrib_Name,'SPEED_RATING',Attrib_Value))               AS SPEED_RATING
                 ,MAX(DECODE(Attrib_Name,'STAMPED_SINGLE_LOAD_INDEX',Attrib_Value))  AS STAMPED_SINGLE_LOAD_INDEX
                 ,MAX(DECODE(Attrib_Name,'TIRE_SIZE',Attrib_Value))                  AS TIRE_SIZE
           FROM ( SELECT ma.*,
                         DENSE_RANK() OVER(PARTITION BY ma.Matl_Num, ma.Attrib_Name ORDER BY ma.Counter DESC) rk
                    FROM Material_Attribute ma
                   WHERE Attrib_Name IN ('MUD_SNOW_STAMPING' ,'SPEED_RATING' ,'STAMPED_SINGLE_LOAD_INDEX','TIRE_SIZE')
                     AND Matl_Num = LPAD(ps_in_Matl_Num,18,0))
          WHERE rk = 1
          GROUP BY Matl_Num);

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE e_NoMatlFound;
    END;

    ln_RecCount := 0;    

    FOR lcr_SKUSRec IN lcr_SKUS LOOP
        ln_RecCount := ln_RecCount + 1;
         ps_Similar_Matl_Num := lcr_SKUSRec.Matl_Num;  --As per PRJ3617,Replaced SKu with Matl_Num
         EXIT;       
    END LOOP;    
        
    IF ln_RecCount = 0 THEN
        RAISE e_NoSimMatlFound;    
    END IF;
EXCEPTION
    WHEN e_NoMatlFound THEN
        pn_error_num := 1;
        ps_error_desc := 'SKU not in Matl Master';
    WHEN e_NoSimMatlFound THEN
        pn_error_num := 2;
        ps_error_desc := 'No Similar Matl Found in Product Table';
    WHEN OTHERS THEN
        pn_error_num := 3;
        ps_error_desc := 'Unexpected Error Occurred';
END;

PROCEDURE Get_Gso_Similar_Sku
    (pn_tire_type_id        IN  NUMBER,
     ps_in_Matl_Num         IN  VARCHAR2,
     ps_Similar_Matl_Num    OUT VARCHAR2,
     pn_error_num           OUT NUMBER,
     ps_error_desc          OUT VARCHAR2)
IS
/******************************************************************************
   NAME:       Get_Gso_Similar_Sku
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        
   1.1        10/04/2012    Harini         1.Replaced ps_in_SKU with ps_in_Matl_Num,
                                            ps_similar_sku with ps_Similar_Matl_Num.
******************************************************************************/
BEGIN

    -- Can not return similar sku because
    -- do not know the country of manufacture. 
    ps_Similar_Matl_Num := '';
    pn_error_num := 2;
    ps_error_desc := '';
    
END;

PROCEDURE Get_Nom_Similar_Sku
    (pn_tire_type_id        IN  NUMBER,
     ps_in_Matl_Num         IN  VARCHAR2,
     ps_Similar_Matl_Num    OUT VARCHAR2,
     pn_error_num           OUT NUMBER,
     ps_error_desc          OUT VARCHAR2)
IS

/******************************************************************************
   NAME:       Get_Nom_Similar_Sku
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        
   1.1        10/04/2012    Harini         1.Replaced ps_in_SKU with ps_in_Matl_Num,
                                            ps_similar_sku with ps_Similar_Matl_Num.
******************************************************************************/
BEGIN

    ps_Similar_Matl_Num := '';
    pn_error_num := 2;
    ps_error_desc := '';
   
END;

PROCEDURE Get_Imark_Similar_Sku
    (pn_tire_type_id        IN  NUMBER,
     ps_in_Matl_Num         IN  VARCHAR2,
     ps_Similar_Matl_Num    OUT VARCHAR2,
     ps_imark_family        OUT NUMBER,    
     ps_ece_reference       OUT VARCHAR2,    
     pn_error_num           OUT NUMBER,
     ps_error_desc          OUT VARCHAR2)
IS
/******************************************************************************
   NAME:       Get_Imark_Similar_Sku
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        
   1.1        10/04/2012    Harini         1.Replaced ps_in_SKU with ps_in_Matl_Num,
                                            ps_similar_sku with ps_Similar_Matl_Num
   1.2        10/16/2012    Harini         1.checking now with Lower(c.activestatus)='y'
******************************************************************************/
    ln_FamilyID             product_imark_family.familyid%TYPE;
    ls_FamilyCode           VARCHAR2(10);
    ln_ErrorNum             NUMBER(2);
    ls_ErrorDesc            VARCHAR2(150);
    ln_RecCount             NUMBER(1);
    ln_certificateid           certificate.certificateid%type;
    ln_imark_count           NUMBER;
    e_NoFamilyFound         EXCEPTION;    
    e_NoSimSkuFound         EXCEPTION;   
    ln_skuid                   PRODUCT.SKUID%TYPE; 

    cursor LCR_SKUS is
        SELECT p.sku,LPAD(p.Matl_Num,18,0) Matl_Num, pc.dateapproved_cegi
          FROM product p, productcertificate pc,
               certificate c, product_imark_family pif              ---jeseitz
         WHERE p.skuid = pc.skuid
           AND pc.certificateid = c.certificateid
           and C.CERTIFICATIONTYPEID = 4
           AND p.Matl_Num <> LPAD(ps_in_Matl_Num,18,0) --As per PRJ3617,replaced SKU with Matl_Num
           --  Comment out for testing only <<<<<<<<<<<<<<<<<<<<
           AND LOWER(c.activestatus) = 'y'
           AND pc.dateapproved_cegi IS NOT NULL
           --<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
          AND p.discontinueddate IS NULL
          ---AND p.family = ln_FamilyID
         and pif.skuid = p.skuid
         and pif.certificateid = c.certificateid
         and pif.familyid = ln_familyid
         and upper(C.MOSTRECENTCERT) = 'Y'
        ORDER BY pc.dateapproved_cegi DESC;

    CURSOR lcr_ECESkus IS
        SELECT p.sku,LPAD(p.Matl_Num,18,0) Matl_Num, pc.dateapproved_cegi, c.certificatenumber
          FROM product p, productcertificate pc,
               certificate C
         WHERE p.Matl_Num = LPAD(ps_Similar_Matl_Num,18,0)
           AND p.skuid = pc.skuid
           AND pc.certificateid = c.certificateid
           AND c.certificationtypeid = 1
            --  Comment out for testing only <<<<<<<<<<<<<<<<<<<<
           AND LOWER(c.activestatus) = 'y'
           AND pc.dateapproved_cegi IS NOT NULL
           -- <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
          AND p.discontinueddate IS NULL
        ORDER BY pc.dateapproved_cegi DESC;
    
BEGIN
    ln_FamilyID     := 0;
    ls_FamilyCode   := '';
    ln_ErrorNum     := 0;
    ls_ErrorDesc    := '';
    ln_RecCount     := 0;
    
  
    get_imark_family (ps_in_Matl_NUm,0, ln_FamilyID, ls_FamilyCode, ln_ErrorNum, ls_ErrorDesc); 
    IF ln_ErrorNum > 0 THEN
        RAISE e_NoFamilyFound;
    END IF;    

    ps_imark_family := ln_FamilyID;
 
    FOR lcr_SKUSRec IN lcr_SKUS LOOP
        ln_RecCount := ln_RecCount + 1;
         ps_Similar_Matl_Num := lcr_SKUSRec.Matl_Num; 
         EXIT;       
    END LOOP;    
        
    IF ln_RecCount = 0 THEN
        RAISE e_NoSimSkuFound;    
    END IF;
    
    ln_RecCount := 0;
    
    FOR lcr_ECESkusRec IN lcr_ECESkus LOOP
        ln_RecCount := ln_RecCount + 1;
         ps_ece_reference  := lcr_ECESkusRec.certificatenumber; 
         EXIT;       
    END LOOP;    

    IF ln_RecCount = 0 THEN
        RAISE e_NoSimSkuFound;    
    END IF;
EXCEPTION
    WHEN e_NoFamilyFound THEN
        pn_error_num := 1;
        ps_error_desc := 'Imark Family was not found';
    WHEN e_NoSimSkuFound THEN
        pn_error_num := 2;
        ps_error_desc := 'No Similar SKU Found in Product Table';
    WHEN OTHERS THEN
        pn_error_num := 3;
        ps_error_desc := 'Unexpected Error Occurred';
END;

PROCEDURE Get_Ccc_Similar_sku
    (pn_tire_type_id        IN  NUMBER,
     ps_in_Matl_Num         IN  VARCHAR2,
     ps_similar_Matl_Num    OUT VARCHAR2,
     pn_error_num           OUT NUMBER,
     ps_error_desc          OUT VARCHAR2)
IS
/******************************************************************************
   NAME:       Get_Ccc_Similar_sku
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        
   1.1        10/04/2012    Harini         1.Replaced ps_in_SKU with ps_in_Matl_Num,
                                            ps_similar_sku with ps_Similar_Matl_Num.
******************************************************************************/
    ln_FamilyID             product_imark_family.familyid%TYPE;
    ls_FamilyCode           VARCHAR2(10);
    ln_ErrorNum             NUMBER(2);
    ls_ErrorDesc            VARCHAR2(150);

BEGIN
    -- Can not return similar sku because
    -- do not know the manufactureing plant at this point 
     ps_similar_Matl_Num := '';

END;

PROCEDURE Get_E117_Similar_Sku
    (pn_tire_type_id        IN  NUMBER,
     ps_in_Matl_Num         IN  VARCHAR2,
     ps_Similar_Matl_Num    OUT VARCHAR2,
     pn_error_num           OUT NUMBER,
     ps_error_desc          OUT VARCHAR2)

IS
/******************************************************************************
   NAME:       Get_E117_Similar_Sku
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        
   1.1        10/04/2012    Harini         1.Replaced ps_in_SKU with ps_in_Matl_Num,
                                            ps_similar_sku with ps_Similar_Matl_Num.
******************************************************************************/
    ls_EceTireClass    Material_Attribute.Attrib_Value%TYPE;
    ln_TPN             NUMBER;
    ln_RecCount        NUMBER(3);
    e_NoMatlFound      EXCEPTION;    -- As per PRJ3617,replaced SKU with Matl_Num
    e_NoSimMatlFound   EXCEPTION;    -- As per PRJ3617,replaced SKU with Matl_Num

   cursor LCR_SKUS is
        SELECT p.sku,LPAD(p.Matl_Num,18,0) Matl_Num, pc.dateapproved_cegi -- As per PRJ3617,Retrieving Matl_Num along with SKU
          FROM product p, productcertificate pc,
               certificate c
         WHERE p.skuid = pc.skuid
           AND pc.certificateid = c.certificateid
           and C.CERTIFICATIONTYPEID = 6
           AND p.Matl_Num <> LPAD(ps_in_Matl_Num,18,0)    -- As per PRJ3617,replaced SKU with Matl_Num
          --  Testing only >>>>>>>>>>>>>>>>>>>>>>>>> 
          --AND c.activestatus = 'Y'
           --AND pc.dateapproved_cegi IS NOT NULL
           AND p.discontinueddate IS NULL
           AND p.ecetireclass = ls_EceTireClass
         --  AND p.Tpn = ln_TPN   -- As per PRJ3617,replaced PPN with TPN -- Commented as per JILL's mail
        ORDER BY pc.dateapproved_cegi DESC;     
            
BEGIN
    ps_Similar_Matl_Num := '';
    pn_error_num := 0;
    ps_error_desc := '';
    
    BEGIN
       ln_TPN := 0;
       ls_EceTireClass := BOM_ATTRIBUTES.Get_Ece_Tire_Class(ps_in_Matl_Num); -- As per PRJ3617,replaced query by calling BOM_ATTRIBUTES.Get_Ece_Tire_Class
    EXCEPTION
        WHEN NO_DATA_FOUND THEN          
            RAISE e_NoMatlFound;
    END;
    
    FOR lcr_SKUSRec IN lcr_SKUS LOOP
        ln_RecCount := ln_RecCount + 1;
         ps_Similar_Matl_Num := lcr_SKUSRec.Matl_num;   -- As per PRJ3617,replaced SKU with Matl_Num
         EXIT;       
    END LOOP;    
        
    IF ln_RecCount = 0 THEN
        RAISE e_NoSimMatlFound;    
    END IF; 
EXCEPTION            
    WHEN e_NoMatlFound THEN  -- As per PRJ3617,replaced SKU with Matl_Num
        pn_error_num := 1;
        ps_error_desc := 'Matl not in Matl Master';
    WHEN e_NoSimMatlFound THEN  -- As per PRJ3617,replaced SKU with Matl_Num
        pn_error_num := 2;
        ps_error_desc := 'No Similar Matl Found in Product Table';
    WHEN OTHERS THEN
        pn_error_num := 3;
        ps_error_desc := 'Unexpected Error Occurred';
END;        

PROCEDURE Get_Imark_Family
    (ps_Matl_Num            IN   VARCHAR2,
     pn_certificateid          IN   NUMBER,
     pn_family_id           OUT NUMBER,
     ps_family_code         OUT VARCHAR2,    
     pn_error_num           OUT NUMBER,
     ps_error_desc          OUT VARCHAR2)

IS
/******************************************************************************
   NAME:       Get_Imark_Family
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        
   1.1        10/04/2012    Harini         1.Replaced ps_SKU with ps_Matl_Num
   1.2        11/19/2013    Harini         Changed logic in For loop
******************************************************************************/
    ln_SkuID                    product.skuid%TYPE;
    ls_Matl_Num                       product.Matl_Num%TYPE;
    ls_AppCat                   imark_family.application_cat%TYPE;
    ls_AspectRatioCat       imark_family.aspect_ratio_cat%TYPE;
    ls_ConstructionType    imark_family.construction_type%TYPE;
    ls_FamilyCode            imark_family.family_code%TYPE;
    ls_LoadIndexCat         imark_family.load_index_cat%TYPE;
    ls_MountingType         imark_family.mounting_type%TYPE;
    ls_SpeedRatingCat      imark_family.speed_rating_cat%TYPE;
    ls_StructureType        imark_family.structure_type%TYPE;
    ln_certificateid           certificate.certificateid%type;

    ln_LoadIndex            NUMBER;
    ln_AspectRatio          NUMBER;
    ln_RecCount             NUMBER;

    cursor LCR_SKUS is
       SELECT sku,LPAD(Matl_Num,18,0) Matl_Num, tiretypeid, aspectratio, biasbeltedradial, extraloadyn, reinforcedyn,
              tubelessYN, speedrating, singloadindex, loadrange 
         FROM product
        WHERE skuid = ln_SkuID;

BEGIN

    --  Initialize return variables
    ps_error_desc := '';
    pn_error_num := 0;    
    ln_RecCount := 0;    
    ln_LoadIndex := 0;
    ln_AspectRatio := 0;
    
    if  pn_certificateid   = 0 then
         select max(certificateid) into   ln_certificateid  from product_imark_family;
    else
          ln_certificateid :=   pn_certificateid;
     end if;
 
    BEGIN
        SELECT nvl( MAX(SKUID),0) 
           INTO ln_SkuID
          from PRODUCT
         WHERE Matl_Num = LPAD(ps_Matl_Num,18,0);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            ln_SKUID := 0;
    END;             
   
    FOR lcr_SKUSRec IN lcr_SKUS LOOP
    
        ln_RecCount := ln_RecCount + 1;

        IF ln_RecCount > 1 THEN
            pn_error_num := 2;
            ps_error_desc := 'Too many SKUS for ID';
            EXIT;
        END IF;    

        IF lcr_SKUSRec.tiretypeid = 1 THEN
            ls_AppCat := 2;
        ELSIF lcr_SKUSRec.tiretypeid IN (3, 4) THEN
            ls_AppCat := 3;
        ELSIF lcr_SKUSRec.tiretypeid =  7 THEN
            ls_AppCat := 4;
        ELSE
            ls_AppCat := 0;    
        END IF;

        IF lcr_SKUSRec.biasbeltedradial = 'BIAS' THEN
            ls_ConstructionType := 'A1';
        ELSIF lcr_SKUSRec.biasbeltedradial = 'RADIAL' THEN
            ls_ConstructionType := 'A2';
        ELSIF lcr_SKUSRec.biasbeltedradial = 'BELTED' THEN
            ls_ConstructionType := '*';
        ELSE
            ls_ConstructionType := '*';
        END IF;             
    
        IF ls_AppCat = 2 THEN

            IF (lcr_SKUSRec.extraloadyn = 'Y') or (lcr_SKUSRec.reinforcedyn = 'Y')
                or (lcr_SKUSRec.loadrange = 'C') THEN
                ls_StructureType := 'B2';
            ELSE
                ls_StructureType := 'B1';
            END IF;

            ln_AspectRatio := NVL(TO_NUMBER(lcr_SKUSRec.aspectratio),200);
          
            ls_AspectRatioCat :=
            CASE 
                WHEN ln_AspectRatio >= 85 THEN               'C1'
                WHEN ln_AspectRatio BETWEEN 80 and 82 THEN   'C2'
                WHEN ln_AspectRatio = 75 THEN                'C3'
                WHEN ln_AspectRatio = 70 THEN                'C4' 
                WHEN ln_AspectRatio = 65 THEN                'C5'
                WHEN ln_AspectRatio BETWEEN 55 and 60 THEN   'C6'
                WHEN ln_AspectRatio < 55 THEN                'C7'
                ELSE '*'
            END;           

            ls_SpeedRatingCat := 
            CASE 
                WHEN lcr_SKUSRec.speedrating IN ('F','G','L','M', 'N') THEN 'D1'
                WHEN lcr_SKUSRec.speedrating IN ('P','Q','R') THEN          'D2'
                WHEN lcr_SKUSRec.speedrating IN ('S','T') THEN              'D3'
                WHEN lcr_SKUSRec.speedrating IN ('U','H') THEN              'D4'         
                WHEN lcr_SKUSRec.speedrating IN ('V','W','Y','Z') THEN      'D5'
                ELSE '*'                
            END;

            BEGIN 
                SELECT family_id, family_code
                  INTO pn_family_ID, ps_family_code
                  FROM imark_family
                 WHERE application_cat = ls_AppCat
                   AND construction_type = ls_ConstructionType
                   AND structure_type = ls_StructureType    
                   AND aspect_ratio_cat = ls_AspectRatioCat
                   AND speed_rating_cat = ls_SpeedRatingCat
                   AND certificateid = ln_certificateid;
            EXCEPTION    
                 WHEN NO_DATA_FOUND THEN
                    pn_error_num := 1;
                    ps_error_desc := 'No Imark Family Found';
            END;

        END IF;

        IF ls_AppCat = 3 THEN
        
            ln_LoadIndex := NVL(TO_NUMBER(lcr_SKUSRec.singloadIndex),400);
     
            ls_LoadIndexCat := 
            CASE
                WHEN ln_LoadIndex < 94 THEN                'B1'
                WHEN ln_LoadIndex BETWEEN 94 and 104 THEN  'B2'     
                WHEN ln_LoadIndex BETWEEN 105 and 113 THEN 'B3' 
                WHEN ln_LoadIndex BETWEEN 114 and 300 THEN 'B4' 
                ELSE '*'
            END;
    
            IF lcr_SKUSRec.tubelessYN = 'Y' THEN
                ls_MountingType := 'C2';
            ELSE
                ls_MountingType := 'C1';    
            END IF;

            BEGIN 
                SELECT family_id, family_code
                  INTO pn_family_ID, ps_family_code
                  FROM imark_family
                 WHERE application_cat = ls_AppCat
                   AND load_index_cat = ls_LoadIndexCat
                   AND mounting_type = ls_MountingType
                   AND construction_type = ls_ConstructionType
                   AND certificateid = ln_certificateid;
            EXCEPTION    
                WHEN NO_DATA_FOUND THEN
                    pn_error_num := 1;
                    ps_error_desc := 'No Imark Family Found';
            END;

        END IF;

        IF ls_AppCat = 4 THEN

           ln_LoadIndex := NVL(TO_NUMBER(lcr_SKUSRec.singloadIndex),600);
  
            ls_LoadIndexCat := 
            CASE
                WHEN ln_LoadIndex < 126 THEN                'B1'
                WHEN ln_LoadIndex BETWEEN 126 and 130 THEN  'B2'     
                WHEN ln_LoadIndex BETWEEN 131 and 135 THEN  'B3' 
                WHEN ln_LoadIndex BETWEEN 136 and 141 THEN  'B4'     
                WHEN ln_LoadIndex BETWEEN 142 and 146 THEN  'B5' 
                WHEN ln_LoadIndex BETWEEN 147 and 151 THEN  'B6'     
                WHEN ln_LoadIndex BETWEEN 152 and 156 THEN  'B7' 
                WHEN ln_LoadIndex BETWEEN 157 and 161 THEN  'B8'     
                WHEN ln_LoadIndex BETWEEN 162 and 166 THEN  'B9' 
                WHEN ln_LoadIndex BETWEEN 167 and 500 THEN  'B10' 
                ELSE '*'
            END;
    
            IF lcr_SKUSRec.tubelessYN = 'Y' THEN
                ls_MountingType := 'C2';
            ELSE
                ls_MountingType := 'C1';    
            END IF;


            BEGIN 
                SELECT family_id, family_code
                  INTO pn_family_ID, ps_family_code
                  FROM imark_family
                 WHERE application_cat = ls_AppCat
                   AND construction_type = ls_constructiontype
                   AND mounting_type = ls_MountingType
                   AND  load_index_cat =  ls_LoadIndexCat
                   AND certificateid = ln_certificateid;
            EXCEPTION    
                WHEN NO_DATA_FOUND THEN
                    pn_error_num := 1;
                    ps_error_desc := 'No Imark Family Found';
            END;

        END IF;                  
        
    END LOOP;

    IF pn_family_id IS NULL THEN
        pn_family_id := 0;
        pn_error_num := 1;
        ps_error_desc := 'No Family Found';
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        DECLARE
            lsErrorMsg VARCHAR2(80) := SQLERRM;
        BEGIN
            pn_error_num := 3;
            ps_error_desc := SUBSTR(lsErrorMsg, 1, 80);
            INSERT INTO ics.load_error
                  (table_loaded, key_field_data_1, error_date, error_desc)
             VALUES
                   ('IMARK_FAMILY', ps_Matl_Num, SYSDATE, ps_error_desc);
        END;

END;
  
END SIMILAR_TIRES;
/

create or replace PACKAGE           SKU_MAINTENANCE AS
/******************************************************************************
   NAME:       SKU_MAINTENANCE
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2/10/2013      jeseitz       1. Created this package.
******************************************************************************/


  PROCEDURE Sku_Backfeed;
  PROCEDURE SKU_RELOAD_FROM_CMDR;
  PROCEDURE InsertSku ( vn_serial_no in number ) ;
  PROCEDURE SplitBrand(vs_BRANDDESC in varchar2, vs_brand out varchar2, vs_brand_line out varchar2);
  PROCEDURE LOAD_BRAND_BRANDLINE ;
END SKU_MAINTENANCE;
/

create or replace PACKAGE BODY           SKU_MAINTENANCE AS
/******************************************************************************
   NAME:       SKU_MAINTENANCE
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2/10/2013      jeseitz       1. This package contains routines that will be scheduled to run to take care of the situation
                                                         where a sku has been created in sku_master, but does not exist in SAP.  We need to allow these 
                                                         materials to be brought into ICS before they have been created in SAP. (This is believed to be an issue
                                                         with China sku's that were not loaded into SAP yet.)
   2.0       4/7/1014        jeseitz        1. SKU_RELOAD_FROM_CMDR modified to run weekly to pull in new material numbers created for 999 skus that
                                                         didn't have an SAP number originally.
******************************************************************************/



  PROCEDURE Sku_Backfeed
  ---This procedure will be run to pick up any sku's that are in SKU_MASTER but are not in SAP.
 IS

    ln_CommitCnt      NUMBER (4);
    ln_SKUID             product.skuid%TYPE;
    ln_Count             NUMBER(3);
    ls_found             varchar2(1);
    ln_matchingSkus number;
    ln_rec_count       NUMBER;
    ln_error_count   NUMBER;
        
    --- gets authorized skus that are not in the product table  of ICS
    CURSOR lc_skus IS
               SELECT SERIAL_NO,SKU_CQBS,AUTH_DATE,DISC_DATE,AUTH_IND , S.SPEED_RATING, S.SAP_MATL_NUM
                     FROM BOM_DATA.SKU_MASTER_MV S
                     WHERE
                              S.PRODUCT_TYPE = 'TI'
                              AND S.AUTH_DATE IS NOT NULL
                              AND (S.DISC_DATE IS NULL OR TRUNC(S.AUTH_DATE) > TRUNC(S.DISC_DATE))
                              AND S.BRAND_STAMP_INBOARD IS NOT NULL -- need to have a brand_stamp_inboard
                              and s.sap_matl_num is null       -- only getting sku's that do not have an sap matl number
                              AND S.SKU_CQBS IS NOT NULL -- WE ARE LIMITING THE BACK FEED TO PRODUCTS THAT ACTUALLY HAVE A SKU ASSIGNED.
              minus
                 SELECT SERIAL_NO,SKU_CQBS,AUTH_DATE,DISC_DATE,AUTH_IND ,P.SPEEDRATING, S.SAP_MATL_NUM
                     FROM BOM_DATA.SKU_MASTER_MV S, PRODUCT P
                    WHERE
                            S.PRODUCT_TYPE = 'TI'
                            AND S.AUTH_DATE IS NOT NULL
                            AND (S.DISC_DATE IS NULL OR S.AUTH_DATE > S.DISC_DATE)
                            AND S.BRAND_STAMP_INBOARD IS NOT NULL -- need to have a brand_stamp_inboard
                            AND S.SKU_CQBS IS NOT NULL
                            and s.sap_matl_num is null     -- only getting sku's that do not have an sap matl number
                            AND S.SKU_CQBS = P.SKU;
                            
BEGIN

    --  Initialize return variables

    ln_rec_count := 0;     
    ln_CommitCnt := 0;
    ln_error_count :=0;
  
        FOR lcr_skusRec IN lc_skus LOOP
                  ---Check to see if sku is already in product table.
                  BEGIN
                       SELECT count(*)
                            INTO ln_Count
                              FROM product
                              WHERE sku = lcr_skusRec.sku_CQBS;
                             ----- AND speedrating = lcr_skusRec.speed_rating;
                   EXCEPTION
                         WHEN NO_DATA_FOUND  THEN   
                                ln_Count := 0;                   
                    END;
                    
                 IF ln_Count = 0 THEN   
                       --- we are going to go ahead and add it.      Once it goes into SAP, we will reload it.
                      InsertSku (lcr_skusRec.serial_no ) ;
                      ln_CommitCnt := ln_CommitCnt  + 1;
                 
       
                 IF  ln_CommitCnt > 300 THEN
                    COMMIT;
                    ln_CommitCnt := 0;
                 END IF;        
        
                IF Ln_error_count > 100 THEN
                      INSERT INTO ics.load_error
                                        (table_loaded, KEY_FIELD_DATA_1, KEY_FIELD_DATA_2, error_date,DB_ERROR_NO, ERROR_DESC)
                                    VALUES
                                             ('PRODUCT','sku_maintenance','Sku_Backfeed', SYSDATE,'3','Too many errors');
                      EXIT;    
                END IF;    
            
           ELSE    
             -- SKU does exist , but has a different speedrating.
             if  lcr_skusRec.SPEED_RATING is not null then  --- if new speed rating is null, and there already is a matching sku record, ignore it
                 --we know there is not a sku record that has the same speedrating, or it wouldn't be in the cursor.
                 --check to make sure the ones in the product table are not a null speedrating.
                 --if the product record speedrating is null, then just update the speedrating.
                 select count(*) into ln_MatchingSkus from product
                     where sku = lcr_skusRec.sku_cqbs and speedrating is null;
                 if ln_matchingSkus > 0 then
                    update product
                          set speedrating = lcr_skusRec.speed_rating
                          where sku = lcr_skusRec.sku_cqbs
                          and     speedrating is null;
                    ln_CommitCnt := ln_CommitCnt  + 1;
               else
                    --- we know there isn't a matching sku/speedrating record - just add it.
                    InsertSku (lcr_skusRec.serial_no ) ; 
                    ln_CommitCnt := ln_CommitCnt  + 1;
               end if;

                IF  ln_CommitCnt > 300 THEN
                    COMMIT;
                    ln_CommitCnt := 0;
                END IF;        
         
            end if;
          end if;
         END LOOP ;                 


         COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        DECLARE
            lsErrorMsg VARCHAR2(300) := SQLERRM;
        BEGIN
         INSERT INTO ics.load_error
                                        (table_loaded, KEY_FIELD_DATA_1, KEY_FIELD_DATA_2, error_date,DB_ERROR_NO, ERROR_DESC)
                                    VALUES
                                             ('PRODUCT','sku_maintenance','Sku_Backfeed', SYSDATE,'3',SUBSTR(lsErrorMsg, 1, 250) || ' (DB)');
           
        END;
END;

PROCEDURE SKU_RELOAD_FROM_CMDR
--This procedure will be scheduled to run daily to find the correct SAP number for any sku's that are already in the product table
--but do not have a SAP material number assigned.
 IS

    ln_CommitCnt      NUMBER (4);
    ln_SKUID             product.skuid%TYPE;
    ln_Count             NUMBER(3);
     ln_firstspace        number;
     ln_rec_count       NUMBER;
       ln_error_count   NUMBER;
      ls_MachineId           VARCHAR2(50):=null;
      ls_OperatorId          VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg            VARCHAR2(4000);
      ln_ErrorNum           NUMBER(1);    
       ls_IMarkfamily                 ICS.PRODUCT.FAMILY%type;
      le_Done                   EXCEPTION;
        ls_Brand               CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_BrandLine           CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_SizeStamp           CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_TireTypeId          CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_PSN                 CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_DiscontinueDate     CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_SpecNumber          CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_SpeedRating         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_SingleLoadIndex     CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_DualLoadIndex       CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_TubelessSyn         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_ReinforcedYN        CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_ExtraLoadYN         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_UTQGTreadWear       CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_UTQGTraction        CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_UTQGTemp            CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_MudSnowYN           CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_severeweatherind    CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_RimDiameter         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_SerialDate          CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_LoadRange           CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_MeaRimWidth         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_RegroovableInd      CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_PlantProduced       CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_MostRecentDate      CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_IMark               CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_InformeNumber       CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_FechaDate           CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_TreadPattern        CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_SpecialProtBrand    CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_NominalTireWidth    CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_AspectRatio         CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_TreadWearInd        CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_NameOfManufac       CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_Family              CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_DotSerialNumber     CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_TPN                 CMDR_DATA.Material_Attribute.Attrib_Value%TYPE;
       ls_BiasBeltedRadial    CMDR_DATA.Material_Attribute.Attrib_Value%TYPE; 
       ls_SKU                 CMDR_DATA.Material_Attribute.Attrib_Value%TYPE; 
--    CURSOR lcr_SKUS IS
--       SELECT sm.*, ics.sku_size, ics.sku_brnd, ics.speed_rating, ics.date_assigned
--            FROM ics.intlcert_cert_status ics, skumain_vw sm
--       WHERE NVL(ics.disc_date, SYSDATE) > '01-NOV-1991'
--           AND ics.sku_size = SUBSTR(sm.sku, 7, 4)
--           AND ics.sku_brnd = SUBSTR( sm.sku, 4, 3)
--           
--        ORDER BY ics.sku_size, ics.sku_brnd, ics.date_assigned;   
        
    --- get sku's that do not have an sap material number in the product table, but now do have an sap material number in sku_master.
--    CURSOR lcr_skus IS
--     SELECT p.*, sm.sap_matl_num
--        FROM product p, sku_master_mv sm
--           where 
--             sm.sap_matl_num is not null   
--              and SUBSTR(p.matl_num,1,8) = '00000999' -- this is a dummy matl number in ics.product
--              and substr(sm.sap_matl_num,1,9 ) = '000000090' -- only get ones with valid material numbers on sku_master
--              and product_type = 'TI' 
--              and p.sku = sm.sku_cqbs
--              and p.speedrating = sm.speed_rating;
  
--    JESEITZ - 2/19/2014 - changed to find material numbers from cmdr for sku's that don't have actual material numbers.            
       CURSOR lcr_skus IS         
      select P.*, MA.MATL_NUM SAP_MATL_NUM from cmdr_data.material_attribute ma, ics.product p
where MA.ATTRIB_NAME = 'LEGACY_COOPER_SKU'
AND MA.ATTRIB_VALUE = P.SKU
AND SUBSTR(P.MATL_NUM,1,8) = '00000999' 
AND SUBSTR(MA.MATL_NUM,1,9 ) = '000000090' ;
---and p.matl_num = '00000999W112HCE454'   ;   ---testing
  
BEGIN

    --  Initialize return variables

     ln_rec_count := 0;     
     ln_CommitCnt := 0;
     ln_error_count :=0;
    

        FOR lcr_skusRec IN lcr_skus LOOP
      
         BEGIN
           ln_skuid := lcr_skusRec.skuid;
       
           ---get tire characteristics
           ics_crud.GetTireCharacteristicsAll(lcr_skusRec.sap_matl_num,
                 ls_Brand,ls_BrandLine,ls_SizeStamp,ls_TireTypeId,ls_PSN,
                                  ls_DiscontinueDate,ls_SpecNumber,ls_SpeedRating,ls_SingleLoadIndex,ls_DualLoadIndex ,ls_TubelessSyn, 
                                  ls_ReinforcedYN ,ls_ExtraLoadYN,ls_UTQGTreadWear,ls_UTQGTraction,ls_UTQGTemp,ls_MudSnowYN,
                                  ls_SevereWeatherInd,ls_RimDiameter,
                                  ls_SerialDate,ls_LoadRange,ls_MeaRimWidth,ls_RegroovableInd,ls_PlantProduced,ls_MostRecentDate,
                                  ls_IMark ,ls_InformeNumber,ls_FechaDate,ls_TreadPattern,ls_SpecialProtBrand,ls_NominalTireWidth,
                                  ls_AspectRatio,ls_TreadWearInd,ls_NameOfManufac,ls_Family ,ls_DotSerialNumber,ls_TPN ,ls_BiasBeltedRadial,ls_SKU);
         -- As per PRJ3617,Modified the paramters
         update Product 
             set matl_num = lcr_skusRec.sap_matl_num, 
                   brand = NVL(ls_brand,lcr_skusRec.BRAND),
                   brand_line = NVL(ls_brandline,lcr_skusRec.BRAND_LINE),
                   sizestamp = NVL(ls_sizestamp,lcr_skusRec.SIZESTAMP),
                   tiretypeid = NVL(ls_tiretypeid,lcr_skusRec.TIRETYPEID),
                   psn=NVL(ls_PSN,lcr_skusRec.PSN),--- ls_psn,
                   discontinueddate = DECODE(ls_DiscontinueDate,NULL,lcr_skusRec.discontinueddate,TO_DATE(ls_DiscontinueDate,'MM/DD/YYYY')),
                   specnumber = NVL(ls_specnumber,lcr_skusRec.specnumber),
                   speedrating = NVL(ls_speedrating, Lcr_skusRec.SPEEDRATING)    ,                                                                                                         
                   singloadindex  = coalesce(ls_SingleLoadIndex,lcr_skusRec.SINGLOADINDEX),---ls_SingleLoadIndex,
                   dualloadindex  = coalesce(ls_DUALLoadIndex,lcr_skusRec.DUALLOADINDEX),---ls_DualLoadIndex,
                   tubelessyn = coalesce(lcr_skusRec.TUBELESSYN,ls_tubelessSyn),----ls_tubelessSyn,
                   reinforcedyn  = coalesce(ls_reinforcedyn,lcr_skusRec.REINFORCEDYN),---ls_reinforcedyn,
                   extraloadyn  =  coalesce(ls_extraloadyn,lcr_skusRec.EXTRALOADYN),---ls_extraloadyn,
                   utqgtreadwear  =coalesce(ls_utqgtreadwear,lcr_skusRec.UTQGTREADWEAR),---ls_utqgtreadwear,
                   utqgtraction  =DECODE(NVL(ls_utqgTRACTION,'0'),'0',lcr_skusRec.UTQGTRACTION,ls_utqgTRACTION),---ls_utqgtraction,
                   utqgtemp =coalesce(ls_utqgTEMP,lcr_skusRec.UTQGTEMP),--- ls_utqgtemp,
                   mudsnowyn  = coalesce(lcr_skusRec.mudsnowyn,ls_mudsnowyn),----ls_mudsnowyn,
                   severeweatherind = coalesce(lcr_skusRec.severeweatherind,ls_severeweatherind) ,
                   rimdiameter  = NVL(ls_rimdiameter,lcr_skusRec.RIMDIAMETER),
                   serialdate  = NVL(ls_serialdate,lcr_skusRec.serialdate),
                   loadrange  = coalesce(ls_Loadrange,lcr_skusRec.Loadrange),--- ls_loadrange,
                   mearimwidth  =  NVL(ls_mearimwidth,lcr_skusRec.mearimwidth),
                   regroovableind  = coalesce(ls_regroovableind,lcr_skusRec.regroovableind),---lcr_skusRec.regroovableind,
                   plantproduced  =  coalesce(ls_plantproduced,lcr_skusRec.plantproduced),
                   mostrecenttestdate  = ls_MostRecentDate,---coalesce(ls_MostRecentDate, lcr_skusRec.mostrecenttestdate),
                   treadpattern  =  coalesce(ls_treadpattern,lcr_skusRec.treadpattern),
                   specialprotectiveband  =  coalesce(ls_SpecialProtBrand,lcr_skusRec.specialprotectiveband),
                   nominaltirewidth =  coalesce(ls_nominaltirewidth,lcr_skusRec.nominaltirewidth),
                   aspectratio  = coalesce(ls_aspectratio,lcr_skusRec.aspectratio),---ls_aspectratio,
                   treadwearindicators  = coalesce(ls_treadwearind,lcr_skusRec.treadwearindicators),
                   nameofmanufacturer   = coalesce(ls_nameofmanufac,lcr_skusRec.nameofmanufacturer), 
                  -- family   =  coalesce(ls_family,lcr_skusRec.family),
                   dotserialnumber  =  coalesce(ls_dotserialnumber,lcr_skusRec.dotserialnumber),
                   tpn  =  coalesce(ls_tpn,lcr_skusRec.tpn),
                   biasbeltedradial  = coalesce(lcr_skusRec.biasbeltedradial,ls_biasbeltedradial),---ls_biasbeltedradial,
                   modifiedby = 'SKU_RELOAD_FROM_CMDR',
                   modifiedon = sysdate
               where skuid = lcr_skusRec.skuid;
                    commit;  
  
--          ---JES 1/23/13 need to find family separate -- needs to be after product record is inserted. - was inserting blank family into product record.
--             ls_family :=  BOM_ATTRIBUTES.GET_IMARK_FAMILY(LPAD(lcr_skusRec.sap_matl_num,18,0));
--             if ls_family is not null then
--               UPDATE PRODUCT
--                      SET FAMILY = ls_family
--                WHERE SKUID =  ln_SkuId;
--               end if;
--               COMMIT;
               
               
        EXCEPTION
           WHEN OTHERS THEN
           DECLARE
            lsErrorMsg VARCHAR2(300) := SQLERRM;
           BEGIN
           INSERT INTO ics.load_error
                                        (table_loaded, KEY_FIELD_DATA_1, KEY_FIELD_DATA_2, error_date,DB_ERROR_NO, ERROR_DESC)
                                    VALUES
                                             ('PRODUCT','sku_maintenance.SKU_RELOAD_FROM_CMDR',
                                             'Error inserting '||lcr_skusRec.SKU||' '||lcr_skusRec.skuid,
                                             SYSDATE,'3',SUBSTR(lsErrorMsg, 1, 80) || ' (DB)');
           
        END;
        end;
      END LOOP  ;                       

     END;
  
   PROCEDURE InsertSku ( vn_serial_no in number ) 
 
 is
     ln_SKUID             product.skuid%TYPE;
     ls_brand              varchar2(30);
     ls_brandline         varchar2(50);
     ls_branddesc        product.branddesc%type;
     ln_firstspace        number;
     ln_error_count     number;
 begin
          SELECT  SKUID_Seq.NextVal INTO ln_SkuId FROM DUAL;
          --split out the brand description into brand/brand line
          
          select BRAND_STAMP_INBOARD into ls_branddesc from sku_master_mv where serial_no = vn_serial_no;
          
          ---get the brand and brandline from the brand desc
           SplitBrand(ls_BRANDDESC, ls_brand , ls_brandline);
        
          INSERT INTO Product (skuid, brand,brand_line, sku,Branddesc,Matl_Num, sizestamp,  psn, discontinueddate, 
                                 speedrating,singloadindex, dualloadindex, tubelessyn, reinforcedyn, 
                                extraloadyn, utqgtreadwear, utqgtraction, utqgtemp,mudsnowyn, rimdiameter, 
                                loadrange,  regroovableind,-- imark, 
                                informenumber, fechadate, treadpattern, specialprotectiveband, nominaltirewidth,
                                aspectratio, treadwearindicators, nameofmanufacturer,---family, 
                                dotserialnumber, tpn, biasbeltedradial,
                                createdby, createdon, modifiedby, modifiedon)
                               ( select ln_skuid,
                               ls_brand,
                               ls_brandline ,
                             SKU_CQBS  ,
                             BRAND_STAMP_INBOARD,LPAD( '999'||SKU_CQBS,18,0),
                                  SIZE_STAMP, NPR_ID,
                                  DISC_DATE,   SPEED_RATING,
                                 sload_idx,  dload_idx,
                                   DECODE (tubl_conv,  'C', 'N',  'T', 'Y',  'Y') , 
                                   DECODE (NVL (LOAD_RANGE, ' '), 'RE', 'Y', 'N') ,
                                   (CASE
                                   WHEN NVL (LOAD_RANGE, ' ') = 'C'
                                              ---  AND ICS_PROCS.BOM_ATTRIBUTES.get_product_type (sku_cqbs) = 1
                                             THEN 'Y'
                                   WHEN NVL (LOAD_RANGE, ' ') = 'XL'
                                   THEN 'Y' ELSE 'N'
                                   END), 
                              utqg_wear, utqg_traction,
                              utqg_temp,DECODE ( mud_snow, 'T', 'Y', 'N'),     RIM_DIAMETER,
                             '',  DECODE (regroovable_ind, 'T', 'Y', 'N'),
                               --  I_MARK,  
                              '',  '','',
                               '','',  '',  '', '',
                               --,'',
                                 '','',  
                               DECODE(belted_radial,  'X', 'BIAS',  'B', 'BELTED',  'RADIAL'),'Sku_Backfeed',sysdate,'Sku_Backfeed',sysdate
                                from sku_master_mv where serial_no = vn_serial_no);
  EXCEPTION
           WHEN OTHERS THEN
                                    ln_error_count := ln_error_count + 1;
                                    INSERT INTO ics.load_error
                                   (table_loaded, KEY_FIELD_DATA_1, KEY_FIELD_DATA_2, error_date,DB_ERROR_NO, ERROR_DESC)
                                    VALUES
                                      ('PRODUCT','sku_maintenance','Sku_Backfeed', SYSDATE,'3',
                                      'Error inserting '||vn_SERIAL_NO);                          
                                
                                
 end;
  PROCEDURE SplitBrand(vs_BRANDDESC in varchar2, vs_brand out varchar2, vs_brand_line out varchar2)
   is
     ln_paren number;
     ln_len  number;
     ls_brand  varchar2(100);
     ls_brandfound varchar2(1);
   
     CURSOR lc_brands IS
           SELECT distinct attrib_value from cmdr_data.material_attribute
           where 
                attrib_name = 'BRAND' ;
  begin
 
      --check for parenthesis
      ln_paren := instr(vs_branddesc,'(');
      if ln_paren = 0 then --no parenthesis
            ls_brand := vs_branddesc;
      else 
           ls_brand := substr(vs_branddesc,1,ln_paren-1);
      end if;
   
      
      ls_brandfound := 'N'; 
      FOR lcr_BRANDS IN lc_BRANDS LOOP
          --- check for the brand vs brand_line  -- check for the brand in the material_attribute table
          IF  ls_brandfound = 'N' AND instr(ls_brand,LCR_BRANDS.ATTRIB_VALUE) > 0 then
                 vs_brand:= LCR_BRANDS.ATTRIB_VALUE;
                 vs_brand_line :=substr(trim(replace(ls_brand,LCR_BRANDS.ATTRIB_VALUE)),1,30);
                 ls_brandfound := 'Y';
           end if;
      END LOOP;
      
      IF ls_brandfound = 'N' THEN
          ---just split based on the first space
                 vs_brand:= trim(substr(ls_brand,1,instr(ls_brand,' ')-1)) ;
                 vs_brand_line := SUBSTR(TRIM(substr(ls_brand,instr(ls_brand,' ')+1)),1,30) ;
                 ls_brandfound := 'Y';       
      end if; 
           
      end;
 PROCEDURE LOAD_BRAND_BRANDLINE 
 IS
 
  --- THIS PROCEDURE WILL BE RUN ONE TIME TO COPY BRANDDESCRIPTION TO BRAND AND BRAND LINE  --JESEITZ 2/19/13

   CURSOR lc_prods is
       select skuid, branddesc
       from product where (brand is null or brand_line is null);

    ls_brand_out  varchar2(30);
    ls_brand_line_out varchar2(30);
begin
    for lcr_prods in lc_prods loop
          ics_procs.SKU_MAINTENANCE.SPLITBRAND(lcr_prods.branddesc,ls_brand_out,ls_brand_line_out);
          update product 
              set brand = ls_brand_out,
                   brand_line = ls_brand_line_out
               where skuid = lcr_prods.skuid;
          commit;
  end loop;
  end;
 
END SKU_MAINTENANCE;
/

create or replace PACKAGE           TESTRESULTS_CRUD as
/******************************************************************************
   NAME:       TESTRESULTS_CRUD
   PURPOSE:
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        
   1.1        10/02/2012    Harini         1.Replaced ps_SKU with ps_Matl_Num in
                                            GetProductData,Product_Save,Measure_Save,
                                            Endurance_Save,TREADWEAR_SAVE,PLUNGER_Save,
                                            BeadUnseat_Save,HighSpeedHdr_Save
                                            CheckIfProductExists procedures  
   1.2       10/18/2012    Harini          2.Added new input parameter ps_Operation in
                                           Measure_Save,Endurance_Save,TREADWEAR_SAVE,
                                           PLUNGER_Save,BeadUnseat_Save,HighSpeedHdr_Save,
                                           SoundHDR_Save,WetGripHDR_Save procedures
   1.3       11/04/2013    Harini          1.As per IDEA2706,Modified Product_Save procedure by adding 
                                           ps_SEVEREWEATHERIND and ps_MFGWWYY parameters
                                           2. Added ps_MFGWWYY,ps_GTSPEC parameters to Measure_Save,
                                           TREADWEAR_SAVE,PLUNGER_Save,BeadUnseat_Save,SoundHDR_Save,
                                           WetGripHDR_Save procedures.
                                           3. Added ps_GTSPEC parameter to Endurance_Save and HighSpeedHdr_Save
                                           procedures
   1.4       11/06/2013     Ajit           1. As per IDEA 2706,Added GetTireTypes procedure
******************************************************************************/
  TYPE retCursor IS REF CURSOR;
  
  Procedure GetProductData(pc_retCursor out retCursor,ps_Matl_Num in varchar2,pi_SKUId in Number);
  
  procedure Product_Save(pi_SKUID in   NUMBER,
                          ps_Matl_Num in   VARCHAR2,
                          ps_Brand in   VARCHAR2,
                          ps_Brand_Line in   VARCHAR2,
                          pi_TIRETYPEID in   NUMBER,
                          ps_PSN in   VARCHAR2,
                          ps_SIZESTAMP in   VARCHAR2,
                          pd_DISCONTINUEDDATE in   DATE,
                          ps_SPECNUMBER in   VARCHAR2,
                          ps_SPEEDRATING in   VARCHAR2,
                          ps_SINGLOADINDEX in   VARCHAR2,
                          ps_DUALLOADINDEX in   VARCHAR2,
                          ps_BIASBELTEDRADIAL in   VARCHAR2,
                          ps_TUBELESSYN in   VARCHAR2,
                          ps_REINFORCEDYN in   VARCHAR2,
                          ps_EXTRALOADYN in   VARCHAR2,
                          ps_UTQGTREADWEAR in   VARCHAR2,
                          ps_UTQGTRACTION in   VARCHAR2,
                          ps_UTQGTEMP in   VARCHAR2,
                          ps_MUDSNOWYN in   VARCHAR2,
                          ps_SEVEREWEATHERIND IN VARCHAR2,
                          pi_RIMDIAMETER in   NUMBER,
                          pd_SERIALDATE in   DATE,
                          ps_MFGWWYY   IN VARCHAR2,
                          ps_BRANDDESC in   VARCHAR2,
                          ps_LOADRANGE in   VARCHAR2,
                          pi_MEARIMWIDTH in   NUMBER,
                          ps_REGROOVABLEIND in   VARCHAR2,
                          ps_PLANTPRODUCED in   VARCHAR2,
                          pd_MOSTRECENTTESTDATE in   DATE,
                          ps_IMARK in   VARCHAR2,
                          ps_INFORMENUMBER in   VARCHAR2,
                          pd_FECHADATE in   DATE,
                          ps_TREADPATTERN in   VARCHAR2,
                          ps_SPECIALPROTECTIVEBAND in   VARCHAR2,
                          ps_NOMINALTIREWIDTH in   VARCHAR2,
                          ps_ASPECTRADIO in   VARCHAR2,
                          ps_TREADWEARINDICATORS in   VARCHAR2,
                          ps_NAMEOFMANUFACTURER in   VARCHAR2,
                          ps_FAMILY in   VARCHAR2,
                          ps_DOTSERIALNUMBER in   VARCHAR2,
                          ps_TPN IN VARCHAR2,
                          ps_OperatorName   in Varchar2);
                          
 PROCEDURE GetMeasure(pc_MeasureCursor out retCursor,
                         pc_MeasureDetailCursor out retCursor,
                         pi_SKUId in number,
                         ps_CertificateNumber in varchar2,
                         pi_CertificationTypeID in Number,
                         pi_CertificateNumberID in Number)  ;
                         
 Procedure GetPlunger(  pc_PlungerHdrCursor out retCursor,
                         pc_PlungerDtlCursor out retCursor,
                         pi_SKUId in number,
                         ps_CertificateNumber in varchar2,
                         pi_CertificationTypeID in Number,
                         pi_CertificateNumberID in Number) ;
                         
 Procedure GetTreadWear(pc_TreadWearHdrCursor out retCursor,
                         pc_TreadWearDtlCursor out retCursor,
                         pi_SKUId in number,
                         ps_CertificateNumber in varchar2,
                         pi_CertificationTypeID in Number,
                         pi_CertificateNumberID in Number);
                         
 Procedure GetBeadUnseat(pc_BeadUnseatHdrCursor out retCursor,
                         pc_BeadUnseatDtlCursor out retCursor,
                         pi_SKUId in number,
                         ps_CertificateNumber in varchar2,
                         pi_CertificationTypeID in Number,
                         pi_CertificateNumberID in Number);
                         
 procedure GetENDURANCE(pc_EnduranceHdrCursor out retCursor,
                         pc_EnduranceDtlCursor out retCursor,
                         pi_SKUID in Number,
                         ps_CertificateNumber in varchar,
                         pi_CertificationTypeID in Number,
                         pi_CertificateNumberID in Number);
                         
 PROCEDURE GetHighSpeed(pc_HighSpeedCursor out retCursor,
                         pc_HighSpeedDetailCursor out retCursor,
                         pc_HSSpeedTestDetail out retCursor,
                         pi_SKUId in number,
                         ps_CertificateNumber in varchar2,
                         pi_CertificationTypeID in Number,
                         pi_CertificateNumberID in Number);
                         
 PROCEDURE GetSound(pc_SoundHDRCursor out retCursor,
                         pc_SoundDetailCursor out retCursor,
                         pi_SKUId in number,
                         ps_CertificateNumber in varchar2,
                         pi_CertificationTypeID in Number,
                         pi_CertificateNumberID in Number);
                         
 PROCEDURE GetWetGrip(pc_WetGripHDRCursor out retCursor,
                         pc_WetGripDetailCursor out retCursor,
                         pi_SKUId in number,
                         ps_CertificateNumber in varchar2,
                         pi_CertificationTypeID in Number,
                         pi_CertificateNumberID in Number);
                         
 procedure GetTestResults(pc_MeasureCursor out retcursor,
                           pc_MeasureDetailCursor out retcursor,
                           PC_PLUNGERHDRCURSOR out retcursor,
                           PC_PLUNGERDTLCURSOR out retcursor,
                           PC_TREADWEARHDRCURSOR out retcursor,
                           PC_TREADWEARDTLCURSOR out retcursor,
                           PC_BEADUNSEATHDRCURSOR out retcursor,
                           PC_BEADUNSEATDTLCURSOR out retcursor,
                           PC_ENDURANCEHDRCURSOR out retcursor,
                           PC_ENDURANCEDTLCURSOR out retcursor,
                           PC_HIGHSPEEDCURSOR  out retcursor,
                           PC_HIGHSPEEDDETAILCURSOR  out retcursor,
                           PC_HSSPEEDTESTDETAIL     out retcursor,
                           PC_SOUNDHdrCURSOR  out retcursor,
                           PC_SOUNDDETAILCURSOR  out retcursor,
                           PC_WETGRIPHDRCURSOR  out retcursor,
                           PC_WETGRIPDETAILCURSOR  out retcursor,
                           pi_CertificationTypeID in number,
                           pi_SKUId in number,
                           ps_CertificateNumber in varchar,
                           pi_CertificateNumberID in number);
                           
 Procedure Measure_Save( pi_MEASUREID out Number,
                          pi_CertificateID  in number,
                          ps_PROJECTNUMBER in Varchar2,
                          pi_TIRENUMBER in Number,
                          ps_TESTSPEC in Varchar2,
                          pd_COMPLETIONDATE in DATE,
                          pi_INFLATIONPRESSURE in Number,
                          ps_MOLDDESIGN in Varchar2,
                          pi_RIMWIDTH in Number,
                          ps_DOTSERIALNUMBER in Varchar2,
                          pi_DIAMETER in Number,
                          pi_AVGSECTIONWIDTH in Number,
                          pi_AVGOVERALLWIDTH in Number,
                          pi_MAXOVERALLWIDTH in Number,
                          pi_SIZEFACTOR in Number,
                          pd_MOUNTTIME in DATE,
                          pi_MOUNTTEMP in Number,
                          pd_SERIALDATE in DATE,
                          ps_MFGWWYY    IN VARCHAR2,
                          pd_ENDTIME in DATE,
                          pi_ACTSIZEFACTOR in Number,
                          pi_CERTIFICATIONTYPEID in Number,
                          pi_STARTINFLATIONPRESSURE in Number,
                          pi_ENDINFLATIONPRESSURE in Number,
                          ps_ADJUSTMENT in Varchar2,
                          pi_CIRCUNFERENCE in Number,
                          pi_NOMINALDIAMETER in Number,
                          pi_NOMINALWIDTH in Number,
                          ps_NOMINALWIDTHPASSFAIL in Varchar2,
                          pi_NOMINALWIDTHDIFERENCE in Number,
                          pi_NOMINALWIDTHTOLERANCE in Number,
                          pi_MAXOVERALLDIAMETER in Number,
                          pi_MINOVERALLDIAMETER in Number,
                          ps_OVERALLWIDTHPASSFAIL in Varchar2,
                          ps_OVERALLDIAMETERPASSFAIL in Varchar2,
                          pi_DIAMETERDIFERENCE in Number,
                          pi_DIAMETERTOLERANCE in Number,
                          pi_TEMPRESISTANCEGRADING in Varchar2,
                          pi_TENSILESTRENGHT1 in Number,
                          pi_TENSILESTRENGHT2 in Number,
                          pi_ELONGATION1 in Number,
                          pi_ELONGATION2 in Number,
                          pi_TENSILESTRENGHTAFTERAGE1 in Number,
                          pi_TENSILESTRENGHTAFTERAGE2 in Number,
                          ps_OperatorName   in varchar2,
                          ps_Matl_Num IN VARCHAR2,
                          ps_Operation IN VARCHAR2,
                          ps_GTSPEC IN VARCHAR2);
                          
  Procedure MeasureDetail_Save(pi_SECTIONWIDTH in  MEASUREDTL.SECTIONWIDTH%Type,
                               pi_OVERALLWIDTH in  MEASUREDTL.OVERALLWIDTH%Type,
                               pi_MEASUREID in number,
                               PI_ITERATION IN NUMBER,
                               ps_OperatorName   in varchar2 );
                               
   procedure Endurance_Save( pi_ENDURANCEID out number,
                            ps_PROJECTNUMBER in varchar2,
                            pi_TIRENUMBER in number,
                            ps_TESTSPEC in varchar2,
                            pd_COMPLETIONDATE in date,
                            ps_DOTSERIALNUMBER in varchar2,
                            ps_MFGWWYY in varchar2,
                            pd_PRECONDSTARTDATE in date,
                            pi_PRECONDSTARTTEMP in number,
                            pi_RIMDIAMETER in number,
                            pi_RIMWIDTH in number,
                            pd_PRECONDENDDATE in date,
                            pi_PRECONDENDTEMP in number,
                            pi_INFLATIONPRESSURE in number,
                            pi_BEFOREDIAMETER in number,
                            pi_AFTERDIAMETER in number,
                            pi_BEFOREINFLATION in number,
                            pi_AFTERINFLATION in number,
                            pi_WHEELPOSITION in number,
                            pi_WHEELNUMBER in number,
                            pi_FINALTEMP in number,
                            pi_FINALDISTANCE in number,
                            pi_FINALINFLATION in number,
                            pd_POSTCONDSTARTDATE in date,
                            pd_POSTCONDENDDATE in date,
                            pi_POSTCONDENDTEMP in number,
                            ps_PASSYN in varchar2,
                            pi_CertificationTypeID in number,
                            pd_SerialDate in date,
                            pi_PreCondTime in number,
                            pi_PostCondTime  in number,
                            pi_DIAMETERTESTDRUM in Number,
                            pi_PRECONDTEMP in Number,
                            pi_INFLATIONPRESSUREREADJUSTED in Number,
                            pi_CIRCUNFERENCEBEFORETEST in Number,
                            ps_RESULTPASSFAIL in Varchar2,
                            pi_ENDURANCEHOURS in Number,
                            ps_POSSIBLEFAILURESFOUND in Varchar2,
                            pi_CIRCUNFERENCEAFTERTEST in Number,
                            pi_OUTERDIAMETERDIFERENCE in Number,
                            pi_ODDIFERENCETOLERANCE in Number,
                            ps_SERIENOM in Varchar2,
                            ps_FINALJUDGEMENT in Varchar2,
                            ps_APPROVER in Varchar2,
                            ps_OperatorName in  Varchar2,
                            pi_certificateid in number,
                            ps_Matl_Num IN VARCHAR2,
                            pn_lowInfstartinflation IN NUMBER,
                            pn_lowInfendinflation IN NUMBER,
                            pn_lowInfendtemp IN NUMBER,
                            ps_Operation IN VARCHAR2,
                            ps_GTSPEC IN VARCHAR2);
                            
 PROCEDURE ENDURANCEDETAIL_SAVE( PI_TESTSTEP IN NUMBER,
                                  pi_TIMEINMIN IN NUMBER,
                                  PI_SPEED IN NUMBER,
                                  PI_TOTMILES IN NUMBER,
                                  PI_LOAD IN NUMBER,
                                  PI_LOADPERCENT IN NUMBER,
                                  PI_SETINFLATION IN NUMBER,
                                  PI_AMBTEMP IN NUMBER,
                                  PI_INFPRESSURE IN NUMBER,
                                  PD_STEPCOMPLETIONDATE IN EnduranceDtl.STEPCOMPLETIONDATE%Type,
                                  PI_ENDURANCEID IN NUMBER);
                                  
  PROCEDURE TREADWEAR_SAVE(PI_TREADWEARID OUT NUMBER,
                           PS_PROJECTNUMBER  IN VARCHAR2,
                           PI_TIRENUMBER IN NUMBER,
                           PS_TESTSPEC  IN VARCHAR2,
                           PD_COMPLETIONDATE IN DATE,
                           PS_DOTSERIALNUMBER  IN VARCHAR2,
                           PI_LOWESTWEARBAR IN NUMBER,
                           PS_PASSYN  IN VARCHAR2,
                           pi_CertificationTypeID in number,
                           PD_SERIALDATE IN DATE,
                           ps_MFGWWYY    IN VARCHAR2,
                           ps_OperatorName in varchar2,
                           pi_INDICATORSREQUIREMENT in number,
                           pi_CertificateID in Number,
                           ps_Matl_Num IN VARCHAR2,
                           ps_Operation IN VARCHAR2,
                           ps_GTSPEC IN VARCHAR2);
                           
  PROCEDURE TREADWEARDETAIL_SAVE(PI_TREADWEARID in NUMBER,
                                 PI_WEARBARHEIGHT IN  treadweardtl.wearbarheight%type,
                                 PI_ITERATION IN  treadweardtl.iteration%TYPE,
                                 ps_OperatorName in varchar2)  ;
                                 
   procedure PLUNGER_Save(  pi_PLUNGERID out Number,
                            ps_PROJECTNUMBER in Varchar2,
                            pi_TIRENUMBER in Number,
                            ps_TESTSPEC in Varchar2,
                            pd_COMPLETIONDATE in DATE,
                            ps_DOTSERIALNUMBER in Varchar2,
                            pi_AVGBREAKINGENERGY in Number,
                            ps_PASSYN in Varchar2,
                            pi_CERTIFICATIONTYPEID in Number,
                            pd_SERIALDATE in DATE,
                            ps_MFGWWYY    IN VARCHAR2,
                            pi_MINPLUNGER in Number,
                            ps_OperatorName in varchar2 ,
                            pi_CertificateID in Number,
                            ps_Matl_Num IN VARCHAR2,
                            ps_Operation IN VARCHAR2,
                            ps_GTSPEC IN VARCHAR2);
                            
  procedure PLUNGERDETAIL_Save(PI_BREAKINGENERGY  IN NUMBER,
                               PI_PLUNGERID  IN NUMBER,
                               PI_ITERATION IN NUMBER,
                               ps_OperatorName in varchar2) ;
                               
  Procedure BeadUnseat_Save(pi_BEADUNSEATID out Number,
                            ps_PROJECTNUMBER in Varchar2,
                            pi_TIRENUMBER in Number,
                            ps_TESTSPEC in Varchar2,
                            pd_COMPLETIONDATE in DATE,
                            ps_DOTSERIALNUMBER in Varchar2,
                            pi_LOWESTUNSEATVALUE in Number,
                            ps_PASSYN in Varchar2,
                            pi_CERTIFICATIONTYPEID in Number,
                            pd_SERIALDATE in DATE,
                            ps_MFGWWYY    IN VARCHAR2,
                            pi_MINBEADUNSEAT in Number,
                            ps_TESTPASSFAIL in Varchar2,
                            ps_OperatorName   in varchar2,
                            pi_CertificateID in Number,
                            ps_Matl_Num IN VARCHAR2,
                            ps_Operation IN VARCHAR2,                            
                            ps_GTSPEC IN VARCHAR2);
                            
  Procedure BeadUnseatDetail_Save(pi_BEADUNSEATID in NUMBER,
                                  pi_UNSEATFORCE in NUMBER,
                                  PI_ITERATION IN NUMBER,
                                  ps_OperatorName   in varchar2);
                                  
   procedure HighSpeedHdr_Save( pi_HIGHSPEEDID          out number,
                                ps_PROJECTNUMBER        in varchar2,
                                pi_TIRENUM              in number  ,
                                ps_TESTSPEC             in varchar2,
                                pd_COMPETIONDATE        in DATE,
                                ps_DOTSERIALNUMBER      in varchar2,
                                ps_MFGWWYY              in varchar2,
                                pd_PRECONDSTARTDATE     in DATE,
                                pi_PRECONDSARTTEMP      in number ,
                                pd_precondtime          in  highspeedhdr.precondtime%type,
                                pi_RIMDIAMETER          in  highspeedhdr.rimdiameter%type,
                                pi_RIMWIDTH             in  highspeedhdr.rimwidth%type,
                                pd_PRECONDENDDATE       in DATE,
                                pi_PRECONDENDTEMP       in number ,
                                pi_INFLATIONPRESSURE    in number ,
                                pi_BEFOREDIAMETER       in  highspeedhdr.BEFOREDIAMETER%type,
                                pi_AFTERDIAMETER        in  highspeedhdr.AFTERDIAMETER%type,
                                pi_BEFOREINFLATION      in number ,
                                pi_AFTERINFLATION       in number ,
                                pi_WHEELPOSITION        in number ,
                                pi_WHEELNUMBER          in number ,
                                pi_FINALTEMP            in number ,
                                pi_FINALDISTANCE        in  highspeedhdr.FINALDISTANCE%type,
                                pi_FINALINFLATION       in number ,
                                pd_POSTCONDSTARTDATE    in DATE,
                                pd_POSTCONDENDDATE      in DATE,
                                pi_POSTCONDENDTEMP      in number ,
                                ps_PASSYN               in varchar2,
                                pd_SERIALDATE           in DATE,
                                pi_POSTCONDTIME         in  highspeedhdr.POSTCONDTIME%type,
                                pi_CERTIFICATIONTYPEID  in number ,
                                pi_DIAMETERTESTDRUM     in Number,
                                pi_PRECONDTEMP          in Number,
                                pi_INFLATIONPRESSUREREADJUSTED in Number,
                                pi_CIRCUNFERENCEBEFORETEST     in Number,
                                pi_WHEELSPEEDRPM        in Number,
                                pi_WHEELSPEEDKMH        in Number,
                                pi_CIRCUNFERENCEAFTERTEST in Number,
                                pi_ODDIFERENCE            in Number,
                                pi_ODDIFERENCETOLERANCE   in Number,
                                ps_SERIENOM               in Varchar2,
                                ps_FINALJUDGEMENT         in Varchar2,
                                ps_APPROVER               in Varchar2,
                                pi_PASSATKMH              in Number,
                                ps_SPEEDTTESTPASSFAIL     in Varchar2,
                                pi_SPEEDTOTALTIME         in Number,
                                pi_MAXSPEED     in Number,
                                pi_MAXLOAD      in Number,
                                ps_OperatorName in Varchar2,
                                pi_CertificateID in Number,
                                ps_Matl_Num  IN VARCHAR2,
                                ps_Operation IN VARCHAR2,
                                ps_GTSPEC IN VARCHAR2);
                                
  procedure HighSpeedDetail_Save ( pi_HIGHSPEEDID in Number,
                                    pi_TESTSTEP in number,
                                    pi_TIMEINMIN in Number,
                                    pi_SPEED in  HighSpeedDtl.SPEED%Type,
                                    pi_TOTMILES in  HighSpeedDtl.TOTMILES%Type,
                                    pi_LOAD in  HighSpeedDtl.LOAD%Type,
                                    pi_LOADPERCENT in Number,
                                    pi_SETINFLATION in Number,
                                    pi_AMBTEMP in Number,
                                    pi_INFPRESSURE in Number,
                                    pd_STEPCOMPLETIONDATE in HighSpeedDtl.STEPCOMPLETIONDATE%Type,
                                    ps_OperatorID in varchar2);
                                    
Procedure HIghSpeed_SpeedTestDetail_Save(pi_ITERATION in Number,
                                            pd_TIME in DATE,
                                            pi_SPEED in Number,
                                            pi_HIGHSPEEDID in Number,
                                            ps_OperatorName in Varchar2);
                                            
  procedure SoundHDR_Save(   ps_UserID                     in varchar2,
                              pi_SoundID                    out number,
                              ps_PROJECTNUMBER              in varchar2,
                              pi_TIRENUMBER                 in number,
                              ps_TESTSPEC                   in varchar2,
                              ps_TESTREPORTNUMBER           in varchar2,
                              ps_MANUFACTUREANDBRAND        in varchar2,
                              ps_TIRECLASS                  in varchar2,
                              ps_CATEGORYOFUSE              in varchar2,
                              pd_DATEOFTEST                 in DATE,
                              ps_TESTVEHICULE               in varchar2,
                              ps_TESTVEHICULEWHEELBASE      in varchar2,
                              ps_LOCATIONOFTESTTRACK        in varchar2,
                              pd_DATETRACKCERTIFTOISO       in DATE,
                              ps_TIRESIZEDESIGNATION        in varchar2,
                              ps_TIRESERVICEDESCRIPTION     in varchar2,
                              ps_TESTMASS_FRONTL            in varchar2,
                              ps_TESTMASS_FRONTR            in varchar2,
                              ps_TESTMASS_REARL             in varchar2,
                              ps_TESTMASS_REARR             in varchar2,
                              ps_TIRELOADINDEX_FRONTL       in varchar2,
                              ps_TIRELOADINDEX_FRONTR       in varchar2,
                              ps_TIRELOADINDEX_REARL        in varchar2,
                              ps_TIRELOADINDEX_REARR        in varchar2,
                              ps_INFLATIONPRESSURECO_FRONTL in varchar2,
                              ps_INFLATIONPRESSURECO_FRONTR in varchar2,
                              ps_INFLATIONPRESSURECO_REARL  in varchar2,
                              ps_INFLATIONPRESSURECO_REARR  in varchar2,
                              ps_TESTRIMWIDTHCODE           in varchar2,
                              ps_TEMPMEASURESENSORTYPE      in varchar2,
                              pi_CERTIFICATIONTYPEID        in number,
                              pi_SKUID                      in number,
                              ps_ReferenceInflationPressure in varchar2,
                              pi_CertificateID              in Number,
                              ps_Operation                  IN VARCHAR2,
                              ps_MFGWWYY                    IN VARCHAR2,
                              ps_GTSPEC                     IN VARCHAR2);
                              
  procedure SoundDetail_Save( ps_UserID in varchar2,
                              pi_ITERATION in number,
                              ps_TESTSPEED  in varchar2,
                              ps_DIRECTIONOFRUN  in varchar2,
                              ps_SOUNDLEVELLEFT  in varchar2,
                              ps_SOUNDLEVELRIGHT  in varchar2,
                              ps_AIRTEMP  in varchar2,
                              ps_TRACKTEMP in varchar2,
                              ps_SOUNDLEVELLEFT_TEMPCOR in varchar2,
                              ps_SOUNDLEVELRIGHT_TEMPCOR  in varchar2,
                              pi_SOUNDID in number);
                              
   procedure WetGripHDR_Save( ps_UserID in varchar2,
                              pi_WETGRIPID  out Number,
                              ps_PROJECTNUMBER  in Varchar2,
                              pi_TIRENUMBER  in Varchar2,
                              ps_TESTSPEC  in Varchar2,
                              pd_DATEOFTEST  in DATE,
                              ps_TESTVEHICLE  in Varchar2,
                              ps_LOCATIONOFTESTTRACK  in Varchar2,
                              ps_TESTTRACKCHARACTERISTICS  in Varchar2,
                              ps_ISSUEBY  in Varchar2,
                              ps_METHODOFCERTIFICATION  in Varchar2,
                              ps_TESTTIREDETAILS  in Varchar2,
                              ps_TIRESIZEANDSERVICEDESC  in Varchar2,
                              ps_TIREBRANDANDTRADEDESC  in Varchar2,
                              ps_REFERENCEINFLATIONPRESSURE  in Varchar2,
                              ps_TESTRIMWITHCODE  in Varchar2,
                              ps_TEMPMEASURESENSORTYPE  in Varchar2,
                              ps_IDENTIFICATIONSRTT  in Varchar2,
                              ps_TESTTIRELOAD_SRTT  in Varchar2,
                              ps_TESTTIRELOAD_CANDIDATE  in Varchar2,
                              ps_TESTTIRELOAD_CONTROL  in Varchar2,
                              ps_WATERDEPTH_SRTT  in Varchar2,
                              ps_WATERDEPTH_CANDIDATE  in Varchar2,
                              ps_WATERDEPTH_CONTROL  in Varchar2,
                              ps_WETTEDTRACKTEMPAVG  in Varchar2,
                              pi_CERTIFICATIONTYPEID  in Number,
                              pi_SKUID  in Number,
                              pi_CertificateID in Number,
                              ps_Operation  IN VARCHAR2,
                              ps_MFGWWYY    IN VARCHAR2,
                              ps_GTSPEC     IN VARCHAR2);
                               
   procedure WetGripDetail_Save( ps_UserID in varchar2,
                                 pi_ITERATION  in number,
                                  ps_TESTSPEED  in varchar2,
                                  ps_DIRECTIONOFRUN  in varchar2,
                                  ps_SRTT  in varchar2,
                                  ps_CANDIDATETIRE  in varchar2,
                                  ps_PEAKBREAKFORCECOEFICIENT  in varchar2,
                                  ps_MEANFULLYDEVDECELERATION  in varchar2,
                                  ps_WETGRIPINDEX  in varchar2,
                                  ps_COMMENTS  in varchar2,
                                  pi_WETGRIPID  in number);
             
  PROCEDURE GetTireTypes(pc_TIRETYPES   OUT retCursor);
                         
  Function GetMeasureID(ps_CertificateNumber	in VARCHAR2,pi_CertificationTypeId in number, pi_CertificateNumberID in number) return Number;
  
  Function GetPlungerID(ps_CertificateNumber	in VARCHAR2,pi_CertificationTypeId in number, pi_CertificateNumberID in number ) return Number;
  
  Function GetTreadWearID(ps_CertificateNumber	in VARCHAR2,pi_CertificationTypeId in number, pi_CertificateNumberID in number ) return Number;
  
  Function GetEnduranceID(ps_CertificateNumber	in VARCHAR2,pi_CertificationTypeId in number, pi_CertificateNumberID in number ) return Number;
  
  Function GetBeadUnseatID(ps_CertificateNumber	in VARCHAR2,pi_CertificationTypeId in number, pi_CertificateNumberID in number) return Number;
  
  Function GetHighSpeedID(ps_CertificateNumber	in VARCHAR2,pi_CertificationTypeId in number, pi_CertificateNumberID in number ) return Number;
  
  function GetWetGripHDRID(ps_CertificateNumber	in VARCHAR2,pi_CertificationTypeId in number,pi_SKUId in number, pi_CertificateNumberID in number) return Number;
  
  function GetSoundHDRID(ps_CertificateNumber	in VARCHAR2,pi_CertificationTypeId in number, pi_CertificateNumberID in number) return Number ;
  
  Function CheckIfProductExists(ps_Matl_Num	in VARCHAR2,pi_SKUId in number) return Varchar2;
  
  Function CheckIfBeadUnseatExists(PI_CertificateID	in Number,pi_CertificationTypeID in number) return Varchar2;
  
  Function CheckIfEnduranceExists(PI_CertificateID	in Number,pi_CertificationTypeID in number) return Varchar2;
  
  Function CheckIfHighSpeedExists(PI_CertificateID	in Number,pi_CertificationTypeID in number) return Varchar2;
  
  Function CheckIfTreadWearExists(PI_CertificateID	in Number,pi_CertificationTypeID in number) return Varchar2;
  
  Function CheckIfPlungerExists(PI_CertificateID	in Number, pi_CertificationTypeID in number) return Varchar2;
  
 Function CheckIfMeasureExists(pi_CertificateID	in number,pi_CertificationTypeID in number) return Varchar2;
 
  Function CheckIfSoundExixts  (PI_CertificateID	in Number, pi_CertificationTypeID in number)  return Varchar2;
  
  Function CheckIfWetGripExixts(PI_CertificateID	in Number, pi_CertificationTypeID in number)  return Varchar2;
  
END TESTRESULTS_CRUD;
/

create or replace PACKAGE BODY           TESTRESULTS_CRUD as
/******************************************************************************
   NAME:       TESTRESULTS_CRUD
   PURPOSE:
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        
   1.1        10/02/2012    Harini         1.Replaced ps_SKU with ps_Matl_Num in
                                            GetProductData,Product_Save,Measure_Save,
                                            Endurance_Save,TREADWEAR_SAVE,PLUNGER_Save,
                                            BeadUnseat_Save,HighSpeedHdr_Save,
                                            CheckIfProductExists procedures   
   1.2       10/18/2012    Harini          2.Added new input parameter ps_Operation in
                                           Measure_Save,Endurance_Save,TREADWEAR_SAVE,
                                           PLUNGER_Save,BeadUnseat_Save,HighSpeedHdr_Save,
                                           SoundHDR_Save,WetGripHDR_Save procedures
   1.3       10/30/2012    Harini         3.Included NO_DATA_FOUND exception block when no 
                                            SKU available for given Matl_Num and assign empty 
                                            for ls_SKU parameter in Measure_Save,Endurance_Save,
                                            TREADWEAR_SAVE,PLUNGER_Save,BeadUnseat_Save,
                                            HighSpeedHdr_Save procedures
   1.4       11/04/2013    Harini          1.As per IDEA2706, Modified Product_Save procedure by adding 
                                           ps_SEVEREWEATHERIND and ps_MFGWWYY parameters
                                           2. Added SEVEREWEATHERIND and MFGWWYY fields in the select list
                                           of GetProductData procedure
                                           3.Added ps_MFGWWYY,ps_GTSPEC parameters to Measure_Save,
                                           TREADWEAR_SAVE,PLUNGER_Save,BeadUnseat_Save,SoundHDR_Save,
                                           WetGripHDR_Save procedures.
                                           4.Added ps_GTSPEC parameter to Endurance_Save and HighSpeedHdr_Save
                                           procedures
    1.5       11/06/2013     Ajit           1. As per IDEA 2706,Added GetTireTypes procedure
    1.6       11/11/2013    Harini        1. Added TiretypeId for updating in Product table in Product_Save procedure
******************************************************************************/
 Procedure GetProductData(pc_retCursor out retCursor,ps_Matl_Num IN VARCHAR2,pi_SKUId in Number) 
    AS
    /******************************************************************************
     NAME:       GetProductData
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0
     1.1        10/2/2012     Harini         1.Replaced ps_SKU with ps_Matl_Num,
                                             BrandCode with Brand and Brand_Line,
                                             nprid instead of psn,Tpn instead of PPn.
                                             Added Lpad(matl_num) in the select list
     1.2        11/04/2013    Harini        1.Added SEVEREWEATHERIND and MFGWWYY fields in 
                                            the select list
    ******************************************************************************/
  --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      li_ParameterIsInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParameterIsInvalid,-20006);
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
  begin
        if ps_Matl_Num is null then
              raise li_ParametersAreNull;
        end if;
        if ps_Matl_Num = '' then
              raise li_ParameterIsInvalid;
        end if;
       -- Use Brand and Brand_Line instead of Brandcode,nprid instead of psn,ppn instead of psn
        Open pc_retCursor FOR
        SELECT SKUID,
                SKU,
                LPAD(MATL_NUM,18,0) MATL_NUM, -- AS per PRJ3617,Matl_Num is added in select list
                BRAND,
                BRAND_LINE,
                TIRETYPEID,
                PSN,
                SIZESTAMP,
                DISCONTINUEDDATE,
                SPECNUMBER,
                SPEEDRATING,
                SINGLOADINDEX,
                DUALLOADINDEX,
                BIASBELTEDRADIAL,
                TUBELESSYN,
                REINFORCEDYN,
                EXTRALOADYN,
                UTQGTREADWEAR,
                UTQGTRACTION,
                UTQGTEMP,
                MUDSNOWYN,
                SEVEREWEATHERIND,
                RIMDIAMETER,
                SERIALDATE,
                MFGWWYY,
                BRANDDESC,
                LOADRANGE,
                MEARIMWIDTH,
                REGROOVABLEIND,
                PLANTPRODUCED,
                MOSTRECENTTESTDATE,
                IMARK,
                INFORMENUMBER,
                FECHADATE,
                TREADPATTERN,
                SPECIALPROTECTIVEBAND,
                NOMINALTIREWIDTH,
                ASPECTRATIO,
                TREADWEARINDICATORS,
                NAMEOFMANUFACTURER,
                FAMILY,
                DOTSERIALNUMBER,
                TPN
        FROM  PRODUCT
        WHERE Matl_Num = LPAD(ps_Matl_Num,18,0) And -- Replaced sku with Matl_num in where condition 
              SKUID = pi_SKUId;
  EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:= sqlerrm || '- GetProductData.  There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.GetProductData',
                AX_RECORDDATA    => 'ps_Matl_Num is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20005,sqlerrm);
         when li_ParameterIsInvalid then
            ls_ErrorMsg:= sqlerrm || '- GetProductData.  There is one parameters is invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.GetProductData',
                AX_RECORDDATA    => 'ps_Matl_Num is parameters invalid..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20006,sqlerrm);
         when others then
              ls_ErrorMsg:=  sqlerrm || '- GetProductData. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.GetProductData',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,sqlerrm);
  END GetProductData;
  
  procedure GetTestResults(pc_MeasureCursor out retcursor,
                           pc_MeasureDetailCursor out retcursor,
                           PC_PLUNGERHDRCURSOR out retcursor,
                           PC_PLUNGERDTLCURSOR out retcursor,
                           PC_TREADWEARHDRCURSOR out retcursor,
                           PC_TREADWEARDTLCURSOR out retcursor,
                           PC_BEADUNSEATHDRCURSOR out retcursor,
                           PC_BEADUNSEATDTLCURSOR out retcursor,
                           PC_ENDURANCEHDRCURSOR out retcursor,
                           PC_ENDURANCEDTLCURSOR out retcursor,
                           PC_HIGHSPEEDCURSOR  out retcursor,
                           PC_HIGHSPEEDDETAILCURSOR  out retcursor,
                           PC_HSSPEEDTESTDETAIL     out retcursor,
                           PC_SOUNDHdrCURSOR  out retcursor,
                           PC_SOUNDDETAILCURSOR  out retcursor,
                           PC_WETGRIPHDRCURSOR  out retcursor,
                           PC_WETGRIPDETAILCURSOR  out retcursor,
                           pi_CertificationTypeID in number,
                           pi_SKUId in number,
                           ps_CertificateNumber in varchar,
                           pi_CertificateNumberID in number) as
    --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      ls_skuExists varchar2(1);
      ls_MeasureExists varchar2(1);
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      ls_LastImarkCertNum   CERTIFICATE.CERTIFICATENUMBER%type;
      li_MeasureId  MeasureHdr.measureid%type;
      li_CertificateID number;
  begin
        if pi_skuid is null or pi_CertificationTypeID is null or ps_CertificateNumber is null then
          raise li_ParametersAreNull;
       end if;
      if pi_skuid <= 0 or pi_CertificationTypeID <= 0 or ps_CertificateNumber = '' then
              raise li_ParametersAreInvalid;
      end if;
    /*
    Since Imark has one and only one certificate number,
    I am getting the latest one that has the I033 prefix and
    using it to get the information regarding the tests results.
    */
      if pi_CertificationTypeID = 4 then
           li_CertificateID:= ICS_COMMON_FUNCTIONS.GETLATESTIMARKCERTIFICATEID();
           ls_LastImarkCertNum := ps_CertificateNumber ; --'I033';
           --li_CertificateID := ICS_COMMON_FUNCTIONS.GETCERTIFICATEID(ls_LastImarkCertNum,pi_CertificationTypeID);
                 --Gets the Measure Table
                 
            TESTRESULTS_CRUD.GETMEASURE(
                                      pc_MeasureCursor => pc_MeasureCursor,
                                      pc_MeasureDetailCursor => pc_MeasureDetailCursor,
                                      PI_SKUID => pi_SKUId,
                                      PS_CERTIFICATENUMBER => ls_LastImarkCertNum,
                                      PI_CERTIFICATIONTYPEID => pi_CertificationTypeID,
                                      PI_CERTIFICATENUMBERID => li_CertificateID
                                    );
           TESTRESULTS_CRUD.GETPLUNGER(
                                        PC_PLUNGERHDRCURSOR => PC_PLUNGERHDRCURSOR,
                                        PC_PLUNGERDTLCURSOR => PC_PLUNGERDTLCURSOR,
                                        PI_SKUID => pi_SKUId,
                                        PS_CERTIFICATENUMBER => ls_LastImarkCertNum,
                                        PI_CERTIFICATIONTYPEID => pi_CertificationTypeID,
                                        PI_CERTIFICATENUMBERID => li_CertificateID
                                      );
           TESTRESULTS_CRUD.GETTREADWEAR(
                                      PC_TREADWEARHDRCURSOR => PC_TREADWEARHDRCURSOR,
                                      PC_TREADWEARDTLCURSOR => PC_TREADWEARDTLCURSOR,
                                      PI_SKUID => pi_SKUId,
                                      PS_CERTIFICATENUMBER => ls_LastImarkCertNum,
                                      PI_CERTIFICATIONTYPEID => pi_CertificationTypeID,
                                      PI_CERTIFICATENUMBERID => li_CertificateID
                                    );
             TESTRESULTS_CRUD.GETBEADUNSEAT(
                                    PC_BEADUNSEATHDRCURSOR => PC_BEADUNSEATHDRCURSOR,
                                    PC_BEADUNSEATDTLCURSOR => PC_BEADUNSEATDTLCURSOR,
                                    PI_SKUID => PI_SKUID,
                                    PS_CERTIFICATENUMBER => ls_LastImarkCertNum,
                                    PI_CERTIFICATIONTYPEID => PI_CERTIFICATIONTYPEID,
                                    PI_CERTIFICATENUMBERID => li_CertificateID
                                  );
           TESTRESULTS_CRUD.GETENDURANCE(
                                    PC_ENDURANCEHDRCURSOR => PC_ENDURANCEHDRCURSOR,
                                    PC_ENDURANCEDTLCURSOR => PC_ENDURANCEDTLCURSOR,
                                    PI_SKUID => PI_SKUID,
                                    PS_CERTIFICATENUMBER => PS_CERTIFICATENUMBER,
                                    PI_CERTIFICATIONTYPEID => PI_CERTIFICATIONTYPEID,
                                    PI_CERTIFICATENUMBERID => li_CertificateID
                                  );
          TESTRESULTS_CRUD.GETHIGHSPEED(
                            PC_HIGHSPEEDCURSOR => PC_HIGHSPEEDCURSOR,
                            PC_HIGHSPEEDDETAILCURSOR => PC_HIGHSPEEDDETAILCURSOR,
                            PC_HSSPEEDTESTDETAIL => PC_HSSPEEDTESTDETAIL,
                            PI_SKUID => PI_SKUID,
                            PS_CERTIFICATENUMBER => PS_CERTIFICATENUMBER,
                            PI_CERTIFICATIONTYPEID => PI_CERTIFICATIONTYPEID,
                            PI_CERTIFICATENUMBERID => li_CertificateID);
           TESTRESULTS_CRUD.GETSOUND(
                                    PC_SOUNDHDRCURSOR => PC_SOUNDHDRCURSOR,
                                    PC_SOUNDDETAILCURSOR => PC_SOUNDDETAILCURSOR,
                                    PI_SKUID => PI_SKUID,
                                    PS_CERTIFICATENUMBER => PS_CERTIFICATENUMBER,
                                    PI_CERTIFICATIONTYPEID => PI_CERTIFICATIONTYPEID,
                                    PI_CERTIFICATENUMBERID => li_CertificateID
                                  );
          TESTRESULTS_CRUD.GETWETGRIP(
                                    PC_WETGRIPHDRCURSOR => PC_WETGRIPHDRCURSOR,
                                    PC_WETGRIPDETAILCURSOR => PC_WETGRIPDETAILCURSOR,
                                    PI_SKUID => PI_SKUID,
                                    PS_CERTIFICATENUMBER => PS_CERTIFICATENUMBER,
                                    PI_CERTIFICATIONTYPEID => PI_CERTIFICATIONTYPEID,
                                    PI_CERTIFICATENUMBERID => li_CertificateID
                                  );
      else
            --Gets the Measure Table
            TESTRESULTS_CRUD.GETMEASURE(
                                      pc_MeasureCursor => pc_MeasureCursor,
                                      pc_MeasureDetailCursor => pc_MeasureDetailCursor,
                                      PI_SKUID => pi_SKUId,
                                      PS_CERTIFICATENUMBER => ps_CertificateNumber,
                                      PI_CERTIFICATIONTYPEID => pi_CertificationTypeID,
                                      PI_CERTIFICATENUMBERID => pi_CertificateNumberID
                                    );
           TESTRESULTS_CRUD.GETPLUNGER(
                                        PC_PLUNGERHDRCURSOR => PC_PLUNGERHDRCURSOR,
                                        PC_PLUNGERDTLCURSOR => PC_PLUNGERDTLCURSOR,
                                        PI_SKUID => pi_SKUId,
                                        PS_CERTIFICATENUMBER => ps_CertificateNumber,
                                        PI_CERTIFICATIONTYPEID => pi_CertificationTypeID,
                                        PI_CERTIFICATENUMBERID => pi_CertificateNumberID
                                      );
           TESTRESULTS_CRUD.GETTREADWEAR(
                                      PC_TREADWEARHDRCURSOR => PC_TREADWEARHDRCURSOR,
                                      PC_TREADWEARDTLCURSOR => PC_TREADWEARDTLCURSOR,
                                      PI_SKUID => pi_SKUId,
                                      PS_CERTIFICATENUMBER => ps_CertificateNumber,
                                      PI_CERTIFICATIONTYPEID => pi_CertificationTypeID,
                                      PI_CERTIFICATENUMBERID => pi_CertificateNumberID
                                    );
           TESTRESULTS_CRUD.GETBEADUNSEAT(
                                    PC_BEADUNSEATHDRCURSOR => PC_BEADUNSEATHDRCURSOR,
                                    PC_BEADUNSEATDTLCURSOR => PC_BEADUNSEATDTLCURSOR,
                                    PI_SKUID => PI_SKUID,
                                    PS_CERTIFICATENUMBER => PS_CERTIFICATENUMBER,
                                    PI_CERTIFICATIONTYPEID => PI_CERTIFICATIONTYPEID,
                                    PI_CERTIFICATENUMBERID => pi_CertificateNumberID
                                  );
           TESTRESULTS_CRUD.GETENDURANCE(
                                    PC_ENDURANCEHDRCURSOR => PC_ENDURANCEHDRCURSOR,
                                    PC_ENDURANCEDTLCURSOR => PC_ENDURANCEDTLCURSOR,
                                    PI_SKUID => PI_SKUID,
                                    PS_CERTIFICATENUMBER => PS_CERTIFICATENUMBER,
                                    PI_CERTIFICATIONTYPEID => PI_CERTIFICATIONTYPEID,
                                    PI_CERTIFICATENUMBERID => pi_CertificateNumberID
                                  );
            TESTRESULTS_CRUD.GETHIGHSPEED(
                            PC_HIGHSPEEDCURSOR => PC_HIGHSPEEDCURSOR,
                            PC_HIGHSPEEDDETAILCURSOR => PC_HIGHSPEEDDETAILCURSOR,
                            PC_HSSPEEDTESTDETAIL => PC_HSSPEEDTESTDETAIL,
                            PI_SKUID => PI_SKUID,
                            PS_CERTIFICATENUMBER => PS_CERTIFICATENUMBER,
                            PI_CERTIFICATIONTYPEID => PI_CERTIFICATIONTYPEID,
                            PI_CERTIFICATENUMBERID => pi_CertificateNumberID);
               TESTRESULTS_CRUD.GETSOUND(
                                          PC_SOUNDHDRCURSOR => PC_SOUNDHDRCURSOR,
                                          PC_SOUNDDETAILCURSOR => PC_SOUNDDETAILCURSOR,
                                          PI_SKUID => PI_SKUID,
                                          PS_CERTIFICATENUMBER => PS_CERTIFICATENUMBER,
                                          PI_CERTIFICATIONTYPEID => PI_CERTIFICATIONTYPEID,
                                          PI_CERTIFICATENUMBERID => pi_CertificateNumberID
                                        );
                TESTRESULTS_CRUD.GETWETGRIP(
                                          PC_WETGRIPHDRCURSOR => PC_WETGRIPHDRCURSOR,
                                          PC_WETGRIPDETAILCURSOR => PC_WETGRIPDETAILCURSOR,
                                          PI_SKUID => PI_SKUID,
                                          PS_CERTIFICATENUMBER => PS_CERTIFICATENUMBER,
                                          PI_CERTIFICATIONTYPEID => PI_CERTIFICATIONTYPEID,
                                          PI_CERTIFICATENUMBERID => pi_CertificateNumberID
                                        );
      end if;
     EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:=  '- GetTestresults. There is at least one parameters null.'  ;
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.GetTestresults',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20005,ls_ErrorMsg);
         when li_ParametersAreInvalid then
            ls_ErrorMsg:=  sqlerrm || '- GetTestresults. There is at least one parameters invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.GetTestresults',
                AX_RECORDDATA    => 'There is at least one parameters invalid.',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  '- GetTestresults. An error have ocurred.(when others)' || sqlerrm;
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.GetTestresults',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);
  end  GetTestResults;
  
  PROCEDURE GetMeasure(pc_MeasureCursor out retCursor,
                         pc_MeasureDetailCursor out retCursor,
                         pi_SKUId in number,
                         ps_CertificateNumber in varchar2,
                         pi_CertificationTypeID in Number,
                         pi_CertificateNumberID in Number) as
   /******************************************************************************
     NAME:       GetMeasure
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0
     1.1        10/2/2012    Harini         1.Added Lpad(matl_num) in the select list
     1.2        10/18/2012   Harini         1.Added Operation in the select list
     1.3        11/04/2013   Harini         1.Added MFGWWYY and GTSpec in the select list
    ******************************************************************************/
      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      li_MeasureId  MeasureHdr.measureid%type;
      li_CertificationTypeId  certificationtype.certificationtypeid%TYPE;
      ls_MeasureExists varchar2(1);
    begin
          if pi_CertificationTypeID is null or ps_CertificateNumber is null  then
                raise li_ParametersAreNull;
          end if;
          if  pi_CertificationTypeID <=0  or ps_CertificateNumber  ='' then
                raise li_ParametersAreInvalid;
          end if;
            --Return Measure records
                  Open pc_MeasureCursor FOR
                  SELECT MEASUREID as Mea_ID,
                        PROJECTNUMBER as ProjectNum,
                        TIRENUMBER as TireNum,
                        TESTSPEC as TestSpec,
                        COMPLETIONDATE,
                        INFLATIONPRESSURE,
                        MOLDDESIGN,
                        RIMWIDTH,
                        DOTSERIALNUMBER,
                        DIAMETER,
                        AVGSECTIONWIDTH,
                        AVGOVERALLWIDTH,
                        MAXOVERALLWIDTH,
                        SIZEFACTOR,
                        MOUNTTIME,
                        MOUNTTEMP,
                        SERIALDATE,
                        m.MFGWWYY,
                        ENDTIME,
                        ACTSIZEFACTOR,
                        m.CERTIFICATIONTYPEID,
                        CERTIFICATENUMBER,
                        STARTINFLATIONPRESSURE,
                        ENDINFLATIONPRESSURE,
                        ADJUSTMENT,
                        CIRCUMFERENCE,
                        NOMINALDIAMETER,
                        NOMINALWIDTH,
                        NOMINALWIDTHPASSFAIL,
                        NOMINALWIDTHDIFERENCE,
                        NOMINALWIDTHTOLERANCE,
                        MAXOVERALLDIAMETER,
                        MINOVERALLDIAMETER,
                        OVERALLWIDTHPASSFAIL,
                        OVERALLDIAMETERPASSFAIL,
                        DIAMETERDIFERENCE,
                        DIAMETERTOLERANCE,
                        TEMPRESISTANCEGRADING,
                        TENSILESTRENGHT1,
                        TENSILESTRENGHT2,
                        ELONGATION1,
                        ELONGATION2,
                        TENSILESTRENGHTAFTERAGE1,
                        TENSILESTRENGHTAFTERAGE2,
                        m.sku,
                        LPAD(m.Matl_Num,18,0) Matl_Num,   -- As per PRJ3617,added Matl_Num in select list
                        m.OperNum            Operation,         -- As per PRJ3617,added Operation in select list
                        m.GTSpec
                  FROM  Certificate ce
                              inner join MeasureHdr m on
                                   ce.certificateid = m.certificateid and
                                   ce.certificationtypeid = m.certificationtypeid
                  WHERE m.certificationtypeid = pi_CertificationTypeID AND
                        lower(ce.certificatenumber)   = lower(ps_CertificateNumber) AND
                        ce.certificateid = pi_CertificateNumberID;
                   --Get's the MeasureId Based on the Certification Type ID,SKU and CertificateNumber
                  li_MeasureId :=  TESTRESULTS_CRUD.GETMEASUREID(
                                        PS_CERTIFICATENUMBER => ps_certificatenumber,
                                        PI_CERTIFICATIONTYPEID => pi_CertificationTypeID,
                                        PI_CERTIFICATENUMBERID => pi_CertificateNumberID
                                      );
                      --Return the Measure Detail records
                      Open pc_measuredetailcursor FOR
                      SELECT SECTIONWIDTH, OVERALLWIDTH, MEASUREID as Mea_ID,Iteration
                      FROM  MeasureDtl MD
                      WHERE MD.MEASUREID = li_MeasureId
                      ORDER BY Iteration ASC;
    EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:=  sqlerrm || '- GetMeasure. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.GetMeasure',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20005,ls_ErrorMsg);
         when li_ParametersAreInvalid then
            ls_ErrorMsg:=  sqlerrm || '- GetMeasure.  There is at least one parameters invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.GetMeasure',
                AX_RECORDDATA    => 'There is at least one parameters invalid.',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || '- GetMeasure.  An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.GetMeasure',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
                 raise_application_error (-20007,ls_ErrorMsg);
    end GetMeasure;
    
  Procedure GetPlunger(  pc_PlungerHdrCursor out retCursor,
                         pc_PlungerDtlCursor out retCursor,
                         pi_SKUId in number,
                         ps_CertificateNumber in varchar2,
                         pi_CertificationTypeID in Number,
                         pi_CertificateNumberID in Number) as
   /******************************************************************************
     NAME:       GetPlunger
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0
     1.1        10/2/2012     Harini         1.Added Lpad(matl_num) in the select list
     1.2        10/18/2012    Harini         1.Added Operation in the select list
     1.3        11/04/2013    Harini         1.Added MFGWWYY and GTSpec in the select list
    ******************************************************************************/
      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      li_PlungerId  plungerhdr.plungerid%type;
      li_CertificationTypeId  certificationtype.certificationtypeid%TYPE;
      ls_MeasureExists varchar2(1);
    begin
          if pi_CertificationTypeID is null or ps_CertificateNumber is null  then
                raise li_ParametersAreNull;
          end if;
          if  pi_CertificationTypeID <=0  or ps_CertificateNumber  ='' then
                raise li_ParametersAreInvalid;
          end if;
            --Return Measure records
                  Open pc_PlungerHdrCursor FOR
                  SELECT PLUNGERID as PLG_ID,
                         PROJECTNUMBER as ProjectNum,
                         TIRENUMBER as TireNum,
                         TESTSPEC as TestSpec,
                         COMPLETIONDATE,
                         DOTSERIALNUMBER,
                         AVGBREAKINGENERGY,
                         PASSYN,
                         p.CERTIFICATIONTYPEID,
                         CERTIFICATENUMBER,
                         SERIALDATE,
                         p.MFGWWYY,
                         MINPLUNGER,
                         p.sku,
                         LPAD(p.Matl_Num,18,0) Matl_Num,   -- As per PRJ3617,added Matl_Num in select list
                         p.OperNum             Operation,         -- As per PRJ3617,added Operation in select list
                         p.GTSpec
                  FROM  Certificate ce
                              inner join PLUNGERHDR p on
                                   ce.certificateid = p.certificateid and
                                   ce.certificationtypeid = p.certificationtypeid
                  WHERE
                        p.certificationtypeid         = pi_CertificationTypeID AND
                        lower(ce.certificatenumber)   = lower(ps_certificatenumber) AND
                        ce.certificateid = pi_CertificateNumberID;
                   --Get's the MeasureId Based on the Certification Type ID,SKU and CertificateNumber
                  li_PlungerId :=  TESTRESULTS_CRUD.GETPlungerID(
                                        PS_CERTIFICATENUMBER => ps_certificatenumber,
                                        PI_CERTIFICATIONTYPEID => pi_CertificationTypeID,
                                        PI_CERTIFICATENUMBERID => pi_CertificateNumberID
                                      );
                      --Return the Measure Detail records
                      Open pc_PlungerDtlCursor FOR
                      SELECT PLUNGERID as PLG_ID,BREAKINGENERGY ,ITERATION
                      FROM  PLUNGERDTL p
                      WHERE p.PLUNGERID = li_PlungerId
                      ORDER BY iteration ASC;
    EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:=  sqlerrm || '- GetPlunger. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.GetPlunger',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20005,ls_ErrorMsg);
         when li_ParametersAreInvalid then
            ls_ErrorMsg:=  sqlerrm || '- GetPlunger.  There is at least one parameters invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.GetPlunger',
                AX_RECORDDATA    => 'There is at least one parameters invalid.',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
          raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || '- GetPlunger. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.GetPlunger',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
                 raise_application_error (-20007,ls_ErrorMsg);
    end GetPlunger;
    
  Procedure GetTreadWear(  pc_TreadWearHdrCursor out retCursor,
                             pc_TreadWearDtlCursor out retCursor,
                             pi_SKUId in number,
                             ps_CertificateNumber in varchar2,
                             pi_CertificationTypeID in Number,
                             pi_CertificateNumberID in Number) as
  /******************************************************************************
     NAME:       GetTreadWear
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0
     1.1        10/2/2012     Harini         1.Added Lpad(matl_num) in the select list
     1.2        10/18/2012    Harini         1.Added Operation in the select list
     1.3        11/04/2013    Harini         1.Added MFGWWYY and GTSpec in the select list
    ******************************************************************************/
      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      li_PlungerId  plungerhdr.plungerid%type;
      li_CertificationTypeId  certificationtype.certificationtypeid%TYPE;
      ls_MeasureExists varchar2(1);
    begin
          if pi_CertificationTypeID is null or ps_CertificateNumber is null  then
                raise li_ParametersAreNull;
          end if;
          if  pi_CertificationTypeID <=0  or ps_CertificateNumber  ='' then
                raise li_ParametersAreInvalid;
          end if;
            --Return Measure records
                  Open pc_TreadWearHdrCursor FOR
                  SELECT  TREADWEARID as TW_ID,
                          PROJECTNUMBER as ProjectNum,
                          TIRENUMBER as TireNum,
                          TESTSPEC as TestSpec,
                          COMPLETIONDATE,
                          DOTSERIALNUMBER,
                          LOWESTWEARBAR,
                          PASSYN,
                          t.CERTIFICATIONTYPEID,
                          CERTIFICATENUMBER,
                          SERIALDATE,
                          t.MFGWWYY,
                          INDICATORSREQUIREMENT,
                          t.sku,
                          LPAD(t.Matl_Num,18,0) Matl_Num,  -- As per PRJ3617,added Matl_Num in select list 
                          t.OperNum            Operation,         -- As per PRJ3617,added Operation in select list
                          t. GTSpec
                  FROM  Certificate ce
                              inner join  TREADWEARHDR t on
                                   ce.certificateid = t.certificateid and
                                   ce.certificationtypeid = t.certificationtypeid
                  WHERE
                        t.certificationtypeid = pi_CertificationTypeID AND
                        lower(ce.certificatenumber)   = lower(ps_certificatenumber) AND
                        ce.certificateid = pi_CertificateNumberID;
                   --Get's the MeasureId Based on the Certification Type ID,SKU and CertificateNumber
                  li_PlungerId := TESTRESULTS_CRUD.GetTreadWearID(
                                        PS_CERTIFICATENUMBER => ps_certificatenumber,
                                        PI_CERTIFICATIONTYPEID => pi_CertificationTypeID,
                                        PI_CERTIFICATENUMBERID => pi_CertificateNumberID
                                      );
                      --Return the Measure Detail records
                      Open pc_TreadWearDtlCursor FOR
                      SELECT  TREADWEARID as TW_ID, WEARBARHEIGHT ,ITERATION
                      FROM  TREADWEARDTL td
                      WHERE td.treadwearid = li_PlungerId
                      ORDER BY iteration ASC;
    EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:=  sqlerrm || '-GetTreadWear. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.GetTreadWear',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20005,ls_ErrorMsg);
         when li_ParametersAreInvalid then
            ls_ErrorMsg:=  sqlerrm || '-GetTreadWear.  There is at least one parameters invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.GetTreadWear',
                AX_RECORDDATA    => 'There is at least one parameters invalid.',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
          raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || '-GetTreadWear.  An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.GetTreadWear',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
                raise_application_error (-20007,ls_ErrorMsg);
    end GetTreadWear;
    
  PROCEDURE GetBeadUnseat(pc_BeadUnseatHdrCursor out retCursor,
                          pc_BeadUnseatDtlCursor out retCursor,
                          pi_SKUId in number,
                          ps_CertificateNumber in varchar2,
                          pi_CertificationTypeID in Number,
                          pi_CertificateNumberID in Number) as
    /******************************************************************************
     NAME:       GetBeadUnseat
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0
     1.1        10/2/2012     Harini         1.Added Lpad(matl_num) in the select list
     1.2        10/18/2012    Harini         1.Added Operation in the select list
     1.3        11/04/2013    Harini         1.Added MFGWWYY and GTSpec in the select list
    ******************************************************************************/
      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      li_BeadUnseatId  beadunseathdr.beadunseatid%type;
      li_CertificationTypeId  certificationtype.certificationtypeid%TYPE;
      ls_MeasureExists varchar2(1);
    begin
          if pi_SKUId is null or pi_CertificationTypeID is null or ps_CertificateNumber is null  then
                raise li_ParametersAreNull;
          end if;
          if  pi_SKUId <=0 or pi_CertificationTypeID <=0  or ps_CertificateNumber  ='' then
                raise li_ParametersAreInvalid;
          end if;
            --Return Measure records
                  Open pc_BeadUnseatHdrCursor FOR
                  SELECT BEADUNSEATID as BU_ID,
                        PROJECTNUMBER as ProjectNum,
                        TIRENUMBER as TireNum,
                        TESTSPEC as TestSpec,
                        COMPLETIONDATE,
                        DOTSERIALNUMBER,
                        LOWESTUNSEATVALUE,
                        PASSYN,
                        bs.CERTIFICATIONTYPEID,
                        CERTIFICATENUMBER,
                        SERIALDATE,
                        bs.MFGWWYY,
                        bs.sku,
                        LPAD(bs.Matl_Num,18,0) Matl_Num,  -- As per PRJ3617,added Matl_Num in select list
                        bs.OperNum             Operation,  -- As per PRJ3617,added Operation in select list
                        bs.GTSpec
                 FROM  Certificate ce
                              inner join BEADUNSEATHDR bs on
                                   ce.certificateid = bs.certificateid and
                                   ce.certificationtypeid = bs.certificationtypeid
                  WHERE
                        bs.certificationtypeid = pi_CertificationTypeID AND
                        lower(ce.certificatenumber)   = lower(ps_certificatenumber) AND
                        ce.certificateid = pi_CertificateNumberID;
                   --Get's the MeasureId Based on the Certification Type ID,SKU and CertificateNumber
                  li_BeadUnseatId :=  TESTRESULTS_CRUD.GetBeadUnseatID(
                                        PS_CERTIFICATENUMBER => ps_certificatenumber,
                                        PI_CERTIFICATIONTYPEID => pi_CertificationTypeID,
                                        PI_CERTIFICATENUMBERID => pi_CertificateNumberID
                                      );
                      --Return the Measure Detail records
                      Open pc_BeadUnseatDtlCursor FOR
                      SELECT BEADUNSEATID as BU_ID, UNSEATFORCE,ITERATION
                      FROM BEADUNSEATDTL bs
                      WHERE bs.BEADUNSEATID = li_BeadUnseatId
                      ORDER BY iteration ASC;
    EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:=  sqlerrm || '- GetBeadUnseat. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.GetBeadUnseat',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20005,ls_ErrorMsg);
         when li_ParametersAreInvalid then
            ls_ErrorMsg:=  sqlerrm || '- GetBeadUnseat. There is at least one parameters invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.GetBeadUnseat',
                AX_RECORDDATA    => 'There is at least one parameters invalid.',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
          raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || '- GetBeadUnseat. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.GetBeadUnseat',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
                 raise_application_error (-20007,ls_ErrorMsg);
  end GetBeadUnseat ;
  
  procedure GetENDURANCE(pc_EnduranceHdrCursor out retCursor,
                         pc_EnduranceDtlCursor out retCursor,
                         pi_SKUID in Number,
                         ps_CertificateNumber in varchar,
                         pi_CertificationTypeID in Number,
                         pi_CertificateNumberID in Number) as
    /******************************************************************************
     NAME:       GetENDURANCE
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0
     1.1        10/2/2012     Harini         1.Added Lpad(matl_num) in the select list
     1.2        10/18/2012    Harini         1.Added Operation in the select list
     1.3        11/04/2013   Harini          1.Added GTSpec in the select list
    ******************************************************************************/
  --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      li_ParameterIsInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParameterIsInvalid,-20006);
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      li_certificationTypeId  CERTIFICATIONTYPE.CERTIFICATIONTYPEID%type;
      li_EnduranceId  EnduranceHdr.ENDURANCEID%type;
       ls_EnduranceExists varchar2(1);
  begin
        if pi_SKUID is null OR ps_CertificateNumber IS NULL OR  pi_CertificationTypeID IS NULL then
              raise li_ParametersAreNull;
        end if;
        if pi_SKUID <= 0 OR ps_CertificateNumber = '' OR pi_CertificationTypeID <= 0 then
              raise li_ParameterIsInvalid;
        end if;
            Open pc_EnduranceHdrCursor FOR
            SELECT    ENDURANCEID  AS END_ID,
                      PROJECTNUMBER as ProjectNum,
                      TIRENUMBER as TireNum,
                      TESTSPEC as TestSpec,
                      COMPLETIONDATE,
                      DOTSERIALNUMBER,
                      MFGWWYY,
                      PRECONDSTARTDATE,
                      PRECONDSTARTTEMP,
                      RIMDIAMETER,
                      RIMWIDTH,
                      PRECONDENDDATE,
                      PRECONDENDTEMP,
                      INFLATIONPRESSURE,
                      BEFOREDIAMETER,
                      AFTERDIAMETER,
                      BEFOREINFLATION,
                      AFTERINFLATION,
                      WHEELPOSITION,
                      WHEELNUMBER as WheelNum,
                      FINALTEMP,
                      FINALDISTANCE,
                      FINALINFLATION,
                      POSTCONDSTARTDATE,
                      POSTCONDENDDATE,
                      POSTCONDENDTEMP,
                      PASSYN,
                      e.CERTIFICATIONTYPEID,
                      CERTIFICATENUMBER,
                      SERIALDATE,
                      PRECONDTIME,
                      POSTCONDTIME,
                      DIAMETERTESTDRUM,
                      PRECONDTEMP,
                      INFLATIONPRESSUREREADJUSTED,
                      CIRCUNFERENCEBEFORETEST,
                      RESULTPASSFAIL,
                      ENDURANCEHOURS,
                      POSSIBLEFAILURESFOUND,
                      CIRCUNFERENCEAFTERTEST,
                      OUTERDIAMETERDIFERENCE,
                      ODDIFERENCETOLERANCE,
                      SERIENOM,
                      FINALJUDGEMENT,
                      APPROVER,
                      e.sku,
                      LPAD(e.Matl_Num,18,0) Matl_Num, -- As per PRJ3617,added Matl_Num in the select list
                      e.lowpressurestartinflation,
                      e.lowpressureendinflation,
                      e.lowpressureendtemp,
                      e.OperNum      Operation,         -- As per PRJ3617,added Operation in select list
                      e.GTSpec
            FROM  Certificate ce
                              inner join ENDURANCEHdr  e on
                                ce.certificateid = e.certificateid and
                                ce.certificationtypeid = e.certificationtypeid
            WHERE lower(ce.CERTIFICATENUMBER)   = lower(ps_CertificateNumber) And
                  e.certificationtypeid = pi_CertificationTypeID AND
                  ce.certificateid = pi_CertificateNumberID ;
            li_EnduranceId:=  testresults_crud.GetEnduranceID(ps_CertificateNumber=>ps_CertificateNumber,
                                                                 pi_CertificationTypeId=>pi_CertificationTypeID,
                                                                 PI_CERTIFICATENUMBERID => pi_CertificateNumberID);
                  Open pc_EnduranceDtlCursor FOR
                  SELECT
                        ed.TESTSTEP,
                        ed.TIMEINMIN,
                        ed.SPEED,
                        ed.TOTMILES,
                        ed.LOAD,
                        ed.LOADPERCENT,
                        ed.SETINFLATION,
                        ed.AMBTEMP,
                        ed.INFPRESSURE,
                        ed.STEPCOMPLETIONDATE,
                        ed.ENDURANCEID AS END_ID
                  FROM  EnduranceDtl ed
                  WHERE ed.enduranceid = li_EnduranceId
                  ORDER BY ed.TESTSTEP ASC;
  EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:= sqlerrm || '- GetENDURANCE. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.GetENDURANCE',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20005,ls_ErrorMsg);
         when li_ParameterIsInvalid then
            ls_ErrorMsg:= sqlerrm || '- GetENDURANCE. There is one parameters is invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.GetENDURANCE',
                AX_RECORDDATA    => 'ps_sku is parameters invalid..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:= '- GetENDURANCE. An error have ocurred.(when others)' || sqlerrm ;
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.GetENDURANCE',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
            raise_application_error (-20007,ls_ErrorMsg);
 end GetENDURANCE;
 
  PROCEDURE GetHighSpeed(pc_HighSpeedCursor out retCursor,
                         pc_HighSpeedDetailCursor out retCursor,
                         pc_HSSpeedTestDetail out retCursor,
                         pi_SKUId in number,
                         ps_CertificateNumber in varchar2,
                         pi_CertificationTypeID in Number,
                         pi_CertificateNumberID in Number) as
    /******************************************************************************
     NAME:       GetHighSpeed
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0
     1.1        10/2/2012     Harini         1.Added Lpad(matl_num) in the select list
     1.2        10/18/2012    Harini         1.Added Operation in the select list
     1.3        11/04/2013    Harini         1.Added GTSpec in the select list
    ******************************************************************************/
      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      li_HighSpeedID  highspeedhdr.highspeedid %type;
      li_CertificationTypeId  certificationtype.certificationtypeid%TYPE;
      ls_MeasureExists varchar2(1);
    begin
          if pi_CertificationTypeID is null or ps_CertificateNumber is null  then
                raise li_ParametersAreNull;
          end if;
          if  pi_CertificationTypeID <=0  or ps_CertificateNumber  ='' then
                raise li_ParametersAreInvalid;
          end if;
            --Return Measure records
                  Open pc_HighSpeedCursor FOR
                  SELECT HIGHSPEEDID as HS_ID,
                        PROJECTNUMBER as ProjectNum,
                        TIRENUM as TireNum,
                        TESTSPEC as TestSpec,
                        COMPETIONDATE,
                        DOTSERIALNUMBER,
                        MFGWWYY,
                        PRECONDSTARTDATE,
                        PRECONDSARTTEMP,
                        RIMDIAMETER,
                        RIMWIDTH,
                        PRECONDENDDATE,
                        PRECONDENDTEMP,
                        INFLATIONPRESSURE,
                        BEFOREDIAMETER,
                        AFTERDIAMETER,
                        BEFOREINFLATION,
                        AFTERINFLATION,
                        WHEELPOSITION,
                        WHEELNUMBER,
                        FINALTEMP,
                        FINALDISTANCE,
                        FINALINFLATION,
                        POSTCONDSTARTDATE,
                        POSTCONDENDDATE,
                        POSTCONDENDTEMP,
                        PASSYN,
                        SERIALDATE,
                        POSTCONDTIME,
                        m.CERTIFICATIONTYPEID,
                        CERTIFICATENUMBER,
                        DIAMETERTESTDRUM,
                        PRECONDTIME,
                        PRECONDTEMP,
                        INFLATIONPRESSUREREADJUSTED,
                        CIRCUNFERENCEBEFORETEST,
                        WHEELSPEEDRPM,
                        WHEELSPEEDKMH,
                        CIRCUNFERENCEAFTERTEST,
                        ODDIFERENCE,
                        ODDIFERENCETOLERANCE,
                        SERIENOM,
                        FINALJUDGEMENT,
                        APPROVER,
                        PASSATKMH,
                        SPEEDTTESTPASSFAIL,
                        SPEEDTOTALTIME,
                        MAXSPEED,
                        MAXLOAD,
                        m.sku,
                        LPAD(m.Matl_Num,18,0) Matl_Num,  -- As per PRJ3617,added Matl_Num in the select list
                        m.OperNum             Operation,  -- As per PRJ3617,added Operation in select list
                        m.GTSpec
                  FROM  Certificate ce
                              inner join HIGHSPEEDHDR  m on
                                   ce.certificateid = m.certificateid and
                                   ce.certificationtypeid = m.certificationtypeid
                  WHERE
                        m.certificationtypeid = pi_CertificationTypeID AND
                        lower(ce.certificatenumber)   = lower(ps_certificatenumber) AND
                        ce.certificateid = pi_CertificateNumberID;
                   --Get's the MeasureId Based on the Certification Type ID,SKU and CertificateNumber
                  li_HighSpeedID := TESTRESULTS_CRUD.GetHighSpeedId(
                                        PS_CERTIFICATENUMBER => ps_certificatenumber,
                                        PI_CERTIFICATIONTYPEID => pi_CertificationTypeID,
                                        PI_CERTIFICATENUMBERID => pi_CertificateNumberID
                                      );
                      --Return the Measure Detail records
                      Open pc_HighSpeedDetailCursor FOR
                      SELECT TESTSTEP,
                              TIMEINMIN,
                              SPEED,
                              TOTMILES,
                              LOAD,
                              LOADPERCENT,
                              SETINFLATION,
                              AMBTEMP,
                              INFPRESSURE,
                              STEPCOMPLETIONDATE,
                              HIGHSPEEDID  as HS_ID
                      FROM  HIGHSPEEDDTL h
                      WHERE h.HIGHSPEEDID = li_HighSpeedID
                      ORDER BY teststep;
                     Open pc_HSSpeedTestDetail FOR
                     SELECT ITERATION,
                            TIME,
                            SPEED,
                            HIGHSPEEDID as HS_ID
                    FROM SPEEDTESTDETAIL s
                    WHERE s.HIGHSPEEDID = li_HighSpeedID
                    ORDER BY iteration ASC;
    EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:=  sqlerrm || '- GetHighSpeed . There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.GetHighSpeed',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20005,ls_ErrorMsg);
         when li_ParametersAreInvalid then
            ls_ErrorMsg:=  sqlerrm || '- GetHighSpeed . There is at least one parameters invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.GetHighSpeed',
                AX_RECORDDATA    => 'There is at least one parameters invalid.',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
          raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || ' An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.GetHighSpeed',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
              raise_application_error (-20007,ls_ErrorMsg);
    END GetHighSpeed;
    
  PROCEDURE GetSound(pc_SoundHDRCursor out retCursor,
                         pc_SoundDetailCursor out retCursor,
                         pi_SKUId in number,
                         ps_CertificateNumber in varchar2,
                         pi_CertificationTypeID in Number,
                         pi_CertificateNumberID in Number) as
   /******************************************************************************
     NAME:       GetSound
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0
     1.1        10/18/2012    Harini         1.Added Operation in the select list
     1.2        11/04/2013    Harini         1.Added MFGWWYY and GTSpec in the select list
    ******************************************************************************/
   --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      li_SoundID  soundhdr.soundid%type;
      li_CertificationTypeId  certificationtype.certificationtypeid%TYPE;
  begin
         if pi_CertificationTypeID is null or ps_CertificateNumber is null  then
                raise li_ParametersAreNull;
          end if;
          if  pi_CertificationTypeID <=0  or ps_CertificateNumber  ='' then
                raise li_ParametersAreInvalid;
          end if;
          Open pc_SoundHDRCursor for
          SELECT SOUNDID,
                  PROJECTNUMBER,
                  TIRENUMBER,
                  TESTSPEC,
                  TESTREPORTNUMBER,
                  MANUFACTUREANDBRAND,
                  TIRECLASS,
                  CATEGORYOFUSE,
                  DATEOFTEST,
                  TESTVEHICULE,
                  TESTVEHICULEWHEELBASE,
                  LOCATIONOFTESTTRACK,
                  DATETRACKCERTIFTOISO,
                  TIRESIZEDESIGNATION,
                  TIRESERVICEDESCRIPTION,
                  TESTMASS_FRONTL,
                  TESTMASS_FRONTR,
                  TESTMASS_REARL,
                  TESTMASS_REARR,
                  TIRELOADINDEX_FRONTL,
                  TIRELOADINDEX_FRONTR,
                  TIRELOADINDEX_REARL,
                  TIRELOADINDEX_REARR,
                  INFLATIONPRESSURECO_FRONTL,
                  INFLATIONPRESSURECO_FRONTR,
                  INFLATIONPRESSURECO_REARL,
                  INFLATIONPRESSURECO_REARR,
                  TESTRIMWIDTHCODE,
                  TEMPMEASURESENSORTYPE,
                  s.CERTIFICATIONTYPEID,
                  CERTIFICATENUMBER,
                  s.OperNum      Operation,         -- As per PRJ3617,added Operation in select list
                  s.MFGWWYY,
                  s.GTSpec
             FROM  Certificate ce
                              inner join SOUNDHDR s on
                                   ce.certificateid = s.certificateid and
                                   ce.certificationtypeid = s.certificationtypeid
            WHERE
                  S.certificationtypeid = pi_CertificationTypeID AND
                  lower(ce.certificatenumber)   = lower(ps_certificatenumber) AND
                  ce.certificateid = pi_CertificateNumberID;
               li_SoundID:=   TESTRESULTS_CRUD.GETSoundHDRID(
                                        PS_CERTIFICATENUMBER => PS_CERTIFICATENUMBER,
                                        PI_CERTIFICATIONTYPEID => PI_CERTIFICATIONTYPEID,
                                        PI_CERTIFICATENUMBERID => pi_CertificateNumberID
                                      );
              Open pc_SoundDetailCursor for
              SELECT ITERATION,
                TESTSPEED,
                DIRECTIONOFRUN,
                SOUNDLEVELLEFT,
                SOUNDLEVELRIGHT,
                AIRTEMP,
                TRACKTEMP,
                SOUNDLEVELLEFT_TEMPCORRECTED,
                SOUNDLEVELRIGHT_TEMPCORRECTED,
                SOUNDID
              FROM SOUNDDETAIL
              WHERE SoundID = li_SoundID
              ORDER BY iteration ASC;
        EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:=  sqlerrm || '- GetSound.  There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.GetSound',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20005,ls_ErrorMsg);
         when li_ParametersAreInvalid then
            ls_ErrorMsg:=  sqlerrm || '- GetSound. There is at least one parameters invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.GetSound',
                AX_RECORDDATA    => 'There is at least one parameters invalid.',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || '- GetSound. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.GetSound',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
                 raise_application_error (-20007,ls_ErrorMsg);
  end GetSound;
  
   PROCEDURE GetWetGrip(pc_WetGripHDRCursor out retCursor,
                         pc_WetGripDetailCursor out retCursor,
                         pi_SKUId in number,
                         ps_CertificateNumber in varchar2,
                         pi_CertificationTypeID in Number,
                         pi_CertificateNumberID in Number) as
    /******************************************************************************
     NAME:       GetWetGrip
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0
     1.1        10/18/2012    Harini         1.Added Operation in the select list
     1.2        11/04/2013    Harini         1.Added MFGWWYY and GTSpec in the select list
    ******************************************************************************/
    --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      li_WetGripID  WetGripHDR.WetGRIPID%TYPE;
      li_CertificationTypeId  certificationtype.certificationtypeid%TYPE;
  begin
         if pi_CertificationTypeID is null or ps_CertificateNumber is null  then
                raise li_ParametersAreNull;
          end if;
          if  pi_CertificationTypeID <=0  or ps_CertificateNumber  ='' then
                raise li_ParametersAreInvalid;
          end if;
          Open PC_WETGRIPHDRCURSOR For
          SELECT WETGRIPID ,
                  PROJECTNUMBER,
                  TIRENUMBER,
                  TESTSPEC,
                  DATEOFTEST,
                  TESTVEHICLE,
                  LOCATIONOFTESTTRACK,
                  TESTTRACKCHARACTERISTICS,
                  ISSUEBY,
                  METHODOFCERTIFICATION,
                  TESTTIREDETAILS,
                  TIRESIZEANDSERVICEDESC,
                  TIREBRANDANDTRADEDESC,
                  REFERENCEINFLATIONPRESSURE,
                  TESTRIMWITHCODE,
                  TEMPMEASURESENSORTYPE,
                  IDENTIFICATIONSRTT,
                  TESTTIRELOAD_SRTT,
                  TESTTIRELOAD_CANDIDATE,
                  TESTTIRELOAD_CONTROL,
                  WATERDEPTH_SRTT,
                  WATERDEPTH_CANDIDATE,
                  WATERDEPTH_CONTROL,
                  WETTEDTRACKTEMPAVG,
                  w.CERTIFICATIONTYPEID,
                  CERTIFICATENUMBER,
                  w.OperNum      Operation,         -- As per PRJ3617,added Operation in select list
                  w.MFGWWYY,
                  w.GTSpec
             FROM  Certificate ce
                              inner join WETGRIPHDR  w on
                                   ce.certificateid = w.certificateid and
                                   ce.certificationtypeid = w.certificationtypeid
           WHERE
                 w.certificationtypeid = pi_CertificationTypeID AND
                 lower(ce.certificatenumber)   = lower(ps_certificatenumber) AND
                 ce.certificateid = pi_CertificateNumberID;
               li_WetGripID:=   TESTRESULTS_CRUD.GETWETGRIPHDRID(
                                        PS_CERTIFICATENUMBER => PS_CERTIFICATENUMBER,
                                        PI_CERTIFICATIONTYPEID => PI_CERTIFICATIONTYPEID,
                                        PI_SKUID => PI_SKUID,
                                        PI_CERTIFICATENUMBERID => pi_CertificateNumberID
                                      );
            oPEN pc_WetGripDetailCursor FOR
            SELECT ITERATION,
              TESTSPEED,
              DIRECTIONOFRUN,
              SRTT,
              CANDIDATETIRE,
              PEAKBREAKFORCECOEFICIENT,
              MEANFULLYDEVELOPEDDECELERATION,
              WETGRIPINDEX,
              COMMENTS,
              WETGRIPID
            FROM WETGRIPDETAIL
            WHERE WETGRIPID = li_WetGripID
            ORDER BY iteration ASC;
        EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:=  sqlerrm || '- GetWetGrip. GetWetGrip.There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.GetWetGrip',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20005,ls_ErrorMsg);
         when li_ParametersAreInvalid then
            ls_ErrorMsg:=  sqlerrm || '- GetWetGrip. GetWetGrip.There is at least one parameters invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.GetWetGrip',
                AX_RECORDDATA    => 'There is at least one parameters invalid.',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || '- GetWetGrip. GetWetGrip.An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.GetWetGrip',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
                 raise_application_error (-20007,ls_ErrorMsg);
  end GetWetGrip;
  
 procedure Product_Save(  pi_SKUID in   NUMBER,
                          ps_Matl_Num in   VARCHAR2,
                          ps_Brand in   VARCHAR2,
                          ps_Brand_Line in   VARCHAR2,
                          pi_TIRETYPEID in   NUMBER,
                          ps_PSN in   VARCHAR2,
                          ps_SIZESTAMP in   VARCHAR2,
                          pd_DISCONTINUEDDATE in   DATE,
                          ps_SPECNUMBER in   VARCHAR2,
                          ps_SPEEDRATING in   VARCHAR2,
                          ps_SINGLOADINDEX in   VARCHAR2,
                          ps_DUALLOADINDEX in   VARCHAR2,
                          ps_BIASBELTEDRADIAL in   VARCHAR2,
                          ps_TUBELESSYN in   VARCHAR2,
                          ps_REINFORCEDYN in   VARCHAR2,
                          ps_EXTRALOADYN in   VARCHAR2,
                          ps_UTQGTREADWEAR in   VARCHAR2,
                          ps_UTQGTRACTION in   VARCHAR2,
                          ps_UTQGTEMP in   VARCHAR2,
                          ps_MUDSNOWYN in   VARCHAR2,
                          ps_SEVEREWEATHERIND IN VARCHAR2,
                          pi_RIMDIAMETER in   NUMBER,
                          pd_SERIALDATE in   DATE,
                          ps_MFGWWYY   IN VARCHAR2,
                          ps_BRANDDESC in   VARCHAR2,
                          ps_LOADRANGE in   VARCHAR2,
                          pi_MEARIMWIDTH in   NUMBER,
                          ps_REGROOVABLEIND in   VARCHAR2,
                          ps_PLANTPRODUCED in   VARCHAR2,
                          pd_MOSTRECENTTESTDATE in   DATE,
                          ps_IMARK in   VARCHAR2,
                          ps_INFORMENUMBER in   VARCHAR2,
                          pd_FECHADATE in   DATE,
                          ps_TREADPATTERN in   VARCHAR2,
                          ps_SPECIALPROTECTIVEBAND in   VARCHAR2,
                          ps_NOMINALTIREWIDTH in   VARCHAR2,
                          ps_ASPECTRADIO in   VARCHAR2,
                          ps_TREADWEARINDICATORS in   VARCHAR2,
                          ps_NAMEOFMANUFACTURER in   VARCHAR2,
                          ps_FAMILY in   VARCHAR2,
                          ps_DOTSERIALNUMBER in   VARCHAR2,
                          ps_TPN IN VARCHAR2,
                          ps_OperatorName   in Varchar2) as
    /******************************************************************************
     NAME:       Product_Save
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0
     1.1        10/2/2012     Harini         1.Replaced ps_Brandcode with ps_Brand and 
                                              ps_Brand_Line,pi_NPRID with ps_PSN,
                                              pi_PPN with ps_TPN.
                                              Added Lpad(matl_num) in the select list
                                             2. Added logic to get SKU to insert in Product table
     1.2        11/04/2013    Harini         1.As per IDEA2706, Added  ps_SEVEREWEATHERIND and
                                              ps_MFGWWYY parameters in Input and add these paramters
                                              while inserting/Updating
     1.3        11/11/2013    Harini         1. Added TiretypeId in update statement as it is required to 
                                              update from UI
                                              
     1.4        5/15/2014      jeseitz   1. commented out saving of imark and family, bcause these saves are done in
                                            certification_crud.certificate_save.  Was blanking out these fields when the save was done here too.
    ******************************************************************************/
      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      ls_skuExists varchar2(1);
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      ls_TPN PRODUCT.TPN%TYPE;   --AS per PRJ3617,Replaced li_PPN with li_TPN
      ls_SKU Product.SKU%TYPE;
      ls_Matl_Num Product.Matl_Num%TYPE;
  begin
       if ps_Matl_Num is null then  --AS per PRJ3617,Replaced ps_SKU with ps_Matl_Num
          raise li_ParametersAreNull;
       end if;
      if ps_Matl_Num = '' then   --AS per PRJ3617,Replaced ps_SKU with ps_Matl_Num
              raise li_ParametersAreInvalid;
        end if;
        if  ps_OperatorName   is not null or ps_OperatorName   <> '' then
            ls_OperatorId:=ps_OperatorName;
        end if;
      
     ls_Matl_Num := LPAD( ps_Matl_Num,18,0);
     ls_skuExists:=  TESTRESULTS_CRUD.CHECKIFPRODUCTEXISTS(ps_Matl_Num => ls_Matl_Num,pi_SKUID => pi_SKUID);
     if ls_skuExists = 'y' then
           UPDATE  PRODUCT SET
                      SIZESTAMP      = ps_sizestamp,
                      DISCONTINUEDDATE = pd_discontinueddate,
                      SPECNUMBER     = ps_specnumber,
                      SPEEDRATING    = ps_speedrating,
                      SINGLOADINDEX  = ps_SINGLOADINDEX,
                      DUALLOADINDEX  = ps_dualloadindex,
                      BIASBELTEDRADIAL = ps_BIASBELTEDRADIAL,
                      TUBELESSYN     = ps_tubelessyn,
                      REINFORCEDYN   = ps_reinforcedyn,
                      EXTRALOADYN    = ps_extraloadyn,
                      UTQGTREADWEAR  = ps_utqgtreadwear,
                      UTQGTRACTION   = ps_utqgtraction,
                      UTQGTEMP       = ps_utqgtemp,
                      MUDSNOWYN      = ps_mudsnowyn,
                      SEVEREWEATHERIND = ps_severeweatherind,
                      RIMDIAMETER    = pi_rimdiameter,
                      SERIALDATE     = PD_SERIALDATE,
                      MFGWWYY        = PS_MFGWWYY,
                      BRANDDESC      = PS_BRANDDESC,
                      LOADRANGE      = PS_LOADRANGE,
                      MEARIMWIDTH    = pi_MEARIMWIDTH,
                      REGROOVABLEIND = PS_REGROOVABLEIND,
                      PLANTPRODUCED  = PS_PLANTPRODUCED,
                      MOSTRECENTTESTDATE=PD_MOSTRECENTTESTDATE,
                      --IMARK          = PS_IMARK   , field is saved in certification_crud.certificate_save -- was blanking out when also saved here
                      ModifiedOn     = Sysdate,
                      ModifiedBy     = ls_OperatorId,
                      INFORMENUMBER  = ps_INFORMENUMBER,
                      FECHADATE      = pd_FECHADATE,
                      TREADPATTERN   = ps_TREADPATTERN,
                      SPECIALPROTECTIVEBAND = ps_SPECIALPROTECTIVEBAND,
                      NOMINALTIREWIDTH      = ps_NOMINALTIREWIDTH,
                      ASPECTRATIO           = ps_ASPECTRADIO,
                      TREADWEARINDICATORS   = ps_TREADWEARINDICATORS,
                      NAMEOFMANUFACTURER    = ps_NAMEOFMANUFACTURER,
                     -- FAMILY                = ps_FAMILY, field is saved in certification_crud.certificate_save -- was blanking out when also saved here
                      DOTSERIALNUMBER       = ps_DOTSERIALNUMBER,
                      TPN                   = ps_TPN,
                      TIRETYPEID            = pi_TIRETYPEID -- As per IDEA2706
           WHERE Matl_Num = ls_Matl_Num And  --AS per PRJ3617,Replaced ps_SKU with ps_Matl_Num
                 SKUID = pi_SKUID;
     else
          -- As per PRJ3617,Added this logic to get SKU to insert in Product table
             SELECT Attrib_value 
             INTO ls_SKU 
             FROM (select To_CHAR(nvl(attrib_value,' ')) attrib_value from Material_Attribute
             WHERE Attrib_Name ='LEGACY_COOPER_SKU'
             AND  Matl_Num = ls_Matl_Num);

          INSERT INTO  PRODUCT   --AS per PRJ3617,Added Matl_Num,replaced BrandCode with Brand and Brand_Line,NPRID with PSN and PPN with TPN
                    (
                      SKUID,
                      SKU,
                      Matl_Num,
                      Brand,
                      Brand_Line,
                      TIRETYPEID,
                      PSN,
                      SIZESTAMP,
                      DISCONTINUEDDATE,
                      SPECNUMBER,
                      SPEEDRATING,
                      SINGLOADINDEX,
                      DUALLOADINDEX,
                      BIASBELTEDRADIAL,
                      TUBELESSYN,
                      REINFORCEDYN,
                      EXTRALOADYN,
                      UTQGTREADWEAR,
                      UTQGTRACTION,
                      UTQGTEMP,
                      MUDSNOWYN,
                      SEVEREWEATHERIND,
                      RIMDIAMETER,
                      SERIALDATE,
                      MFGWWYY,
                      BRANDDESC,
                      LOADRANGE,
                      MEARIMWIDTH,
                      REGROOVABLEIND,
                      PLANTPRODUCED,
                      MOSTRECENTTESTDATE,
                      IMARK,
                      INFORMENUMBER,
                      FECHADATE,
                      TREADPATTERN,
                      SPECIALPROTECTIVEBAND,
                      NOMINALTIREWIDTH,
                      ASPECTRATIO,
                      TREADWEARINDICATORS,
                      NAMEOFMANUFACTURER,
                      FAMILY,
                      DOTSERIALNUMBER,
                      TPN,
                      CreatedBy
                    )
                    VALUES
                    (
                      pi_SKUID,
                      ls_SKU,
                      ls_Matl_Num,
                      ps_Brand,
                      ps_Brand_Line,
                      pi_TIRETYPEID,
                      ps_PSN,
                      ps_SIZESTAMP,
                      pd_DISCONTINUEDDATE,
                      ps_SPECNUMBER,
                      ps_SPEEDRATING  ,
                      ps_SINGLOADINDEX,
                      ps_DUALLOADINDEX  ,
                      ps_BIASBELTEDRADIAL ,
                      ps_TUBELESSYN     ,
                      ps_REINFORCEDYN   ,
                      ps_EXTRALOADYN  ,
                      ps_UTQGTREADWEAR,
                      ps_UTQGTRACTION ,
                      ps_UTQGTEMP ,
                      ps_MUDSNOWYN,
                      ps_SEVEREWEATHERIND,
                      pi_RIMDIAMETER,
                      PD_SERIALDATE,
                      PS_MFGWWYY,
                      PS_BRANDDESC,
                      PS_LOADRANGE,
                      pi_MEARIMWIDTH,
                      PS_REGROOVABLEIND,
                      PS_PLANTPRODUCED,
                      PD_MOSTRECENTTESTDATE,
                      PS_IMARK,
                      ps_INFORMENUMBER,
                      pd_FECHADATE,
                      ps_TREADPATTERN,
                      ps_SPECIALPROTECTIVEBAND,
                      ps_NOMINALTIREWIDTH,
                      ps_ASPECTRADIO,
                      ps_TREADWEARINDICATORS,
                      ps_NAMEOFMANUFACTURER,
                      ps_FAMILY,
                      ps_DOTSERIALNUMBER,
                      ps_TPN,
                      ls_OperatorId
                     );
     end if;
     COMMIT;
   EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:=  sqlerrm || '-Product_Save. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.Product_Save',
                AX_RECORDDATA    => 'ps_Matl_Num is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20005,sqlerrm);
         when li_ParametersAreInvalid then
            ls_ErrorMsg:=  sqlerrm || '-Product_Save. There is at least one parameters invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.Product_Save',
                AX_RECORDDATA    => 'There is at least one parameters invalid.',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20006,sqlerrm);
         when others then
              ls_ErrorMsg:=  sqlerrm || '-Product_Save. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.Product_Save',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
                 raise_application_error (-20007,ls_ErrorMsg);
  end Product_Save;
  
  Procedure Measure_Save( pi_MEASUREID out Number,
                          pi_CertificateID  in number,
                          ps_PROJECTNUMBER in Varchar2,
                          pi_TIRENUMBER in Number,
                          ps_TESTSPEC in Varchar2,
                          pd_COMPLETIONDATE in Date,
                          pi_INFLATIONPRESSURE in Number,
                          ps_MOLDDESIGN in Varchar2,
                          pi_RIMWIDTH in Number,
                          ps_DOTSERIALNUMBER in Varchar2,
                          pi_DIAMETER in Number,
                          pi_AVGSECTIONWIDTH in Number,
                          pi_AVGOVERALLWIDTH in Number,
                          pi_MAXOVERALLWIDTH in Number,
                          pi_SIZEFACTOR in Number,
                          pd_MOUNTTIME in date,
                          pi_MOUNTTEMP in Number,
                          pd_SERIALDATE in date,
                          ps_MFGWWYY    IN VARCHAR2,
                          pd_ENDTIME in date,
                          pi_ACTSIZEFACTOR in Number,
                          pi_CERTIFICATIONTYPEID in Number,
                          pi_STARTINFLATIONPRESSURE in Number,
                          pi_ENDINFLATIONPRESSURE in Number,
                          ps_ADJUSTMENT in Varchar2,
                          pi_CIRCUNFERENCE in Number,
                          pi_NOMINALDIAMETER in Number,
                          pi_NOMINALWIDTH in Number,
                          ps_NOMINALWIDTHPASSFAIL in Varchar2,
                          pi_NOMINALWIDTHDIFERENCE in Number,
                          pi_NOMINALWIDTHTOLERANCE in Number,
                          pi_MAXOVERALLDIAMETER in Number,
                          pi_MINOVERALLDIAMETER in Number,
                          ps_OVERALLWIDTHPASSFAIL in Varchar2,
                          ps_OVERALLDIAMETERPASSFAIL in Varchar2,
                          pi_DIAMETERDIFERENCE in Number,
                          pi_DIAMETERTOLERANCE in Number,
                          pi_TEMPRESISTANCEGRADING in Varchar2,
                          pi_TENSILESTRENGHT1 in Number,
                          pi_TENSILESTRENGHT2 in Number,
                          pi_ELONGATION1 in Number,
                          pi_ELONGATION2 in Number,
                          pi_TENSILESTRENGHTAFTERAGE1 in Number,
                          pi_TENSILESTRENGHTAFTERAGE2 in Number,
                          ps_OperatorName   in varchar2,
                          ps_Matl_Num  IN VARCHAR2,
                          ps_Operation IN VARCHAR2,
                          ps_GTSPEC IN VARCHAR2) AS
    /******************************************************************************
     NAME:       Measure_Save
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0
     1.1        10/2/2012     Harini         1.Replaced ps_SKU with ps_Matl_Num
                                              Added Lpad(matl_num) in the update,insert
                                              and in where condition of select list
                                            2. Added logic to get SKU to insert in Product table
    1.2        10/18/2012     Harini        1.Added Operation while updating and inserting.
    1.3        10/30/2012     Harini        1.Included NO_DATA_FOUND exception block when no 
                                            SKU available for given Matl_Num and assign empty 
                                            for ls_SKU parameter
    1.4        11/04/2013     Harini       1.As per IDEA2706,Modified procedure by adding 
                                           ps_GTSPEC and ps_MFGWWYY parameters in Input and add 
                                           these paramters while inserting/Updating
    ******************************************************************************/
   --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
       li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      ls_MeasureExists varchar2(1);
      li_certificationId integer;
      li_CurrentMeasureId number;
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      ls_SKU Product.SKU%Type;
      ls_Matl_Num Product.Matl_Num%Type;
 begin
        if pi_CertificationTypeID is null  then
          raise li_ParametersAreNull;
        end if;
       if pi_CertificationTypeID <=0 then
          raise li_ParametersAreInvalid;
        end if;
       if ps_OperatorName   is not null or ps_OperatorName   <> '' then
       ls_OperatorId:=ps_OperatorName;
       end if;
       ls_Matl_Num := LPAD(ps_Matl_Num,18,0);
       ls_MeasureExists:= TESTRESULTS_CRUD.CheckIfMeasureExists(pi_CertificateID => pi_CertificateID,
                                                                PI_CERTIFICATIONTYPEID => pi_CertificationTypeID
                                                                );
     BEGIN                                                         
       SELECT Attrib_value 
         INTO ls_SKU 
         FROM (SELECT To_CHAR(NVL(Attrib_Value,' ')) Attrib_Value 
                FROM  Material_Attribute
                WHERE Attrib_Name ='LEGACY_COOPER_SKU'
                 AND  Matl_Num =ls_Matl_Num
              );   
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
         ls_SKU := '';
      END;
      
       if ls_MeasureExists='y' then
            UPDATE  MeasureHdr M SET
                PROJECTNUMBER            = ps_PROJECTNUMBER,
                TIRENUMBER               = pi_TIRENUMBER,
                TESTSPEC                 = ps_TESTSPEC,
                COMPLETIONDATE           = pd_COMPLETIONDATE,
                INFLATIONPRESSURE        = pi_INFLATIONPRESSURE,
                MOLDDESIGN               = ps_MOLDDESIGN,
                RIMWIDTH                 = pi_RIMWIDTH,
                DOTSERIALNUMBER          = ps_DOTSERIALNUMBER,
                DIAMETER                 = pi_DIAMETER,
                AVGSECTIONWIDTH          = pi_AVGSECTIONWIDTH,
                AVGOVERALLWIDTH          = pi_AVGOVERALLWIDTH,
                MAXOVERALLWIDTH          = pi_MAXOVERALLWIDTH,
                SIZEFACTOR               = pi_SIZEFACTOR,
                MOUNTTIME                = pd_MOUNTTIME,
                MOUNTTEMP                = pi_MOUNTTEMP,
                SERIALDATE               = pd_SERIALDATE,
                MFGWWYY                  = ps_MFGWWYY,
                ENDTIME                  = pd_ENDTIME,
                ACTSIZEFACTOR            = pi_ACTSIZEFACTOR,
                STARTINFLATIONPRESSURE   = pi_STARTINFLATIONPRESSURE,
                ENDINFLATIONPRESSURE     = pi_ENDINFLATIONPRESSURE,
                ADJUSTMENT               = ps_ADJUSTMENT,
                CIRCUMFERENCE            = pi_CIRCUNFERENCE,
                NOMINALDIAMETER          = pi_NOMINALDIAMETER,
                NOMINALWIDTH             = pi_NOMINALWIDTH,
                NOMINALWIDTHPASSFAIL     = ps_NOMINALWIDTHPASSFAIL,
                NOMINALWIDTHDIFERENCE    = pi_NOMINALWIDTHDIFERENCE,
                NOMINALWIDTHTOLERANCE    = pi_NOMINALWIDTHTOLERANCE,
                MAXOVERALLDIAMETER       = pi_MAXOVERALLDIAMETER,
                MINOVERALLDIAMETER       = pi_MINOVERALLDIAMETER,
                OVERALLWIDTHPASSFAIL     = ps_OVERALLWIDTHPASSFAIL,
                OVERALLDIAMETERPASSFAIL  = ps_OVERALLDIAMETERPASSFAIL,
                DIAMETERDIFERENCE        = pi_DIAMETERDIFERENCE,
                DIAMETERTOLERANCE        = pi_DIAMETERTOLERANCE,
                TEMPRESISTANCEGRADING    = pi_TEMPRESISTANCEGRADING,
                TENSILESTRENGHT1         = pi_TENSILESTRENGHT1,
                TENSILESTRENGHT2         = pi_TENSILESTRENGHT2,
                ELONGATION1              = pi_ELONGATION1,
                ELONGATION2              = pi_ELONGATION2,
                TENSILESTRENGHTAFTERAGE1 = pi_TENSILESTRENGHTAFTERAGE1,
                TENSILESTRENGHTAFTERAGE2 = pi_TENSILESTRENGHTAFTERAGE2,
                MODIFIEDBY               = ls_OperatorId,
                ModifiedOn               = Sysdate,
                Matl_Num                 = ls_Matl_Num, --As per PRJ3617,commneted sku and added Matl_Num
                SKU                      = ls_SKU,
                OperNum                  = ps_Operation, --As per PRJ3617, added OperNum while updating
                GTSpec                   = ps_GTSPec
            WHERE M.CERTIFICATIONTYPEID = pi_CertificationTypeID And
                  M.CERTIFICATEID       = pi_CertificateID;
           SELECT Max(measureid) into li_CurrentMeasureId
            FROM  MeasureHdr m
            WHERE m.certificationtypeid = pi_CertificationTypeID AND
                  M.CERTIFICATEID       = pi_CertificateID;
            Delete from  measuredtl where MEASUREID=li_currentmeasureid;
             pi_MeasureId:=  li_CurrentMeasureId;
       ELSE
            INSERT  INTO  MeasureHdr
                  (
                    MEASUREID,
                    PROJECTNUMBER,
                    TIRENUMBER,
                    TESTSPEC,
                    COMPLETIONDATE,
                    INFLATIONPRESSURE,
                    MOLDDESIGN,
                    RIMWIDTH,
                    DOTSERIALNUMBER,
                    DIAMETER,
                    AVGSECTIONWIDTH,
                    AVGOVERALLWIDTH,
                    MAXOVERALLWIDTH,
                    SIZEFACTOR,
                    MOUNTTIME,
                    MOUNTTEMP,
                    SERIALDATE,
                    MFGWWYY,
                    ENDTIME,
                    ACTSIZEFACTOR,
                    CERTIFICATIONTYPEID,
                    STARTINFLATIONPRESSURE,
                    ENDINFLATIONPRESSURE,
                    ADJUSTMENT,
                    CIRCUMFERENCE,
                    NOMINALDIAMETER,
                    NOMINALWIDTH,
                    NOMINALWIDTHPASSFAIL,
                    NOMINALWIDTHDIFERENCE,
                    NOMINALWIDTHTOLERANCE,
                    MAXOVERALLDIAMETER,
                    MINOVERALLDIAMETER,
                    OVERALLWIDTHPASSFAIL,
                    OVERALLDIAMETERPASSFAIL,
                    DIAMETERDIFERENCE,
                    DIAMETERTOLERANCE,
                    TEMPRESISTANCEGRADING,
                    TENSILESTRENGHT1,
                    TENSILESTRENGHT2,
                    ELONGATION1,
                    ELONGATION2,
                    TENSILESTRENGHTAFTERAGE1,
                    TENSILESTRENGHTAFTERAGE2,
                    CERTIFICATEID,
                    Matl_Num, 
                    SKU,
                    OperNum,
                    GTSPEC
                  )
            VALUES
                  (
                    MeasureId_SEQ.NextVal,
                    ps_PROJECTNUMBER,
                    pi_TIRENUMBER,
                    ps_TESTSPEC,
                    pd_COMPLETIONDATE,
                    pi_INFLATIONPRESSURE,
                    ps_MOLDDESIGN,
                    pi_RIMWIDTH,
                    ps_DOTSERIALNUMBER,
                    pi_DIAMETER,
                    pi_AVGSECTIONWIDTH,
                    pi_AVGOVERALLWIDTH,
                    pi_MAXOVERALLWIDTH,
                    pi_SIZEFACTOR,
                    pd_MOUNTTIME,
                    pi_MOUNTTEMP,
                    pd_SERIALDATE,
                    ps_MFGWWYY,
                    pd_ENDTIME,
                    pi_ACTSIZEFACTOR,
                    pi_CERTIFICATIONTYPEID,
                    pi_STARTINFLATIONPRESSURE,
                    pi_ENDINFLATIONPRESSURE,
                    ps_ADJUSTMENT,
                    pi_CIRCUNFERENCE,
                    pi_NOMINALDIAMETER,
                    pi_NOMINALWIDTH,
                    ps_NOMINALWIDTHPASSFAIL,
                    pi_NOMINALWIDTHDIFERENCE,
                    pi_NOMINALWIDTHTOLERANCE,
                    pi_MAXOVERALLDIAMETER,
                    pi_MINOVERALLDIAMETER,
                    ps_OVERALLWIDTHPASSFAIL,
                    ps_OVERALLDIAMETERPASSFAIL,
                    pi_DIAMETERDIFERENCE,
                    pi_DIAMETERTOLERANCE,
                    pi_TEMPRESISTANCEGRADING,
                    pi_TENSILESTRENGHT1,
                    pi_TENSILESTRENGHT2,
                    pi_ELONGATION1,
                    pi_ELONGATION2,
                    pi_TENSILESTRENGHTAFTERAGE1,
                    pi_TENSILESTRENGHTAFTERAGE2,
                    pi_certificateid,
                    ls_Matl_Num,     -- As per PRJ3617,inserting matl_num 
                    ls_SKU,
                    ps_Operation,     -- As per PRJ3617,inserting operation 
                    ps_GTSPEC
                  );
            --Gets the Id that just was inserted on the table to be returned
            SELECT Max(measureid) into li_CurrentMeasureId
            FROM  MeasureHdr m
            WHERE m.certificationtypeid = pi_CertificationTypeID AND
                  M.CERTIFICATEID       = pi_CertificateID;
             pi_MeasureId:=  li_CurrentMeasureId;
       end if;
       COMMIT;
   EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:=  'Measure_Save. There is at least one parameters null.' || sqlerrm ;
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.Measure_Save',
                AX_RECORDDATA    => 'ps_Matl_Num is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20005,ls_ErrorMsg);
         when li_ParametersAreInvalid then
            ls_ErrorMsg:= sqlerrm || 'Measure_Save. There is one parameters is invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.Measure_Save',
                AX_RECORDDATA    => 'ps_Matl_Num is parameters invalid..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || 'Measure_Save. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.Measure_Save',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
              raise_application_error (-20007,ls_ErrorMsg);
 END Measure_Save;
 
Procedure MeasureDetail_Save(pi_SECTIONWIDTH in  MEASUREDTL.SECTIONWIDTH%Type,
                               pi_OVERALLWIDTH in  MEASUREDTL.OVERALLWIDTH%Type,
                               pi_MEASUREID in number,
                               PI_ITERATION IN NUMBER,
                               ps_OperatorName   in varchar2 )as
       --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
       li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      --varible
      ls_MeasureDetailExists varchar2(1);
      li_certificationId integer;
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
  begin
      if pi_MEASUREID is null then
          raise li_ParametersAreNull;
      end if;
      if pi_MEASUREID <= 0 then
          raise li_ParametersAreInvalid;
      end if;
      if ps_OperatorName   is not null or ps_OperatorName   <> '' then
            ls_OperatorId:=ps_OperatorName ;
      end if;
       INSERT INTO  MeasureDtl
            (
              SECTIONWIDTH,
              OVERALLWIDTH,
              MEASUREID,
              ITERATION,
              CreatedBy
            )
            VALUES
            (
               pi_SECTIONWIDTH,
               pi_OVERALLWIDTH,
               pi_MEASUREID,
               PI_ITERATION,
               ls_OperatorId
            );
            COMMIT;
  EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:= sqlerrm || 'MeasureDetail_Save.There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.MeasureDetail_Save',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20005,ls_ErrorMsg);
         when li_ParametersAreInvalid then
            ls_ErrorMsg:= sqlerrm || 'MeasureDetail_Save. There is one parameters is invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.MeasureDetail_Save',
                AX_RECORDDATA    => 'ps_sku is parameters invalid..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || 'MeasureDetail_Save. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.MeasureDetail_Save',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);
  END MeasureDetail_Save;
  
  PROCEDURE Endurance_Save( pi_ENDURANCEID out number,
                            ps_PROJECTNUMBER in varchar2,
                            pi_TIRENUMBER in number,
                            ps_TESTSPEC in varchar2,
                            pd_COMPLETIONDATE in date,
                            ps_DOTSERIALNUMBER in varchar2,
                            ps_MFGWWYY in varchar2,
                            pd_PRECONDSTARTDATE in date,
                            pi_PRECONDSTARTTEMP in number,
                            pi_RIMDIAMETER in number,
                            pi_RIMWIDTH in number,
                            pd_PRECONDENDDATE in date,
                            pi_PRECONDENDTEMP in number,
                            pi_INFLATIONPRESSURE in number,
                            pi_BEFOREDIAMETER in number,
                            pi_AFTERDIAMETER in number,
                            pi_BEFOREINFLATION in number,
                            pi_AFTERINFLATION in number,
                            pi_WHEELPOSITION in number,
                            pi_WHEELNUMBER in number,
                            pi_FINALTEMP in number,
                            pi_FINALDISTANCE in number,
                            pi_FINALINFLATION in number,
                            pd_POSTCONDSTARTDATE in date,
                            pd_POSTCONDENDDATE in date,
                            pi_POSTCONDENDTEMP in number,
                            ps_PASSYN in varchar2,
                            pi_CertificationTypeID in number,
                            pd_SerialDate in date,
                            pi_PreCondTime in number,
                            pi_PostCondTime  in number,
                            pi_DIAMETERTESTDRUM in Number,
                            pi_PRECONDTEMP in Number,
                            pi_INFLATIONPRESSUREREADJUSTED in Number,
                            pi_CIRCUNFERENCEBEFORETEST in Number,
                            ps_RESULTPASSFAIL in Varchar2,
                            pi_ENDURANCEHOURS in Number,
                            ps_POSSIBLEFAILURESFOUND in Varchar2,
                            pi_CIRCUNFERENCEAFTERTEST in Number,
                            pi_OUTERDIAMETERDIFERENCE in Number,
                            pi_ODDIFERENCETOLERANCE in Number,
                            ps_SERIENOM in Varchar2,
                            ps_FINALJUDGEMENT in Varchar2,
                            ps_APPROVER in Varchar2,
                            ps_OperatorName in  Varchar2,
                            pi_certificateid in number,
                            ps_Matl_Num IN VARCHAR2,
                            pn_lowInfstartinflation IN NUMBER,
                            pn_lowInfendinflation IN NUMBER,
                            pn_lowInfendtemp IN NUMBER,
                            ps_Operation     IN VARCHAR2,
                            ps_GTSPEC        IN VARCHAR2) as
     
    /******************************************************************************
     NAME:       Endurance_Save
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0
     1.1        10/2/2012     Harini         1.Replaced ps_SKU with ps_Matl_Num
                                              Added Lpad(matl_num) in the update,insert
                                              and in where condition of select list
                                            2. Added logic to get SKU to insert in Product table
     1.2        10/18/2012    Harini        1.Added Operation while updating and inserting.
     1.3        10/30/2012    Harini        1.Included NO_DATA_FOUND exception block when no 
                                             SKU available for given Matl_Num and assign empty 
                                             for ls_SKU parameter
     1.4        11/04/2013     Harini       1.As per IDEA2706,Modified procedure by adding 
                                              ps_GTSPEC parameter in Input and add this
                                              paramter while inserting/Updating
    ******************************************************************************/
      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
      li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      ls_EnduranceExists varchar2(1);
      li_certificationTypeId  CERTIFICATIONTYPE.CERTIFICATIONTYPEID%type;
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      li_CurrentEnduranceID  endurancehdr.enduranceid%type;
      li_PostCondTime  ENDURANCEHDR.PostCondTime%type; -- jeseitz added 7/29/13
      li_PreCondTime  ENDURANCEHDR.PreCondTime%type; -- jeseitz added 7/29/13
      ls_SKU PRODUCT.SKU%TYPE;
      ls_Matl_Num PRODUCT.Matl_Num%TYPE;
  begin
         if pi_CertificationTypeID is null then
            raise li_ParametersAreNull;
         end if;
         if pi_CertificationTypeID <= 0  then
            raise li_ParametersAreInvalid;
         end if;
         if ps_OperatorName is not null or ps_OperatorName <> '' then
            ls_operatorid:=ps_OperatorName;
         end if ;
         
        ls_Matl_Num := LPAD(ps_Matl_Num,18,0);
        ls_EnduranceExists:= TESTRESULTS_CRUD.CHECKIFENDURANCEEXISTS(
                                                  PI_certificateid   => pi_certificateid ,
                                                  PI_CERTIFICATIONTYPEID => PI_CERTIFICATIONTYPEID
                                                );
       
       BEGIN                                                         
       SELECT Attrib_value 
         INTO ls_SKU 
         FROM (SELECT To_CHAR(NVL(Attrib_Value,' ')) Attrib_Value 
                FROM  Material_Attribute
                WHERE Attrib_Name ='LEGACY_COOPER_SKU'
                 AND  Matl_Num =ls_Matl_Num
              );   
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
         ls_SKU := '';
      END;
      
       --jeseitz added 7/29/13 because SAP was bringing back and incorrectly formatted
        if pi_PostCondTime > 9999 then
            li_PostCondTime := 0;
        else
            li_PostCondTime := pi_PostCondTime;
        end if;
        
        if pi_PreCondTime > 9999 then
            li_PreCondTime := 0;
        else
            li_PreCondTime := pi_PreCondTime;
        end if;
        
        if  ls_EnduranceExists = 'y' then
            UPDATE  EnduranceHdr SET
                    PROJECTNUMBER    = ps_PROJECTNUMBER,
                    TIRENUMBER       = pi_TIRENUMBER,
                    TESTSPEC         = ps_TESTSPEC,
                    COMPLETIONDATE   = pd_COMPLETIONDATE,
                    DOTSERIALNUMBER  = ps_DOTSERIALNUMBER ,
                    MFGWWYY          = ps_MFGWWYY,
                    PRECONDSTARTDATE = pd_PRECONDSTARTDATE,
                    PRECONDSTARTTEMP  = pi_PRECONDSTARTTEMP,
                    RIMDIAMETER      = pi_RIMDIAMETER,
                    RIMWIDTH         = pi_RIMWIDTH,
                    PRECONDENDDATE   = pd_PRECONDENDDATE,
                    PRECONDENDTEMP   = pi_PRECONDENDTEMP,
                    INFLATIONPRESSURE = pi_INFLATIONPRESSURE ,
                    BEFOREDIAMETER    = pi_beforediameter,
                    AFTERDIAMETER     = pi_afterdiameter,
                    BEFOREINFLATION   = pi_beforeinflation,
                    AFTERINFLATION    = pi_afterinflation,
                    WHEELPOSITION     = pi_wheelposition,
                    WHEELNUMBER       = pi_wheelnumber,
                    FINALTEMP         = pi_FINALTEMP ,
                    FINALDISTANCE     = pi_finaldistance ,
                    FINALINFLATION    = pi_finalinflation ,
                    POSTCONDSTARTDATE = pd_postcondstartdate,
                    POSTCONDENDDATE   = pd_postcondenddate,
                    POSTCONDENDTEMP   = pi_postcondendtemp,
                    PASSYN            = ps_passyn,
                    SERIALDATE        = PD_SERIALDATE ,
                    PreCondTime       = li_PRECONDTIME  ,
                    PostCondTime      = li_PostCondTime,
                    DIAMETERTESTDRUM  = pi_DIAMETERTESTDRUM,
                    PRECONDTEMP       = pi_PRECONDTEMP,
                    INFLATIONPRESSUREREADJUSTED = pi_INFLATIONPRESSUREREADJUSTED,
                    CIRCUNFERENCEBEFORETEST     = pi_CIRCUNFERENCEBEFORETEST,
                    RESULTPASSFAIL              = ps_RESULTPASSFAIL,
                    ENDURANCEHOURS              = pi_ENDURANCEHOURS,
                    POSSIBLEFAILURESFOUND       = ps_POSSIBLEFAILURESFOUND,
                    CIRCUNFERENCEAFTERTEST      = pi_CIRCUNFERENCEAFTERTEST,
                    OUTERDIAMETERDIFERENCE      = pi_OUTERDIAMETERDIFERENCE,
                    ODDIFERENCETOLERANCE        = pi_ODDIFERENCETOLERANCE,
                    SERIENOM                    = ps_SERIENOM,
                    FINALJUDGEMENT              = ps_FINALJUDGEMENT,
                    APPROVER                    = ps_APPROVER,
                    MODIFIEDON        = SYSDATE,
                    ModifiedBy        = ls_operatorid,
                    Matl_Num          = ls_Matl_Num,   -- As per PRJ3617,updating Matl_Num
                    SKU               = ls_SKU,  
                    lowpressurestartinflation = pn_lowInfstartinflation,
                    lowpressureendinflation = pn_lowInfendinflation,
                    lowpressureendtemp = pn_lowInfendtemp,
                    OperNum                  = ps_Operation, --As per PRJ3617, added OperNum while updating
                    GTSpec                   = ps_GTSPec
             WHERE CertificateID = pi_certificateid   And
                  CERTIFICATIONTYPEID = pi_CertificationTypeID;
             SELECT Max(ENDURANCEID) into li_CurrentEnduranceID
              FROM EnduranceHdr e
             WHERE  e.certificateid = pi_certificateid and
                   e.CERTIFICATIONTYPEID = pi_CertificationTypeID;
              Delete from  Endurancedtl where ENDURANCEID=li_CurrentEnduranceID;
               pi_ENDURANCEID:=  li_CurrentEnduranceID;
        else
            INSERT INTO  EnduranceHdr   (
                    ENDURANCEID,
                    PROJECTNUMBER,
                    TIRENUMBER,
                    TESTSPEC,
                    COMPLETIONDATE,
                    DOTSERIALNUMBER,
                    MFGWWYY,
                    PRECONDSTARTDATE,
                    PRECONDSTARTTEMP,
                    RIMDIAMETER,
                    RIMWIDTH,
                    PRECONDENDDATE,
                    PRECONDENDTEMP,
                    INFLATIONPRESSURE,
                    BEFOREDIAMETER,
                    AFTERDIAMETER,
                    BEFOREINFLATION,
                    AFTERINFLATION,
                    WHEELPOSITION,
                    WHEELNUMBER,
                    FINALTEMP,
                    FINALDISTANCE,
                    FINALINFLATION,
                    POSTCONDSTARTDATE,
                    POSTCONDENDDATE,
                    POSTCONDENDTEMP,
                    PASSYN,
                    CERTIFICATIONTYPEID,
                    SerialDate,
                    PreCondTime,
                    PostCondTime,
                    DIAMETERTESTDRUM,
                    PRECONDTEMP,
                    INFLATIONPRESSUREREADJUSTED,
                    CIRCUNFERENCEBEFORETEST,
                    RESULTPASSFAIL,
                    ENDURANCEHOURS,
                    POSSIBLEFAILURESFOUND,
                    CIRCUNFERENCEAFTERTEST,
                    OUTERDIAMETERDIFERENCE ,
                    ODDIFERENCETOLERANCE ,
                    SERIENOM ,
                    FINALJUDGEMENT ,
                    APPROVER,
                    CREATEDBY,
                    CERTIFICATEID,
                    Matl_Num,
                    SKU,
                    lowpressurestartinflation,
                    lowpressureendinflation,
                    lowpressureendtemp,
                    OperNum,
                    GTSpec
              )
              VALUES
              (
                ENDURANCEID_SEQ.NEXTVAL,
                ps_PROJECTNUMBER,
                pi_TIRENUMBER,
                ps_TESTSPEC,
                pd_COMPLETIONDATE,
                ps_DOTSERIALNUMBER,
                ps_MFGWWYY,
                pd_PRECONDSTARTDATE,
                pi_PRECONDSTARTTEMP,
                pi_RIMDIAMETER,
                pi_RIMWIDTH ,
                pd_PRECONDENDDATE,
                pi_PRECONDENDTEMP,
                pi_INFLATIONPRESSURE,
                pi_BEFOREDIAMETER,
                pi_AFTERDIAMETER,
                pi_BEFOREINFLATION,
                pi_AFTERINFLATION,
                pi_WHEELPOSITION,
                pi_WHEELNUMBER,
                pi_FINALTEMP,
                pi_FINALDISTANCE,
                pi_FINALINFLATION ,
                pd_POSTCONDSTARTDATE,
                pd_POSTCONDENDDATE,
                pi_POSTCONDENDTEMP,
                ps_PASSYN,
                pi_CertificationTypeID,
                pd_SerialDate,
                li_PreCondTime,
                li_PostCondTime,
                pi_DIAMETERTESTDRUM,
                pi_PRECONDTEMP,
                pi_INFLATIONPRESSUREREADJUSTED,
                pi_CIRCUNFERENCEBEFORETEST,
                ps_RESULTPASSFAIL,
                pi_ENDURANCEHOURS,
                ps_POSSIBLEFAILURESFOUND,
                pi_CIRCUNFERENCEAFTERTEST,
                pi_OUTERDIAMETERDIFERENCE,
                pi_ODDIFERENCETOLERANCE,
                ps_SERIENOM,
                ps_FINALJUDGEMENT,
                ps_APPROVER,
                ls_operatorid,
                pi_certificateid,
                ls_Matl_Num,  -- As per PRJ3617,inserting Matl_Num
                ls_SKU,
                pn_lowInfstartinflation,
                pn_lowInfendinflation,
                pn_lowInfendtemp,
                ps_Operation,     -- As per PRJ3617,inserting operation
                ps_GTSPec
              );
             SELECT Max(ENDURANCEID) into li_CurrentEnduranceID
              FROM EnduranceHdr e
             WHERE  e.certificateid = pi_certificateid and
                   e.CERTIFICATIONTYPEID = pi_CertificationTypeID;
              pi_ENDURANCEID:=  li_CurrentEnduranceID;
        end if ;
        COMMIT;
      EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:= sqlerrm || '- Endurance_Save. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.Endurance_Save',
                AX_RECORDDATA    => 'ps_Matl_Num is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20005,ls_ErrorMsg);
         when li_ParametersAreInvalid then
            ls_ErrorMsg:= sqlerrm ||  '- Endurance_Save. There is one parameters is invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.Endurance_Save',
                AX_RECORDDATA    => 'ps_Matl_Num is parameters invalid..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm ||  '- Endurance_Save. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.Endurance_Save',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);
  END Endurance_Save;
  
   PROCEDURE ENDURANCEDETAIL_SAVE( PI_TESTSTEP IN NUMBER,
                                  pi_TIMEINMIN IN NUMBER,
                                  PI_SPEED IN NUMBER,
                                  PI_TOTMILES IN NUMBER,
                                  PI_LOAD IN NUMBER,
                                  PI_LOADPERCENT IN NUMBER,
                                  PI_SETINFLATION IN NUMBER,
                                  PI_AMBTEMP IN NUMBER,
                                  PI_INFPRESSURE IN NUMBER,
                                  PD_STEPCOMPLETIONDATE IN EnduranceDtl.STEPCOMPLETIONDATE%Type,
                                  PI_ENDURANCEID IN NUMBER) AS
     --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
       li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      ls_EnduranceDetailExists varchar2(1);
      li_certificationId integer;
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
   BEGIN
        if PI_ENDURANCEID is null then
          raise li_ParametersAreNull;
        end if;
        if PI_ENDURANCEID <= 0 then
            raise li_ParametersAreInvalid;
        end if;
            INSERT INTO  EnduranceDtl (
                  TestStep,
                  TIMEINMIN,
                  SPEED,
                  TOTMILES,
                  LOAD,
                  LOADPERCENT,
                  SETINFLATION,
                  AMBTEMP,
                  INFPRESSURE,
                  STEPCOMPLETIONDATE,
                  ENDURANCEID
            )
            VALUES
            (
                  PI_TESTSTEP,
                  pi_TIMEINMIN,
                  PI_SPEED,
                  PI_TOTMILES,
                  PI_LOAD,
                  PI_LOADPERCENT,
                  PI_SETINFLATION,
                  PI_AMBTEMP,
                  PI_INFPRESSURE,
                  PD_STEPCOMPLETIONDATE  ,
                  PI_ENDURANCEID
            );
            COMMIT;
       EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:= sqlerrm || '- ENDURANCEDETAIL_SAVE. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.ENDURANCEDETAIL_SAVE',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20005,ls_ErrorMsg);
         when li_ParametersAreInvalid then
            ls_ErrorMsg:= sqlerrm || '- ENDURANCEDETAIL_SAVE. There is one parameters is invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.ENDURANCEDETAIL_SAVE',
                AX_RECORDDATA    => 'ps_sku is parameters invalid..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || '- ENDURANCEDETAIL_SAVE. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.ENDURANCEDETAIL_SAVE',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);
   END ENDURANCEDETAIL_SAVE;
   
  PROCEDURE TREADWEAR_SAVE(PI_TREADWEARID OUT NUMBER,
                           PS_PROJECTNUMBER  IN VARCHAR2,
                           PI_TIRENUMBER IN NUMBER,
                           PS_TESTSPEC  IN VARCHAR2,
                           PD_COMPLETIONDATE IN DATE,
                           PS_DOTSERIALNUMBER  IN VARCHAR2,
                           PI_LOWESTWEARBAR IN NUMBER,
                           PS_PASSYN  IN VARCHAR2,
                           pi_CertificationTypeID in number,
                           PD_SERIALDATE IN DATE,
                           ps_MFGWWYY    IN VARCHAR2,
                           ps_OperatorName in varchar2,
                           pi_INDICATORSREQUIREMENT in number,
                           pi_CertificateID in Number,
                           ps_Matl_Num  IN VARCHAR2,
                           ps_Operation IN VARCHAR2,
                           ps_GTSPEC IN VARCHAR2) AS
  /******************************************************************************
     NAME:       TREADWEAR_SAVE
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0
     1.1        10/2/2012     Harini         1.Replaced ps_SKU with ps_Matl_Num
                                              Added Lpad(matl_num) in the update,insert
                                              and in where condition of select list
                                             2. Added logic to get SKU to insert in Product table
     1.2        10/18/2012    Harini         1.Added Operation while updating and inserting.
     1.3        10/30/2012    Harini         1.Included NO_DATA_FOUND exception block when no 
                                             SKU available for given Matl_Num and assign empty 
                                             for ls_SKU parameter
    
     1.4        11/04/2013     Harini       1.As per IDEA2706,Modified procedure by adding 
                                            ps_GTSPEC and ps_MFGWWYY parameters in Input and add 
                                            these paramters while inserting/Updating
    ******************************************************************************/
 --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
       li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      ls_TreadWearExists varchar2(1);
      li_certificationTypeId integer;
      li_TREADWEARID  TREADWEARHDR.TREADWEARID%type;
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      ls_SKU   Product.SKU%TYPE;
      ls_Matl_Num   Product.Matl_Num%TYPE;
   BEGIN
         if  pi_CertificationTypeID is null  then
            raise li_ParametersAreNull;
          end if;
         if  pi_CertificationTypeID <=0  then
            raise li_ParametersAreInvalid;
          end if;
        if ps_OperatorName is not null or ps_OperatorName <> '' then
            ls_OperatorId := ps_OperatorName;
        end if;
        
        ls_Matl_Num := LPAD(ps_Matl_Num,18,0);
        ls_TreadWearExists:=  TESTRESULTS_CRUD.CheckIfTreadWearExists(PI_certificateid   => pi_certificateid ,
                                                                      PI_CERTIFICATIONTYPEID => pi_CertificationTypeID
                                                                    );
       BEGIN                                                         
       SELECT Attrib_value 
         INTO ls_SKU 
         FROM (SELECT To_CHAR(NVL(Attrib_Value,' ')) Attrib_Value 
                FROM  Material_Attribute
                WHERE Attrib_Name ='LEGACY_COOPER_SKU'
                 AND  Matl_Num =ls_Matl_Num
              );   
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
         ls_SKU := '';
      END;
      
        if ls_TreadWearExists='y' then
              UPDATE  TreadWearHdr SET
                  PROJECTNUMBER   = PS_PROJECTNUMBER ,
                  TIRENUMBER      = PI_TIRENUMBER,
                  TESTSPEC        = PS_TESTSPEC,
                  COMPLETIONDATE  = PD_COMPLETIONDATE,
                  DOTSERIALNUMBER = PS_DOTSERIALNUMBER,
                  LOWESTWEARBAR   = PI_LOWESTWEARBAR,
                  PASSYN          = PS_PASSYN,
                  SERIALDATE      = PD_SERIALDATE,
                  MFGWWYY         = ps_MFGWWYY,
                  INDICATORSREQUIREMENT = pi_INDICATORSREQUIREMENT,
                  ModifiedOn     = Sysdate,
                  Modifiedby     = ls_OperatorId,
                  Matl_Num       = ls_Matl_Num,  -- As per PRJ3617,updating Matl_Num
                  SKU            = ls_SKU,
                  OperNum        = ps_Operation, --As per PRJ3617, added OperNum while updating
                  GTSpec         = ps_GTSPec
              WHERE CERTIFICATEID = pi_CertificateID And
                    CERTIFICATIONTYPEID = pi_CertificationTypeID ;
             SELECT Max(TREADWEARID) into li_TREADWEARID
             FROM  TreadWearHdr tw
             WHERE CERTIFICATEID = pi_CertificateID AND
                   tw.CERTIFICATIONTYPEID = pi_CertificationTypeID;
            delete from  treadweardtl where  treadwearid=li_TREADWEARID;
             PI_TREADWEARID:=li_TREADWEARID;
        else
              INSERT INTO  TreadWearHdr
              (
                TREADWEARID,
                PROJECTNUMBER,
                TIRENUMBER,
                TESTSPEC,
                COMPLETIONDATE,
                DOTSERIALNUMBER,
                LOWESTWEARBAR,
                PASSYN,
                CERTIFICATIONTYPEID,
                SERIALDATE   ,
                MFGWWYY,
                INDICATORSREQUIREMENT,
                CERTIFICATEID,
                Matl_Num,
                SKU,
                OperNum,
                GTSpec
              )
              VALUES
              (
                TREADWEARID_SEQ.NextVal,
                PS_PROJECTNUMBER,
                PI_TIRENUMBER,
                PS_TESTSPEC,
                PD_COMPLETIONDATE,
                PS_DOTSERIALNUMBER,
                PI_LOWESTWEARBAR,
                PS_PASSYN,
                pi_CertificationTypeID,
                PD_SERIALDATE,
                ps_MFGWWYY,
                pi_INDICATORSREQUIREMENT,
                pi_CertificateID,
                ls_Matl_Num,  -- As per PRJ3617,inserting Matl_Num
                ls_sku,
                ps_Operation,  -- As per PRJ3617,inserting operation
                ps_GTSPEC
              );
              SELECT Max(TREADWEARID) into li_TREADWEARID
              FROM  TreadWearHdr tw
              WHERE CERTIFICATEID = pi_CertificateID AND
                    tw.CERTIFICATIONTYPEID = pi_CertificationTypeID;
             PI_TREADWEARID:=li_TREADWEARID;
        end if ;
        COMMIT;
  EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:= sqlerrm || ' - TREADWEAR_SAVE. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.TREADWEAR_SAVE',
                AX_RECORDDATA    => 'ps_Matl_Num is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20005,ls_ErrorMsg);
         when li_ParametersAreInvalid then
            ls_ErrorMsg:= sqlerrm || ' - TREADWEAR_SAVE. There is one parameters is invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.TREADWEAR_SAVE',
                AX_RECORDDATA    => 'ps_Matl_Num is parameters invalid..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || ' - TREADWEAR_SAVE. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.TREADWEAR_SAVE',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);
END TREADWEAR_SAVE;

  PROCEDURE TREADWEARDETAIL_SAVE(PI_TREADWEARID in NUMBER,
                                 PI_WEARBARHEIGHT IN  treadweardtl.wearbarheight%type,
                                 PI_ITERATION IN  treadweardtl.iteration%TYPE,
                                 ps_OperatorName in varchar2) as
 --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
       li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      ls_TreadWearDetilExists varchar2(1);
      li_TotDetail number;
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
   BEGIN
         if PI_TREADWEARID is null  or PI_WEARBARHEIGHT is null then
            raise li_ParametersAreNull;
          end if;
         if PI_TREADWEARID <= 0  then
            raise li_ParametersAreInvalid;
          end if;
         if ps_OperatorName is not null or ps_OperatorName <> '' then
            ls_OperatorId := ps_OperatorName;
        end if;
            INSERT INTO  TREADWEARDTL
            (
              TREADWEARID,
              WEARBARHEIGHT,
              ITERATION,
              createdby
            )
            VALUES
            (
              PI_TREADWEARID,
              PI_WEARBARHEIGHT  ,
              PI_ITERATION,
              ls_OperatorId
            );
            COMMIT;
  EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:= sqlerrm || ' - TREADWEARDETAIL_SAVE. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.TREADWEARDETAIL_SAVE',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20005,ls_ErrorMsg);
         when li_ParametersAreInvalid then
            ls_ErrorMsg:= sqlerrm || ' - TREADWEARDETAIL_SAVE. There is one parameters is invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.TREADWEARDETAIL_SAVE',
                AX_RECORDDATA    => 'ps_sku is parameters invalid..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  ' - TREADWEARDETAIL_SAVE. An error have ocurred.(when others)' || sqlerrm ;
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.TREADWEARDETAIL_SAVE',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
              raise_application_error (-20007,ls_ErrorMsg);
End TREADWEARDETAIL_SAVE;

   PROCEDURE PLUNGER_Save(  pi_PLUNGERID out Number,
                            ps_PROJECTNUMBER in Varchar2,
                            pi_TIRENUMBER in Number,
                            ps_TESTSPEC in Varchar2,
                            pd_COMPLETIONDATE in DATE,
                            ps_DOTSERIALNUMBER in Varchar2,
                            pi_AVGBREAKINGENERGY in Number,
                            ps_PASSYN in Varchar2,
                            pi_CERTIFICATIONTYPEID in Number,
                            pd_SERIALDATE in DATE,
                            ps_MFGWWYY    IN VARCHAR2,
                            pi_MINPLUNGER in Number,
                            ps_OperatorName in varchar2,
                            pi_CertificateID in number,
                            ps_Matl_Num IN VARCHAR2,
                            ps_Operation IN VARCHAR2,
                            ps_GTSPEC IN VARCHAR2) AS
  /******************************************************************************
     NAME:       PLUNGER_Save
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0
     1.1        10/2/2012     Harini         1.Replaced ps_SKU with ps_Matl_Num
                                              Added Lpad(matl_num) in the update,insert
                                              and in where condition of select list
                                             2. Added logic to get SKU to insert in Product table
    1.2        10/18/2012    Harini         1.Added Operation while updating and inserting.
    1.3        10/30/2012    Harini         1.Included NO_DATA_FOUND exception block when no 
                                             SKU available for given Matl_Num and assign empty 
                                             for ls_SKU parameter
    1.4        11/04/2013     Harini       1.As per IDEA2706,Modified procedure by adding 
                                           ps_GTSPEC and ps_MFGWWYY parameters in Input and add 
                                           these paramters while inserting/Updating
    ******************************************************************************/
     --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
       li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      ls_PlungerExists varchar2(1);
      li_certificationTypeId integer;
      li_PlungerId number;
      --varible
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      ls_SKU Product.SKU%TYPE;
      ls_Matl_Num Product.Matl_Num%TYPE;
   BEGIN
         if pi_CertificationTypeID is null  then
            raise li_ParametersAreNull;
          end if;
         if  pi_CertificationTypeID <= 0  then
            raise li_ParametersAreInvalid;
          end if;
         if ps_OperatorName is not null or ps_OperatorName <> '' then
            ls_OperatorId:= ps_OperatorName;
         end if ;
         
         ls_Matl_Num := LPAD(ps_Matl_Num,18,0);
        ls_PlungerExists:=  TESTRESULTS_CRUD.CheckIfPlungerExists(PI_certificateid   => pi_certificateid ,
                                                                      PI_CERTIFICATIONTYPEID => pi_CertificationTypeID
                                                                    );
       BEGIN                                                         
       SELECT Attrib_value 
         INTO ls_SKU 
         FROM (SELECT To_CHAR(NVL(Attrib_Value,' ')) Attrib_Value 
                FROM  Material_Attribute
                WHERE Attrib_Name ='LEGACY_COOPER_SKU'
                 AND  Matl_Num =ls_Matl_Num
              );   
        EXCEPTION
           WHEN NO_DATA_FOUND THEN
           ls_SKU := '';
        END; 
      
        if ls_PlungerExists='y' then
            UPDATE  PlungerHdr SET
                  PROJECTNUMBER      = PS_PROJECTNUMBER ,
                  TIRENUMBER         = PI_TIRENUMBER,
                  TESTSPEC           = PS_TESTSPEC,
                  COMPLETIONDATE     = PD_COMPLETIONDATE,
                  DOTSERIALNUMBER    = PS_DOTSERIALNUMBER,
                  AVGBREAKINGENERGY  = PI_AVGBREAKINGENERGY,
                  PASSYN             = PS_PASSYN,
                  SerialDate         = PD_SERIALDATE ,
                  MFGWWYY            = ps_MFGWWYY,
                  MinPlunger         = PI_MINPLUNGER,
                  modifiedon         = Sysdate,
                  ModifiedBy         = ls_OperatorId,
                  Matl_Num           = ls_Matl_Num,    -- As per PRJ 3617,updating Matl_Num
                  SKU                = ls_SKU,
                  OperNum            = ps_Operation, --As per PRJ3617, added OperNum while updating
                  GTSpec             = ps_GTSPec
           WHERE CERTIFICATEID = pi_CertificateID And
                 CERTIFICATIONTYPEID = pi_CertificationTypeID ;
           SELECT Max(p.plungerid) into li_PlungerId
           FROM  PlungerHdr p
           WHERE CERTIFICATEID = pi_CertificateID And
                 CERTIFICATIONTYPEID = pi_CertificationTypeID ;
           delete from  plungerdtl where plungerid=li_plungerid;
           pi_PLUNGERID:=li_PlungerId;
        else
            INSERT INTO  PlungerHdr
              (
                PLUNGERID,
                PROJECTNUMBER,
                TIRENUMBER,
                TESTSPEC,
                COMPLETIONDATE,
                DOTSERIALNUMBER,
                AVGBREAKINGENERGY,
                PASSYN,
                CERTIFICATIONTYPEID,
                SerialDate,
                MFGWWYY,
                MinPlunger,
                CertificateID,
                Matl_Num,
                SKU,
                OperNum,
                GTSpec
               )
              VALUES
              (
                PLUNGERID_SEQ.NextVal,
                PS_PROJECTNUMBER,
                PI_TIRENUMBER,
                PS_TESTSPEC,
                PD_COMPLETIONDATE,
                PS_DOTSERIALNUMBER,
                PI_AVGBREAKINGENERGY,
                PS_PASSYN,
                pi_CertificationTypeID,
                PD_SerialDate,
                ps_MFGWWYY,
                PI_MinPlunger,
                pi_CertificateID,
                ls_Matl_Num,       -- As per PRJ 3617,Inserting Matl_Num
                ls_SKU,
                ps_Operation,     -- As per PRJ3617,inserting operation 
                ps_GTSPec
              );
               SELECT Max(p.plungerid) into li_PlungerId
               FROM  PlungerHdr p
               WHERE CERTIFICATEID = pi_CertificateID And
                    CERTIFICATIONTYPEID = pi_CertificationTypeID ;
           pi_PLUNGERID:=li_PlungerId;
        end if;
        COMMIT;
 EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:= sqlerrm || '-PLUNGER_Save . There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.PLUNGER_Save',
                AX_RECORDDATA    => 'ps_Matl_Num is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
           raise_application_error (-20005,ls_ErrorMsg);
         when li_ParametersAreInvalid then
            ls_ErrorMsg:= sqlerrm || '-PLUNGER_Save . There is one parameters is invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.PLUNGER_Save',
                AX_RECORDDATA    => 'ps_Matl_Num is parameters invalid..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || '-PLUNGER_Save . An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.PLUNGER_Save',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);
END PLUNGER_Save;

  procedure PLUNGERDETAIL_Save(PI_BREAKINGENERGY  IN NUMBER,
                               PI_PLUNGERID  IN NUMBER,
                               PI_ITERATION IN NUMBER,
                               ps_OperatorName in varchar2) as
      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
       li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      --varible
      ls_PLUNGERDETAILExists varchar2(1);
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
   BEGIN
         if PI_PLUNGERID is null  then
            raise li_ParametersAreNull;
          end if;
         if PI_PLUNGERID <= 0 then
            raise li_ParametersAreInvalid;
          end if;
          if ps_OperatorName is not null or ps_OperatorName <> '' then
            ls_OperatorId:= ps_OperatorName;
         end if ;
         INSERT INTO  PlungerDtl
              (
                BREAKINGENERGY,
                PLUNGERID,
                ITERATION,
                CreatedBy
              )
              VALUES
              (
                  PI_BREAKINGENERGY,
                  PI_PLUNGERID ,
                  PI_ITERATION,
                  ls_OperatorId
              );
              COMMIT;
  EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:= sqlerrm || ' - PLUNGERDETAIL_SAVE. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.PLUNGERDETAIL_SAVE',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20005,ls_ErrorMsg);
         when li_ParametersAreInvalid then
            ls_ErrorMsg:= sqlerrm || ' - PLUNGERDETAIL_SAVE. There is one parameters is invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.PLUNGERDETAIL_SAVE',
                AX_RECORDDATA    => 'ps_sku is parameters invalid..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || ' - PLUNGERDETAIL_SAVE. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.PLUNGERDETAIL_SAVE',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);
END PLUNGERDETAIL_SAVE;

  PROCEDURE BeadUnseat_Save(pi_BEADUNSEATID out Number,
                            ps_PROJECTNUMBER in Varchar2,
                            pi_TIRENUMBER in Number,
                            ps_TESTSPEC in Varchar2,
                            pd_COMPLETIONDATE in DATE,
                            ps_DOTSERIALNUMBER in Varchar2,
                            pi_LOWESTUNSEATVALUE in Number,
                            ps_PASSYN in Varchar2,
                            pi_CERTIFICATIONTYPEID in Number,
                            pd_SERIALDATE in DATE,
                            ps_MFGWWYY    IN VARCHAR2,
                            pi_MINBEADUNSEAT in Number,
                            ps_TESTPASSFAIL in Varchar2,
                            ps_OperatorName   in varchar2 ,
                            pi_CertificateID in number,
                            ps_Matl_Num  IN VARCHAR2,
                            ps_Operation IN VARCHAR2,
                            ps_GTSPEC IN VARCHAR2) AS
    /******************************************************************************
     NAME:       BeadUnseat_Save
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0
     1.1        10/2/2012     Harini         1.Replaced ps_SKU with ps_Matl_Num
                                              Added Lpad(matl_num) in the update,insert
                                              and in where condition of select list
                                             2. Added logic to get SKU to insert in Product table
     1.2        10/18/2012    Harini         1.Added Operation while updating and inserting. 
     1.3        10/30/2012    Harini         1.Included NO_DATA_FOUND exception block when no 
                                             SKU available for given Matl_Num and assign empty 
                                             for ls_SKU parameter
     1.4        11/04/2013     Harini       1.As per IDEA2706,Modified procedure by adding 
                                           ps_GTSPEC and ps_MFGWWYY parameters in Input and add 
                                           these paramters while inserting/Updating
    ******************************************************************************/
    --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
       li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      --varible
      ls_BeadUnseatExists varchar2(1);
      li_BeadUnseatID  BEADUNSEATHDR.BEADUNSEATID%type;
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      ls_SKU Product.SKU%TYPE;
      ls_Matl_Num Product.Matl_Num%TYPE;
   begin
         if pi_CertificationTypeID is null  then
            raise li_ParametersAreNull;
          end if;
         if pi_CertificationTypeID <= 0  then
            raise li_ParametersAreInvalid;
          end if;
          if ps_OperatorName   is not null or ps_OperatorName   <> '' then
                ls_OperatorId:=ps_OperatorName ;
          end if ;
          ls_Matl_Num := LPAD(ps_Matl_Num,18,0);
          ls_BeadUnseatExists:= TESTRESULTS_CRUD.CheckIfBeadUnseatExists(PI_certificateid   => pi_certificateid ,
                                                                      PI_CERTIFICATIONTYPEID => pi_CertificationTypeID
                                                                    );
     BEGIN                                                         
       SELECT Attrib_value 
         INTO ls_SKU 
         FROM (SELECT To_CHAR(NVL(Attrib_Value,' ')) Attrib_Value 
                FROM  Material_Attribute
                WHERE Attrib_Name ='LEGACY_COOPER_SKU'
                 AND  Matl_Num =ls_Matl_Num
              );   
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
         ls_SKU := '';
      END;
      
       if ls_BeadUnseatExists='y' then
          UPDATE  BEADUNSEATHDR set
                PROJECTNUMBER     = ps_PROJECTNUMBER,
                TIRENUMBER        = pi_TIRENUMBER,
                TESTSPEC          = ps_TESTSPEC,
                COMPLETIONDATE    = pd_COMPLETIONDATE,
                DOTSERIALNUMBER   = ps_DOTSERIALNUMBER,
                LOWESTUNSEATVALUE = pi_LOWESTUNSEATVALUE,
                PASSYN            = ps_PASSYN,
                CERTIFICATIONTYPEID = pi_CERTIFICATIONTYPEID,
                SERIALDATE        = pd_SERIALDATE,
                MFGWWYY           = ps_MFGWWYY,
                MINBEADUNSEAT     = pi_MINBEADUNSEAT,
                TESTPASSFAIL      = ps_TESTPASSFAIL,
                Modifiedby        = ls_OperatorId,
                ModifiedOn        = Sysdate,
                Matl_Num          = ls_Matl_Num,  -- As per PRJ3617,Updating Matl_Num
                SKU               = ls_SKU,
                OperNum           = ps_Operation, --As per PRJ3617, added OperNum while updating
                GTSpec            = ps_GTSPEC
            WHERE CERTIFICATEID = pi_CertificateID And
                  CERTIFICATIONTYPEID = pi_CertificationTypeID ;
           SELECT Max(BEADUNSEATID) into li_BeadUnseatID
            FROM  BEADUNSEATHDR buh
            WHERE CERTIFICATEID = pi_CertificateID And
                    CERTIFICATIONTYPEID = pi_CertificationTypeID ;
            delete from  beadunseatdtl where beadunseatid=li_beadunseatid;
             pi_BEADUNSEATID:=  li_BeadUnseatID;
       else
            Insert INTO  BEADUNSEATHDR
            (
              BEADUNSEATID,
              PROJECTNUMBER,
              TIRENUMBER,
              TESTSPEC,
              COMPLETIONDATE,
              DOTSERIALNUMBER,
              LOWESTUNSEATVALUE,
              PASSYN,
              CERTIFICATIONTYPEID,
              SERIALDATE,
              MFGWWYY,
              MINBEADUNSEAT,
              CREATEDBY,
              TESTPASSFAIL,
              CERTIFICATEID,
              Matl_Num,
              SKU,
              OperNum,
              GTSpec
            )
            VALUES
            (
              BEADUNSEATID_SEQ.NextVal,
              ps_PROJECTNUMBER,
              pi_TIRENUMBER,
              ps_TESTSPEC,
              pd_COMPLETIONDATE,
              ps_DOTSERIALNUMBER,
              pi_LOWESTUNSEATVALUE,
              ps_PASSYN,
              pi_CERTIFICATIONTYPEID,
              pd_SERIALDATE,
              ps_MFGWWYY,
              pi_MINBEADUNSEAT,
              ls_OperatorId,
              ps_TESTPASSFAIL,
              pi_CertificateID,
              ls_Matl_Num, -- As per PRJ3617,Inserting Matl_Num
              ls_SKU,
              ps_Operation, -- As per PRJ3617,inserting operation
              ps_GTSPEC
            );
            --Gets the Id that just was inserted on the table to be returned
           SELECT Max(BEADUNSEATID) into li_BeadUnseatID
            FROM  BEADUNSEATHDR buh
           WHERE CERTIFICATEID = pi_CertificateID And
                 CERTIFICATIONTYPEID = pi_CertificationTypeID ;
             pi_BEADUNSEATID:=  li_BeadUnseatID;
       end if;
       COMMIT;
   EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:= sqlerrm || ' - BeadUnseat_Save. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.BeadUnseat_Save',
                AX_RECORDDATA    => 'ps_Matl_Num is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20005,ls_ErrorMsg);
         when li_ParametersAreInvalid then
            ls_ErrorMsg:= sqlerrm || ' - BeadUnseat_Save. There is one parameters is invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.BeadUnseat_Save',
                AX_RECORDDATA    => 'ps_Matl_Num is parameters invalid..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || ' - BeadUnseat_Save.  An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.BeadUnseat_Save',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);
   END BeadUnseat_Save;
   
   Procedure BeadUnseatDetail_Save(pi_BEADUNSEATID in NUMBER,
                                   pi_UNSEATFORCE in NUMBER,
                                   PI_ITERATION IN NUMBER,
                                   ps_OperatorName   in varchar2) as
      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
       li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      --varible
      ls_BeadUnseatDETAILExists varchar2(1);
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
   begin
        if pi_BEADUNSEATID is null then
          raise li_ParametersAreNull;
        end if;
        if pi_BEADUNSEATID <=0 then
          raise li_ParametersAreInvalid;
        end if;
        if ps_OperatorName   is not null or ps_OperatorName   <> '' then
                ls_OperatorId:=ps_OperatorName ;
          end if ;
         INSERT INTO BEADUNSEATDTL ( BEADUNSEATID, UNSEATFORCE,ITERATION,CreatedBy )
         VALUES   (pi_BEADUNSEATID, pi_UNSEATFORCE,PI_ITERATION,ls_OperatorId );
        COMMIT;
    EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:= sqlerrm || ' - BeadUnseatDetail_Save. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.BeadUnseatDetail_Save',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20005,ls_ErrorMsg);
         when li_ParametersAreInvalid then
            ls_ErrorMsg:= sqlerrm || ' - BeadUnseatDetail_Save. There is one parameters is invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.BeadUnseatDetail_Save',
                AX_RECORDDATA    => 'ps_sku is parameters invalid..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || ' - BeadUnseatDetail_Save. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.BeadUnseatDetail_Save',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);
   end BeadUnseatDetail_Save;
   
  PROCEDURE HighSpeedHdr_Save( pi_HIGHSPEEDID          out number,
                                ps_PROJECTNUMBER        in varchar2,
                                pi_TIRENUM              in number  ,
                                ps_TESTSPEC             in varchar2,
                                pd_COMPETIONDATE        in DATE,
                                ps_DOTSERIALNUMBER      in varchar2,
                                ps_MFGWWYY              in varchar2,
                                pd_PRECONDSTARTDATE     in DATE,
                                pi_PRECONDSARTTEMP      in number ,
                                pd_precondtime          in  highspeedhdr.precondtime%type,
                                pi_RIMDIAMETER          in  highspeedhdr.rimdiameter%type,
                                pi_RIMWIDTH             in  highspeedhdr.rimwidth%type,
                                pd_PRECONDENDDATE       in DATE,
                                pi_PRECONDENDTEMP       in number ,
                                pi_INFLATIONPRESSURE    in number ,
                                pi_BEFOREDIAMETER       in  highspeedhdr.BEFOREDIAMETER%type,
                                pi_AFTERDIAMETER        in  highspeedhdr.AFTERDIAMETER%type,
                                pi_BEFOREINFLATION      in number ,
                                pi_AFTERINFLATION       in number ,
                                pi_WHEELPOSITION        in number ,
                                pi_WHEELNUMBER          in number ,
                                pi_FINALTEMP            in number ,
                                pi_FINALDISTANCE        in  highspeedhdr.FINALDISTANCE%type,
                                pi_FINALINFLATION       in number ,
                                pd_POSTCONDSTARTDATE    in DATE,
                                pd_POSTCONDENDDATE      in DATE,
                                pi_POSTCONDENDTEMP      in number ,
                                ps_PASSYN               in varchar2,
                                pd_SERIALDATE           in DATE,
                                pi_POSTCONDTIME         in  highspeedhdr.POSTCONDTIME%type,
                                pi_CERTIFICATIONTYPEID  in number ,
                                pi_DIAMETERTESTDRUM in Number,
                                pi_PRECONDTEMP in Number,
                                pi_INFLATIONPRESSUREREADJUSTED in Number,
                                pi_CIRCUNFERENCEBEFORETEST in Number,
                                pi_WHEELSPEEDRPM in Number,
                                pi_WHEELSPEEDKMH in Number,
                                pi_CIRCUNFERENCEAFTERTEST in Number,
                                pi_ODDIFERENCE in Number,
                                pi_ODDIFERENCETOLERANCE in Number,
                                ps_SERIENOM in Varchar2,
                                ps_FINALJUDGEMENT in Varchar2,
                                ps_APPROVER in Varchar2,
                                pi_PASSATKMH in Number,
                                ps_SPEEDTTESTPASSFAIL in Varchar2,
                                pi_SPEEDTOTALTIME in Number,
                                pi_MAXSPEED in Number,
                                pi_MAXLOAD in Number,
                                ps_OperatorName in Varchar2,
                                pi_CertificateID in number,
                                ps_Matl_Num IN VARCHAR2,
                                ps_Operation IN VARCHAR2,
                                ps_GTSPEC IN VARCHAR2) AS
   /******************************************************************************
     NAME:       HighSpeedHdr_Save
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0
     1.1        10/2/2012     Harini         1.Replaced ps_SKU with ps_Matl_Num
                                              Added Lpad(matl_num) in the update,insert
                                              and in where condition of select list
                                             2. Added logic to get SKU to insert in Product table
     1.2        10/18/2012    Harini         1.Added Operation while updating and inserting.
     1.3        10/30/2012    Harini         1.Included NO_DATA_FOUND exception block when no 
                                             SKU available for given Matl_Num and assign empty 
                                             for ls_SKU parameter
     1.4        11/04/2013     Harini       1.As per IDEA2706,Modified procedure by adding 
                                              ps_GTSPEC parameter in Input and add this
                                              paramter while inserting/Updating 
    ******************************************************************************/
      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
       li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      --varible
      ls_HighSpeedExist varchar2(1);
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      li_CurrentHighSpeedID  HIGHSPEEDHDR.HIGHSPEEDID%type;
      li_POSTCONDTIME        highspeedhdr.POSTCONDTIME%type;
      ls_SKU Product.SKU%TYPE;
      ls_Matl_Num Product.Matl_Num%TYPE;
   begin
          if ps_OperatorName   is not null or ps_OperatorName   <> '' then
            ls_OperatorId:=ps_OperatorName ;
          end if;
          ls_Matl_Num := LPAD(ps_Matl_Num,18,0);
          ls_HighSpeedExist:=  TESTRESULTS_CRUD.CHECKIFHIGHSPEEDEXISTS(
                                                        PI_certificateid   => pi_certificateid ,
                                                        PI_CERTIFICATIONTYPEID => PI_CERTIFICATIONTYPEID
                                                      );
      
       BEGIN                                                         
       SELECT Attrib_value 
         INTO ls_SKU 
         FROM (SELECT To_CHAR(NVL(Attrib_Value,' ')) Attrib_Value 
                FROM  Material_Attribute
                WHERE Attrib_Name ='LEGACY_COOPER_SKU'
                 AND  Matl_Num =ls_Matl_Num
              );   
        EXCEPTION
           WHEN NO_DATA_FOUND THEN
           ls_SKU := '';
        END;
   
       --jeseitz added 7/29/13 because SAP was bringing back and incorrectly formatted
        if pi_PostCondTime > 9999 then
            li_PostCondTime := 0;
        else
            li_PostCondTime := pi_PostCondTime;
        end if;
           
   
          if ls_HighSpeedExist = 'y' then
              UPDATE  HIGHSPEEDHDR SET
                    PROJECTNUMBER               = ps_PROJECTNUMBER,
                    TIRENUM                     = pi_TIRENUM,
                    TESTSPEC                    = ps_TESTSPEC,
                    COMPETIONDATE               = pd_COMPETIONDATE,
                    DOTSERIALNUMBER             = ps_DOTSERIALNUMBER,
                    MFGWWYY                     = ps_MFGWWYY,
                    PRECONDSTARTDATE            = pd_PRECONDSTARTDATE,
                    PRECONDSARTTEMP             = pi_PRECONDSARTTEMP,
                    RIMDIAMETER                 = pi_RIMDIAMETER,
                    RIMWIDTH                    = pi_RIMWIDTH,
                    PRECONDENDDATE              = pd_PRECONDENDDATE,
                    PRECONDENDTEMP              = pi_PRECONDENDTEMP,
                    INFLATIONPRESSURE           = pi_INFLATIONPRESSURE,
                    BEFOREDIAMETER              = pi_BEFOREDIAMETER,
                    AFTERDIAMETER               = pi_AFTERDIAMETER,
                    BEFOREINFLATION             = pi_BEFOREINFLATION,
                    AFTERINFLATION              = pi_AFTERINFLATION,
                    WHEELPOSITION               = pi_WHEELPOSITION,
                    WHEELNUMBER                 = pi_WHEELNUMBER,
                    FINALTEMP                   = pi_FINALTEMP,
                    FINALDISTANCE               = pi_FINALDISTANCE,
                    FINALINFLATION              = pi_FINALINFLATION,
                    POSTCONDSTARTDATE           = pd_POSTCONDSTARTDATE,
                    POSTCONDENDDATE             = pd_POSTCONDENDDATE,
                    POSTCONDENDTEMP             = pi_POSTCONDENDTEMP,
                    PASSYN                      = ps_PASSYN,
                    SERIALDATE                  = pd_SERIALDATE,
                    POSTCONDTIME                = li_POSTCONDTIME,
                    MODIFIEDBY                  = ls_OperatorId,
                    MODIFIEDON                  = SYSDATE,
                    DIAMETERTESTDRUM            = pi_DIAMETERTESTDRUM,
                    PRECONDTEMP                 = pi_PRECONDTEMP,
                    INFLATIONPRESSUREREADJUSTED = pi_INFLATIONPRESSUREREADJUSTED,
                    CIRCUNFERENCEBEFORETEST     = pi_CIRCUNFERENCEBEFORETEST,
                    WHEELSPEEDRPM               = pi_WHEELSPEEDRPM,
                    WHEELSPEEDKMH               = pi_WHEELSPEEDKMH,
                    CIRCUNFERENCEAFTERTEST      = pi_CIRCUNFERENCEAFTERTEST,
                    ODDIFERENCE                 = pi_ODDIFERENCE,
                    ODDIFERENCETOLERANCE        = pi_ODDIFERENCETOLERANCE,
                    SERIENOM                    = ps_SERIENOM,
                    FINALJUDGEMENT              = ps_FINALJUDGEMENT,
                    APPROVER                    = ps_APPROVER,
                    PASSATKMH                   = pi_PASSATKMH,
                    SPEEDTTESTPASSFAIL          = ps_SPEEDTTESTPASSFAIL,
                    SPEEDTOTALTIME              = pi_SPEEDTOTALTIME,
                    MAXSPEED                    = pi_MAXSPEED,
                    MAXLOAD                     = pi_MAXLOAD,
                    Matl_Num                    = ls_Matl_Num,  -- As per PRJ3617,updating Matl_Num
                    SKU                         = ls_SKU,
                    OperNum                     = ps_Operation, --As per PRJ3617, added OperNum while updating
                    GTSpec                      = ps_GTSPec
            WHERE CERTIFICATEID = pi_CertificateID And
                  CERTIFICATIONTYPEID = pi_CertificationTypeID ;
            SELECT Max(HIGHSPEEDID) into li_CurrentHighSpeedID
             FROM  HIGHSPEEDHDR h
            WHERE CERTIFICATEID = pi_CertificateID And
                  CERTIFICATIONTYPEID = pi_CertificationTypeID ;
              Delete from  HIGHSPEEDDTL where HIGHSPEEDID=li_CurrentHighSpeedID;
              Delete from  speedtestdetail where HIGHSPEEDID=li_CurrentHighSpeedID;
               pi_highspeedid :=  li_CurrentHighSpeedID;
          else
              INSERT INTO  HIGHSPEEDHDR
                    (
                      HIGHSPEEDID,
                      PROJECTNUMBER,
                      TIRENUM,
                      TESTSPEC,
                      COMPETIONDATE,
                      DOTSERIALNUMBER,
                      MFGWWYY,
                      PRECONDSTARTDATE,
                      PRECONDSARTTEMP,
                      RIMDIAMETER,
                      RIMWIDTH,
                      PRECONDENDDATE,
                      PRECONDENDTEMP,
                      INFLATIONPRESSURE,
                      BEFOREDIAMETER,
                      AFTERDIAMETER,
                      BEFOREINFLATION,
                      AFTERINFLATION,
                      WHEELPOSITION,
                      WHEELNUMBER,
                      FINALTEMP,
                      FINALDISTANCE,
                      FINALINFLATION,
                      POSTCONDSTARTDATE,
                      POSTCONDENDDATE,
                      POSTCONDENDTEMP,
                      PASSYN,
                      SERIALDATE,
                      POSTCONDTIME,
                      CERTIFICATIONTYPEID,
                      CREATEDBY,
                      CREATEDON,
                      DIAMETERTESTDRUM,
                      PRECONDTEMP,
                      INFLATIONPRESSUREREADJUSTED,
                      CIRCUNFERENCEBEFORETEST,
                      WHEELSPEEDRPM,
                      WHEELSPEEDKMH,
                      CIRCUNFERENCEAFTERTEST,
                      ODDIFERENCE,
                      ODDIFERENCETOLERANCE,
                      SERIENOM,
                      FINALJUDGEMENT,
                      APPROVER,
                      PASSATKMH,
                      SPEEDTTESTPASSFAIL,
                      SPEEDTOTALTIME,
                      MAXSPEED,
                      MAXLOAD,
                      CertificateID,
                      Matl_Num,
                      SKU,
                      OperNum,
                      GTSpec
                      )
                VALUES
                    (
                      HIGHSPEEDID_SEQ.Nextval,
                      ps_PROJECTNUMBER,
                      pi_TIRENUM,
                      ps_TESTSPEC,
                      pd_COMPETIONDATE,
                      ps_DOTSERIALNUMBER,
                      ps_MFGWWYY,
                      pd_PRECONDSTARTDATE,
                      pi_PRECONDSARTTEMP,
                      pi_RIMDIAMETER,
                      pi_RIMWIDTH ,
                      pd_PRECONDENDDATE,
                      pi_PRECONDENDTEMP ,
                      pi_INFLATIONPRESSURE,
                      pi_BEFOREDIAMETER,
                      pi_AFTERDIAMETER,
                      pi_BEFOREINFLATION,
                      pi_AFTERINFLATION,
                      pi_WHEELPOSITION,
                      pi_WHEELNUMBER,
                      pi_FINALTEMP,
                      pi_FINALDISTANCE,
                      pi_FINALINFLATION,
                      pd_POSTCONDSTARTDATE,
                      pd_POSTCONDENDDATE ,
                      pi_POSTCONDENDTEMP ,
                      ps_PASSYN ,
                      pd_SERIALDATE ,
                      li_POSTCONDTIME ,
                      pi_CERTIFICATIONTYPEID,
                      ls_OperatorId,
                      sysdate,
                      pi_DIAMETERTESTDRUM,
                      pi_PRECONDTEMP,
                      pi_INFLATIONPRESSUREREADJUSTED,
                      pi_CIRCUNFERENCEBEFORETEST,
                      pi_WHEELSPEEDRPM,
                      pi_WHEELSPEEDKMH,
                      pi_CIRCUNFERENCEAFTERTEST,
                      pi_ODDIFERENCE,
                      pi_ODDIFERENCETOLERANCE,
                      ps_SERIENOM,
                      ps_FINALJUDGEMENT,
                      ps_APPROVER,
                      pi_PASSATKMH,
                      ps_SPEEDTTESTPASSFAIL,
                      pi_SPEEDTOTALTIME,
                      pi_MAXSPEED,
                      pi_MAXLOAD,
                      pi_CertificateID,
                      ls_Matl_Num, -- As per PRJ3617,INserting Matl_Num
                      ls_SKU,
                      ps_Operation,   -- As per PRJ3617,inserting operation
                      ps_GTSPec
                    );
                 SELECT Max(HIGHSPEEDID) into li_CurrentHighSpeedID
                 FROM  HIGHSPEEDHDR h
                 WHERE certificateid = pi_CertificateID AND
                       h.CERTIFICATIONTYPEID = pi_CertificationTypeID;
                 Delete from  HIGHSPEEDDTL where HIGHSPEEDID=li_CurrentHighSpeedID;
                 Delete from  speedtestdetail where HIGHSPEEDID=li_CurrentHighSpeedID;
                 pi_highspeedid :=  li_CurrentHighSpeedID;
          end if;
          COMMIT;
   EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:= sqlerrm || 'HighSpeedHdr_Save. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.HighSpeedHdr_Save',
                AX_RECORDDATA    => 'ps_Matl_Num is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20005,ls_ErrorMsg);
         when li_ParametersAreInvalid then
            ls_ErrorMsg:= sqlerrm || 'HighSpeedHdr_Save. There is one parameters is invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.HighSpeedHdr_Save',
                AX_RECORDDATA    => 'ps_Matl_Num is parameters invalid..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || 'HighSpeedHdr_Save. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.HighSpeedHdr_Save',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);
   END HighSpeedHdr_Save;
   
   procedure HighSpeedDetail_Save ( pi_HIGHSPEEDID in Number,
                                    pi_TESTSTEP in number,
                                    pi_TIMEINMIN in Number,
                                    pi_SPEED in  HighSpeedDtl.SPEED%Type,
                                    pi_TOTMILES in  HighSpeedDtl.TOTMILES%Type,
                                    pi_LOAD in  HighSpeedDtl.LOAD%Type,
                                    pi_LOADPERCENT in Number,
                                    pi_SETINFLATION in Number,
                                    pi_AMBTEMP in Number,
                                    pi_INFPRESSURE in Number,
                                    pd_STEPCOMPLETIONDATE in HighSpeedDtl.STEPCOMPLETIONDATE%Type,
                                    ps_OperatorID in varchar2) as
     --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
       li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      --varible
      ls_HighSpeedExist varchar2(1);
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
   begin
        if  ps_OperatorID is not null or ps_OperatorID <> '' then
          ls_OperatorId:=ps_OperatorID;
        end if;
        INSERT INTO HIGHSPEEDDTL
          (
            HIGHSPEEDID,
            TESTSTEP,
            TIMEINMIN,
            SPEED,
            TOTMILES,
            LOAD,
            LOADPERCENT,
            SETINFLATION,
            AMBTEMP,
            INFPRESSURE,
            STEPCOMPLETIONDATE,
            CREATEDBY
          )
          VALUES
          (
            pi_HIGHSPEEDID,
            pi_TESTSTEP ,
            pi_TIMEINMIN ,
            pi_SPEED ,
            pi_TOTMILES ,
            pi_LOAD ,
            pi_LOADPERCENT ,
            pi_SETINFLATION ,
            pi_AMBTEMP ,
            pi_INFPRESSURE ,
            pd_STEPCOMPLETIONDATE ,
            ls_OperatorId
          );
          COMMIT;
   EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:= sqlerrm || '- HighSpeedDetail_Save. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.HighSpeedDetail_Save',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20005,ls_ErrorMsg);
         when li_ParametersAreInvalid then
            ls_ErrorMsg:= sqlerrm || '- HighSpeedDetail_Save. There is one parameters is invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.HighSpeedDetail_Save',
                AX_RECORDDATA    => 'ps_sku is parameters invalid..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20006,ls_ErrorMsg);
                    when DUP_VAL_ON_INDEX then
            ---this happens when inserting multiple highspeed recoreds with step of 0
            ---no error if step = 0
            if  pi_TESTSTEP <> 0 then
             ls_ErrorMsg:= sqlerrm || '- HighSpeedDetail_Save. Duplicate step number.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.HighSpeedDetail_Save '||pi_TESTSTEP,
                AX_RECORDDATA    => ' unique constraint error ',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20007,ls_ErrorMsg);           
         end if;   
         when others then
              ls_ErrorMsg:=  sqlerrm || '- HighSpeedDetail_Save. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.HighSpeedDetail_Save',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);
   end HighSpeedDetail_Save;
   
   Procedure HIghSpeed_SpeedTestDetail_Save(pi_ITERATION in Number,
                                            pd_TIME in Date,
                                            pi_SPEED in Number,
                                            pi_HIGHSPEEDID in Number,
                                            ps_OperatorName in Varchar2) as
      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
       li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      --varible
      ls_HighSpeedExist varchar2(1);
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
   begin
       if pi_HIGHSPEEDID is null or pi_HIGHSPEEDID <= 0 then
          raise li_ParametersAreNull;
       end if;
       if pi_HIGHSPEEDID <= 0 then
          raise li_ParametersAreInvalid;
       end if;
       if  ps_OperatorName is not null or ps_OperatorName <> '' then
          ls_OperatorId:=ps_OperatorName;
        end if;
         INSERT INTO  SPEEDTESTDETAIL
        (
          ITERATION,
          TIME,
          SPEED,
          HIGHSPEEDID,
          CREATEDBY
        )
        VALUES
        (
          pi_ITERATION,
          pd_TIME,
          pi_SPEED,
          pi_HIGHSPEEDID,
          ls_OperatorId
        );
        COMMIT;
   EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:= sqlerrm || ' - HIghSpeed_SpeedTestDetail_Save. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.HIghSpeed_SpeedTestDetail_Save',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20005,ls_ErrorMsg);
         when li_ParametersAreInvalid then
            ls_ErrorMsg:= sqlerrm || ' - HIghSpeed_SpeedTestDetail_Save. There is one parameters is invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.HIghSpeed_SpeedTestDetail_Save',
                AX_RECORDDATA    => 'ps_sku is parameters invalid..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || ' - HIghSpeed_SpeedTestDetail_Save. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.HIghSpeed_SpeedTestDetail_Save',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);
   end HIghSpeed_SpeedTestDetail_Save;
   procedure SoundHDR_Save(   ps_UserID                     in varchar2,
                              pi_SoundID                    out number,
                              ps_PROJECTNUMBER              in varchar2,
                              pi_TIRENUMBER                 in number,
                              ps_TESTSPEC                   in varchar2,
                              ps_TESTREPORTNUMBER           in varchar2,
                              ps_MANUFACTUREANDBRAND        in varchar2,
                              ps_TIRECLASS                  in varchar2,
                              ps_CATEGORYOFUSE              in varchar2,
                              pd_DATEOFTEST                 in date,
                              ps_TESTVEHICULE               in varchar2,
                              ps_TESTVEHICULEWHEELBASE      in varchar2,
                              ps_LOCATIONOFTESTTRACK        in varchar2,
                              pd_DATETRACKCERTIFTOISO       in date,
                              ps_TIRESIZEDESIGNATION        in varchar2,
                              ps_TIRESERVICEDESCRIPTION     in varchar2,
                              ps_TESTMASS_FRONTL            in varchar2,
                              ps_TESTMASS_FRONTR            in varchar2,
                              ps_TESTMASS_REARL             in varchar2,
                              ps_TESTMASS_REARR             in varchar2,
                              ps_TIRELOADINDEX_FRONTL       in varchar2,
                              ps_TIRELOADINDEX_FRONTR       in varchar2,
                              ps_TIRELOADINDEX_REARL        in varchar2,
                              ps_TIRELOADINDEX_REARR        in varchar2,
                              ps_INFLATIONPRESSURECO_FRONTL in varchar2,
                              ps_INFLATIONPRESSURECO_FRONTR in varchar2,
                              ps_INFLATIONPRESSURECO_REARL  in varchar2,
                              ps_INFLATIONPRESSURECO_REARR  in varchar2,
                              ps_TESTRIMWIDTHCODE           in varchar2,
                              ps_TEMPMEASURESENSORTYPE      in varchar2,
                              pi_CERTIFICATIONTYPEID        in number,
                              pi_SKUID                      in number,
                              ps_ReferenceInflationPressure in varchar2,
                              pi_CertificateID in number,
                              ps_Operation     IN VARCHAR2,
                              ps_MFGWWYY    IN VARCHAR2,
                              ps_GTSPEC IN VARCHAR2) as
   /******************************************************************************
     NAME:       SoundHDR_Save
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0
     1.1        10/18/2012    Harini         1.Added Operation while updating and inserting.
     1.4        11/04/2013    Harini         1.As per IDEA2706,Modified procedure by adding 
                                             ps_GTSPEC and ps_MFGWWYY parameters in Input and add 
                                             these paramters while inserting/Updating
    ******************************************************************************/
      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
       li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      --varible
      ls_SoundExist varchar2(1);
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      li_CurrentSoundID  SOUNDHDR.SOUNDID%type;
   begin
        if  ps_UserID is not null or ps_UserID <> '' then
          ls_OperatorId:=ps_UserID;
        end if;
        ls_SoundExist:=  TESTRESULTS_CRUD.CheckIfSoundExixts(
                                                        PI_certificateid   => pi_certificateid ,
                                                        PI_CERTIFICATIONTYPEID => PI_CERTIFICATIONTYPEID
                                                      );
        if ls_SoundExist = 'y' then
               UPDATE SOUNDHDR set
                      PROJECTNUMBER              = ps_PROJECTNUMBER   ,
                      TIRENUMBER                 = pi_TIRENUMBER   ,
                      TESTSPEC                   = ps_TESTSPEC   ,
                      TESTREPORTNUMBER           = ps_TESTREPORTNUMBER   ,
                      MANUFACTUREANDBRAND        = ps_MANUFACTUREANDBRAND   ,
                      TIRECLASS                  = ps_TIRECLASS   ,
                      CATEGORYOFUSE              = ps_CATEGORYOFUSE   ,
                      DATEOFTEST                 = pd_DATEOFTEST   ,
                      TESTVEHICULE               = ps_TESTVEHICULE   ,
                      TESTVEHICULEWHEELBASE      = ps_TESTVEHICULEWHEELBASE   ,
                      LOCATIONOFTESTTRACK        = ps_LOCATIONOFTESTTRACK   ,
                      DATETRACKCERTIFTOISO       = pd_DATETRACKCERTIFTOISO   ,
                      TIRESIZEDESIGNATION        = ps_TIRESIZEDESIGNATION   ,
                      TIRESERVICEDESCRIPTION     = ps_TIRESERVICEDESCRIPTION   ,
                      TESTMASS_FRONTL            = ps_TESTMASS_FRONTL   ,
                      TESTMASS_FRONTR            = ps_TESTMASS_FRONTR   ,
                      TESTMASS_REARL             = ps_TESTMASS_REARL   ,
                      TESTMASS_REARR             = ps_TESTMASS_REARR   ,
                      TIRELOADINDEX_FRONTL       = ps_TIRELOADINDEX_FRONTL   ,
                      TIRELOADINDEX_FRONTR       = ps_TIRELOADINDEX_FRONTR   ,
                      TIRELOADINDEX_REARL        = ps_TIRELOADINDEX_REARL   ,
                      TIRELOADINDEX_REARR        = ps_TIRELOADINDEX_REARR   ,
                      INFLATIONPRESSURECO_FRONTL = ps_INFLATIONPRESSURECO_FRONTL   ,
                      INFLATIONPRESSURECO_FRONTR = ps_INFLATIONPRESSURECO_FRONTR   ,
                      INFLATIONPRESSURECO_REARL  = ps_INFLATIONPRESSURECO_REARL   ,
                      INFLATIONPRESSURECO_REARR  = ps_INFLATIONPRESSURECO_REARR   ,
                      TESTRIMWIDTHCODE           = ps_TESTRIMWIDTHCODE   ,
                      TEMPMEASURESENSORTYPE      = ps_TEMPMEASURESENSORTYPE   ,
                      MODIFIEDBY                 = ls_OperatorId   ,
                      MODIFIEDON                 = SYSDATE,
                      ReferenceInflationPressure = ps_ReferenceInflationPressure,
                      OperNum                    = ps_Operation, --As per PRJ3617, added OperNum while updating
                      MFGWWYY                    = ps_MFGWWYY,
                      GTSpec                     = ps_GTSPec
               WHERE CERTIFICATEID = pi_CertificateID And
                    CERTIFICATIONTYPEID = pi_CertificationTypeID ;
            SELECT Max(SOUNDID) into li_CurrentSoundID
             FROM  SOUNDHDR s
             WHERE CERTIFICATEID = pi_CertificateID AND
                   s.CERTIFICATIONTYPEID = pi_CertificationTypeID;
              Delete from  SOUNDDETAIL where SOUNDID=li_CurrentSoundID;
               pi_SoundID :=  li_CurrentSoundID;
        else
              INSERT INTO SOUNDHDR
                            (
                              SOUNDID,
                              PROJECTNUMBER,
                              TIRENUMBER,
                              TESTSPEC,
                              TESTREPORTNUMBER,
                              MANUFACTUREANDBRAND,
                              TIRECLASS,
                              CATEGORYOFUSE,
                              DATEOFTEST,
                              TESTVEHICULE,
                              TESTVEHICULEWHEELBASE,
                              LOCATIONOFTESTTRACK,
                              DATETRACKCERTIFTOISO,
                              TIRESIZEDESIGNATION,
                              TIRESERVICEDESCRIPTION,
                              TESTMASS_FRONTL,
                              TESTMASS_FRONTR,
                              TESTMASS_REARL,
                              TESTMASS_REARR,
                              TIRELOADINDEX_FRONTL,
                              TIRELOADINDEX_FRONTR,
                              TIRELOADINDEX_REARL,
                              TIRELOADINDEX_REARR,
                              INFLATIONPRESSURECO_FRONTL,
                              INFLATIONPRESSURECO_FRONTR,
                              INFLATIONPRESSURECO_REARL,
                              INFLATIONPRESSURECO_REARR,
                              TESTRIMWIDTHCODE,
                              TEMPMEASURESENSORTYPE,
                              CERTIFICATIONTYPEID,
                              CREATEDBY,
                              CREATEDON,
                              MODIFIEDBY,
                              MODIFIEDON,
                              ReferenceInflationPressure,
                              CertificateID,
                              OperNum,
                              MFGWWYY,
                              GTSpec
                            )
                            VALUES
                            (
                              SOUNDID_SEQ.NextVAl,
                              ps_PROJECTNUMBER,
                              pi_TIRENUMBER,
                              ps_TESTSPEC,
                              ps_TESTREPORTNUMBER,
                              ps_MANUFACTUREANDBRAND,
                              ps_TIRECLASS,
                              ps_CATEGORYOFUSE,
                              pd_DATEOFTEST,
                              ps_TESTVEHICULE,
                              ps_TESTVEHICULEWHEELBASE,
                              ps_LOCATIONOFTESTTRACK,
                              pd_DATETRACKCERTIFTOISO,
                              ps_TIRESIZEDESIGNATION,
                              ps_TIRESERVICEDESCRIPTION,
                              ps_TESTMASS_FRONTL,
                              ps_TESTMASS_FRONTR,
                              ps_TESTMASS_REARL,
                              ps_TESTMASS_REARR,
                              ps_TIRELOADINDEX_FRONTL,
                              ps_TIRELOADINDEX_FRONTR,
                              ps_TIRELOADINDEX_REARL,
                              ps_TIRELOADINDEX_REARR,
                              ps_INFLATIONPRESSURECO_FRONTL,
                              ps_INFLATIONPRESSURECO_FRONTR,
                              ps_INFLATIONPRESSURECO_REARL,
                              ps_INFLATIONPRESSURECO_REARR,
                              ps_TESTRIMWIDTHCODE,
                              ps_TEMPMEASURESENSORTYPE,
                              pi_CERTIFICATIONTYPEID,
                              ls_OperatorId,
                              SYSDATE,
                              ls_OperatorId,
                              SYSDATE,
                              ps_ReferenceInflationPressure,
                              pi_CertificateID,
                              ps_Operation,     -- As per PRJ3617,inserting operation 
                              ps_MFGWWYY,
                              ps_GTSPec
                            );
                             SELECT Max(SOUNDID) into li_CurrentSoundID
                             FROM  SOUNDHDR s
                             WHERE CERTIFICATEID = pi_CertificateID And
                                   CERTIFICATIONTYPEID = pi_CertificationTypeID ;
                            pi_SoundID :=  li_CurrentSoundID;
        end if;
        COMMIT;
   EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:= sqlerrm || 'SoundHDR_Save. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.SoundHDR_Save',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20005,ls_ErrorMsg);
         when li_ParametersAreInvalid then
            ls_ErrorMsg:= sqlerrm || 'SoundHDR_Save. There is one parameters is invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.SoundHDR_Save',
                AX_RECORDDATA    => 'ps_sku is parameters invalid..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || 'SoundHDR_Save. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.SoundHDR_Save',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);
   end SoundHDR_Save;
  procedure SoundDetail_Save( ps_UserID in varchar2,
                              pi_ITERATION in number,
                              ps_TESTSPEED  in varchar2,
                              ps_DIRECTIONOFRUN  in varchar2,
                              ps_SOUNDLEVELLEFT  in varchar2,
                              ps_SOUNDLEVELRIGHT  in varchar2,
                              ps_AIRTEMP  in varchar2,
                              ps_TRACKTEMP in varchar2,
                              ps_SOUNDLEVELLEFT_TEMPCOR in varchar2,
                              ps_SOUNDLEVELRIGHT_TEMPCOR  in varchar2,
                              pi_SOUNDID in number) as
      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
       li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      --varible
      ls_HighSpeedExist varchar2(1);
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
   begin
        if  ps_UserID is not null or ps_UserID <> '' then
          ls_OperatorId:=ps_UserID;
        end if;
        INSERT INTO SOUNDDETAIL
                    (
                      ITERATION,
                      TESTSPEED,
                      DIRECTIONOFRUN,
                      SOUNDLEVELLEFT,
                      SOUNDLEVELRIGHT,
                      AIRTEMP,
                      TRACKTEMP,
                      SOUNDLEVELLEFT_TEMPCORRECTED,
                      SOUNDLEVELRIGHT_TEMPCORRECTED,
                      SOUNDID,
                      CREATEDBY,
                      CREATEDON
                    )
        VALUES
                    (
                      pi_ITERATION,
                      ps_TESTSPEED,
                      ps_DIRECTIONOFRUN,
                      ps_SOUNDLEVELLEFT,
                      ps_SOUNDLEVELRIGHT,
                      ps_AIRTEMP,
                      ps_TRACKTEMP,
                      ps_SOUNDLEVELLEFT_TEMPCOR,
                      ps_SOUNDLEVELRIGHT_TEMPCOR,
                      pi_SOUNDID,
                      ls_OperatorId,
                      SYSDATE
                    );
                    COMMIT;
   EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:= sqlerrm || 'SoundDetail_Save. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.SoundDetail_Save',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20005,ls_ErrorMsg);
         when li_ParametersAreInvalid then
            ls_ErrorMsg:= sqlerrm || 'SoundDetail_Save. There is one parameters is invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.SoundDetail_Save',
                AX_RECORDDATA    => 'ps_sku is parameters invalid..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || 'SoundDetail_Save. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.SoundDetail_Save',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);
  end SoundDetail_Save;
   procedure WetGripHDR_Save( ps_UserID in varchar2,
                              pi_WETGRIPID  out Number,
                              ps_PROJECTNUMBER  in Varchar2,
                              pi_TIRENUMBER  in Varchar2,
                              ps_TESTSPEC  in Varchar2,
                              pd_DATEOFTEST  in DATE,
                              ps_TESTVEHICLE  in Varchar2,
                              ps_LOCATIONOFTESTTRACK  in Varchar2,
                              ps_TESTTRACKCHARACTERISTICS  in Varchar2,
                              ps_ISSUEBY  in Varchar2,
                              ps_METHODOFCERTIFICATION  in Varchar2,
                              ps_TESTTIREDETAILS  in Varchar2,
                              ps_TIRESIZEANDSERVICEDESC  in Varchar2,
                              ps_TIREBRANDANDTRADEDESC  in Varchar2,
                              ps_REFERENCEINFLATIONPRESSURE  in Varchar2,
                              ps_TESTRIMWITHCODE  in Varchar2,
                              ps_TEMPMEASURESENSORTYPE  in Varchar2,
                              ps_IDENTIFICATIONSRTT  in Varchar2,
                              ps_TESTTIRELOAD_SRTT  in Varchar2,
                              ps_TESTTIRELOAD_CANDIDATE  in Varchar2,
                              ps_TESTTIRELOAD_CONTROL  in Varchar2,
                              ps_WATERDEPTH_SRTT  in Varchar2,
                              ps_WATERDEPTH_CANDIDATE  in Varchar2,
                              ps_WATERDEPTH_CONTROL  in Varchar2,
                              ps_WETTEDTRACKTEMPAVG  in Varchar2,
                              pi_CERTIFICATIONTYPEID  in Number,
                              pi_SKUID  in Number,
                              pi_CertificateID in number,
                              ps_Operation     IN VARCHAR2,
                              ps_MFGWWYY    IN VARCHAR2,
                              ps_GTSPEC     IN VARCHAR2) as
    /******************************************************************************
     NAME:       WetGripHDR_Save
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0
     1.1        10/18/2012    Harini         1.Added Operation while updating and inserting.
     1.4        11/04/2013    Harini         1.As per IDEA2706,Modified procedure by adding 
                                             ps_GTSPEC and ps_MFGWWYY parameters in Input and add 
                                             these paramters while inserting/Updating
    ******************************************************************************/
      --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
       li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      --varible
      ls_WetGripExist varchar2(1);
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
      li_CurrentWETGRIPID  wetgriphdr.wetgripid%type;
   begin
        if  ps_UserID is not null or ps_UserID <> '' then
          ls_OperatorId:=ps_UserID;
        end if;
          ls_wetGripExist := TESTRESULTS_CRUD.CHECKIFWETGRIPEXIXTS(
                                                pi_CertificateID => pi_CertificateID,
                                                 PI_CERTIFICATIONTYPEID => PI_CERTIFICATIONTYPEID
                                              );
        if ls_wetGripExist='y' then
              UPDATE WetGripHdr Set
                      PROJECTNUMBER              = ps_PROJECTNUMBER,
                      TIRENUMBER                 = pi_TIRENUMBER,
                      TESTSPEC                   = ps_TESTSPEC,
                      DATEOFTEST                 = pd_DATEOFTEST,
                      TESTVEHICLE                = ps_TESTVEHICLE,
                      LOCATIONOFTESTTRACK        = ps_LOCATIONOFTESTTRACK,
                      TESTTRACKCHARACTERISTICS   = ps_TESTTRACKCHARACTERISTICS,
                      ISSUEBY                    = ps_ISSUEBY,
                      METHODOFCERTIFICATION      = ps_METHODOFCERTIFICATION,
                      TESTTIREDETAILS            = ps_TESTTIREDETAILS,
                      TIRESIZEANDSERVICEDESC     = ps_TIRESIZEANDSERVICEDESC,
                      TIREBRANDANDTRADEDESC      = ps_TIREBRANDANDTRADEDESC,
                      REFERENCEINFLATIONPRESSURE = ps_REFERENCEINFLATIONPRESSURE,
                      TESTRIMWITHCODE            = ps_TESTRIMWITHCODE,
                      TEMPMEASURESENSORTYPE      = ps_TEMPMEASURESENSORTYPE,
                      IDENTIFICATIONSRTT         = ps_IDENTIFICATIONSRTT,
                      TESTTIRELOAD_SRTT          = ps_TESTTIRELOAD_SRTT,
                      TESTTIRELOAD_CANDIDATE     = ps_TESTTIRELOAD_CANDIDATE,
                      TESTTIRELOAD_CONTROL       = ps_TESTTIRELOAD_CONTROL,
                      WATERDEPTH_SRTT            = ps_WATERDEPTH_SRTT,
                      WATERDEPTH_CANDIDATE       = ps_WATERDEPTH_CANDIDATE,
                      WATERDEPTH_CONTROL         = ps_WATERDEPTH_CONTROL,
                      WETTEDTRACKTEMPAVG         = ps_WETTEDTRACKTEMPAVG,
                      MODIFIEDBY                 = ls_OperatorId   ,
                      MODIFIEDON                 = SYSDATE,
                      OperNum                    = ps_Operation, --As per PRJ3617, added OperNum while updating
                      MFGWWYY                    = ps_MFGWWYY,
                      GTSpec                     = ps_GTSPec
                WHERE CERTIFICATEID = pi_CertificateID And
                      CERTIFICATIONTYPEID = pi_CertificationTypeID ;
                SELECT Max(WETGRIPID) into li_CurrentWETGRIPID
                 FROM  WETGRIPHDR W
                 WHERE CERTIFICATEID = pi_CertificateID And
                    CERTIFICATIONTYPEID = pi_CertificationTypeID ;
                 Delete from  wetgripdetail where WETGRIPID=li_CurrentWETGRIPID;
                 pi_WETGRIPID :=  li_CurrentWETGRIPID;
        else
              INSERT INTO WETGRIPHDR
                                    (
                                      WETGRIPID,
                                      PROJECTNUMBER,
                                      TIRENUMBER,
                                      TESTSPEC,
                                      DATEOFTEST,
                                      TESTVEHICLE,
                                      LOCATIONOFTESTTRACK,
                                      TESTTRACKCHARACTERISTICS,
                                      ISSUEBY,
                                      METHODOFCERTIFICATION,
                                      TESTTIREDETAILS,
                                      TIRESIZEANDSERVICEDESC,
                                      TIREBRANDANDTRADEDESC,
                                      REFERENCEINFLATIONPRESSURE,
                                      TESTRIMWITHCODE,
                                      TEMPMEASURESENSORTYPE,
                                      IDENTIFICATIONSRTT,
                                      TESTTIRELOAD_SRTT,
                                      TESTTIRELOAD_CANDIDATE,
                                      TESTTIRELOAD_CONTROL,
                                      WATERDEPTH_SRTT,
                                      WATERDEPTH_CANDIDATE,
                                      WATERDEPTH_CONTROL,
                                      WETTEDTRACKTEMPAVG,
                                      CERTIFICATIONTYPEID,
                                      CREATEDBY,
                                      CREATEDON,
                                      CertificateID,
                                      OperNum,
                                      MFGWWYY,
                                      GTSpec
                                    )
              VALUES
                                    (
                                      WETGRIPID_SEQ.nextval,
                                      ps_PROJECTNUMBER,
                                      pi_TIRENUMBER,
                                      ps_TESTSPEC,
                                      pd_DATEOFTEST,
                                      ps_TESTVEHICLE,
                                      ps_LOCATIONOFTESTTRACK,
                                      ps_TESTTRACKCHARACTERISTICS,
                                      ps_ISSUEBY,
                                      ps_METHODOFCERTIFICATION,
                                      ps_TESTTIREDETAILS,
                                      ps_TIRESIZEANDSERVICEDESC,
                                      ps_TIREBRANDANDTRADEDESC,
                                      ps_REFERENCEINFLATIONPRESSURE,
                                      ps_TESTRIMWITHCODE,
                                      ps_TEMPMEASURESENSORTYPE,
                                      ps_IDENTIFICATIONSRTT,
                                      ps_TESTTIRELOAD_SRTT,
                                      ps_TESTTIRELOAD_CANDIDATE,
                                      ps_TESTTIRELOAD_CONTROL,
                                      ps_WATERDEPTH_SRTT,
                                      ps_WATERDEPTH_CANDIDATE,
                                      ps_WATERDEPTH_CONTROL,
                                      ps_WETTEDTRACKTEMPAVG,
                                      pi_CERTIFICATIONTYPEID,
                                      ls_OperatorId,
                                      SYSDATE,
                                      pi_CertificateID,
                                      ps_Operation,     -- As per PRJ3617,inserting operation 
                                      ps_MFGWWYY,
                                      ps_GTSPec
                                      );
                SELECT Max(WETGRIPID) into li_CurrentWETGRIPID
                 FROM  WETGRIPHDR W
                 WHERE CERTIFICATEID = pi_CertificateID And
                    CERTIFICATIONTYPEID = pi_CertificationTypeID ;
                 pi_WETGRIPID :=  li_CurrentWETGRIPID;
        end if;
        COMMIT;
   EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:= sqlerrm || 'WetGripHDR_Save. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.WetGripHDR_Save',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20005,ls_ErrorMsg);
         when li_ParametersAreInvalid then
            ls_ErrorMsg:= sqlerrm || 'WetGripHDR_Save. There is one parameters is invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.WetGripHDR_Save',
                AX_RECORDDATA    => 'ps_sku is parameters invalid..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || 'WetGripHDR_Save. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.WetGripHDR_Save',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);
   end WetGripHDR_Save;
   procedure WetGripDetail_Save( ps_UserID in varchar2,
                                 pi_ITERATION  in number,
                                  ps_TESTSPEED  in varchar2,
                                  ps_DIRECTIONOFRUN  in varchar2,
                                  ps_SRTT  in varchar2,
                                  ps_CANDIDATETIRE  in varchar2,
                                  ps_PEAKBREAKFORCECOEFICIENT  in varchar2,
                                  ps_MEANFULLYDEVDECELERATION  in varchar2,
                                  ps_WETGRIPINDEX  in varchar2,
                                  ps_COMMENTS  in varchar2,
                                  pi_WETGRIPID  in number) as
        --Exception variables
      li_ParametersAreNull exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreNull,-20005);
       li_ParametersAreInvalid exception;
      -- link the exception to the error number
      pragma exception_init( li_ParametersAreInvalid,-20006);
      --varible
      ls_HighSpeedExist varchar2(1);
      ls_MachineId VARCHAR2(50):=null;
      ls_OperatorId VARCHAR2(50):='ICSDEV';
      ls_ErrorMsg varchar2(4000);
   begin
        if  ps_UserID is not null or ps_UserID <> '' then
          ls_OperatorId:=ps_UserID;
        end if;
        INSERT INTO WETGRIPDETAIL
                (
                  ITERATION,
                  TESTSPEED,
                  DIRECTIONOFRUN,
                  SRTT,
                  CANDIDATETIRE,
                  PEAKBREAKFORCECOEFICIENT,
                  MEANFULLYDEVELOPEDDECELERATION,
                  WETGRIPINDEX,
                  COMMENTS,
                  WETGRIPID,
                  CREATEDBY,
                  CREATEDON
                )
                VALUES
                (
                  pi_ITERATION ,
                  ps_TESTSPEED ,
                  ps_DIRECTIONOFRUN ,
                  ps_SRTT ,
                  ps_CANDIDATETIRE ,
                  ps_PEAKBREAKFORCECOEFICIENT ,
                  ps_MEANFULLYDEVDECELERATION ,
                  ps_WETGRIPINDEX ,
                  ps_COMMENTS ,
                  pi_WETGRIPID ,
                  ls_OperatorId ,
                  SYSDATE
                );
                COMMIT;
   EXCEPTION
        when li_ParametersAreNull then
            ls_ErrorMsg:= sqlerrm || ' - WetGripDetail_Save. There is at least one parameters null.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.WetGripDetail_Save',
                AX_RECORDDATA    => 'ps_sku is parameters null..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20005,ls_ErrorMsg);
         when li_ParametersAreInvalid then
            ls_ErrorMsg:= sqlerrm || ' - WetGripDetail_Save. There is one parameters is invalid.';
             APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT  ( as_MachineId => ls_MachineId,
                ad_OPERATORID => ls_OperatorId,
                AD_DATERECORDED  => sysdate,
                AS_PROCESSNAME   => ' testresults_crud.WetGripDetail_Save',
                AX_RECORDDATA    => 'ps_sku is parameters invalid..',
                AS_MESSAGECODE   => to_char(sqlcode),
                AS_MESSAGE       => ls_ErrorMsg);
            raise_application_error (-20006,ls_ErrorMsg);
         when others then
              ls_ErrorMsg:=  sqlerrm || ' - WetGripDetail_Save. An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.WetGripDetail_Save',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
               raise_application_error (-20007,ls_ErrorMsg);
   end WetGripDetail_Save;
   
   PROCEDURE GetTireTypes(pc_TIRETYPES   OUT retCursor)
   AS
   /******************************************************************************
     NAME:       GetTireTypes
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------     
     1.0        11/6/2013    Ajit         Created     
    ******************************************************************************/  
    -- Exception Variables
    ls_OperatorId VARCHAR2(50):='ICSDEV';
    ls_ErrorMsg varchar2(4000);
    ls_MachineId VARCHAR2(50):=null;
    
    BEGIN
        OPEN pc_TIRETYPES FOR 
          SELECT DISTINCT TT.TIRETYPEID,
                 TT.TIRETYPENAME 
           FROM TireType  TT
           INNER JOIN Product P
          on TT.tiretypeid=P.tiretypeid
          ORDER BY TT.tiretypeid;
    EXCEPTION
       
         when others then
              ls_ErrorMsg:=  sqlerrm || '- GetTireTypes.  An error have ocurred.(when others)';
               APP_MESSAGE_OPERATIONS.APP_MESSAGE_INSERT(as_MachineId => ls_MachineId,
                      ad_OPERATORID => ls_OperatorId,
                      AD_DATERECORDED  => sysdate,
                      AS_PROCESSNAME   =>' testresults_crud.GetTireTypes',
                      AX_RECORDDATA    => 'An error have ocurred.(when others)',
                      AS_MESSAGECODE   => to_char(sqlcode),
                      AS_MESSAGE       =>ls_ErrorMsg);
                 raise_application_error (-20007,ls_ErrorMsg);
    end GetTireTypes;
   
   Function GetMeasureID(ps_CertificateNumber in VARCHAR2,pi_CertificationTypeId in number, pi_CertificateNumberID in number) return Number as
  li_MeasureID  MeasureHdr.MEASUREID%TYPE;
  li_Total number;
  begin
        SELECT Count(*) into li_Total
        FROM  Certificate ce
                     inner join MeasureHdr m on
                         ce.certificateid = m.certificateid and
                         ce.certificationtypeid = m.certificationtypeid
        WHERE
              M.CERTIFICATIONTYPEID = pi_CertificationTypeId AND
              Lower(ce.CERTIFICATENUMBER)   = lower(ps_CertificateNumber) AND
              ce.certificateid = pi_CertificateNumberID;
        if li_Total > 0 then
              SELECT NVL(MeasureID,0) INTO li_MeasureID
               FROM  Certificate ce
                     inner join MeasureHdr m on
                         ce.certificateid = m.certificateid and
                         ce.certificationtypeid = m.certificationtypeid
               WHERE
                    M.CERTIFICATIONTYPEID = pi_CertificationTypeId AND
                    LOWER(ce.CERTIFICATENUMBER)   = LOWER(ps_CertificateNumber) AND
                    ce.certificateid = pi_CertificateNumberID;
        else
            li_MeasureID:=0;
        end if ;
        Return li_MeasureID;
  end GetMeasureID;
  Function GetTreadWearID(ps_CertificateNumber  in VARCHAR2,pi_CertificationTypeId in number, pi_CertificateNumberID in number) return Number as
  li_TreadWearID  plungerhdr.plungerid%type;
  begin
        SELECT TreadWearID INTO li_TreadWearID
        FROM  Certificate ce  inner join treadwearhdr m on
                    ce.certificateid = m.certificateid and
                    ce.certificationtypeid = m.certificationtypeid
        WHERE
              m.CERTIFICATIONTYPEID = pi_CertificationTypeId AND
              Lower(ce.CERTIFICATENUMBER)   = lower(ps_CertificateNumber) AND
              ce.certificateid = pi_CertificateNumberID;
        Return li_TreadWearID;
   EXCEPTION
        when NO_DATA_FOUND THEN
                 Return -1;
                raise_application_error (-20100,'GetPlungerID: No data was found with those search parameters....');
  end GetTreadWearID;
 Function GetPlungerID(ps_CertificateNumber in VARCHAR2,pi_CertificationTypeId in number, pi_CertificateNumberID in number) return Number as
  li_PlungerId  plungerhdr.plungerid%type;
  begin
        SELECT PlungerID INTO li_PlungerId
        FROM  Certificate ce inner join plungerhdr p on
                  ce.certificateid = p.certificateid and
                  ce.certificationtypeid = p.certificationtypeid
        WHERE
              p.CERTIFICATIONTYPEID = pi_CertificationTypeId AND
              Lower(ce.CERTIFICATENUMBER)   = lower(ps_CertificateNumber) AND
              ce.certificateid = pi_CertificateNumberID;
        Return li_PlungerId;
   EXCEPTION
        when NO_DATA_FOUND THEN
                 Return -1;
                raise_application_error (-20100,'GetPlungerID: No data was found with those search parameters....');
  end GetPlungerID;
   Function GetEnduranceID(ps_CertificateNumber in VARCHAR2,pi_CertificationTypeId in number, pi_CertificateNumberID in number) return Number as
  li_EnduranceID  EnduranceHdr.enduranceid%TYPE;
  begin
        SELECT EnduranceID INTO li_EnduranceID
        FROM  Certificate ce inner join ENDURANCEHdr e on
                  ce.certificateid = e.certificateid and
                  ce.certificationtypeid = e.certificationtypeid
        WHERE
              e.CERTIFICATIONTYPEID = pi_CertificationTypeId AND
              Lower(ce.CERTIFICATENUMBER)   = lower(ps_CertificateNumber) AND
              ce.certificateid = pi_CertificateNumberID;
        Return li_EnduranceID;
   EXCEPTION
        when NO_DATA_FOUND THEN
                 Return -1;
                raise_application_error (-20100,'GetEnduranceID: No data was found with those search parameters....');
  end GetEnduranceID;
  Function GetHighSpeedID(ps_CertificateNumber  in VARCHAR2,pi_CertificationTypeId in number, pi_CertificateNumberID in number ) return Number as
  li_HighSpeedID  highspeedhdr.highspeedid%TYPE;
  begin
        SELECT HighSpeedID INTO li_HighSpeedID
        FROM  Certificate ce inner join highspeedhdr h on
                  ce.certificateid = h.certificateid and
                  ce.certificationtypeid = h.certificationtypeid
        WHERE
              h.CERTIFICATIONTYPEID = pi_CertificationTypeId AND
              Lower(ce.CERTIFICATENUMBER)   = lower(ps_CertificateNumber) AND
              ce.certificateid = pi_CertificateNumberID;
        Return li_HighSpeedID;
   EXCEPTION
        when NO_DATA_FOUND THEN
                 Return -1;
                raise_application_error (-20100,'GetHighSpeedID: No data was found with those search parameters....');
  end GetHighSpeedID;
  Function GetBeadUnseatID(ps_CertificateNumber in VARCHAR2,pi_CertificationTypeId in number, pi_CertificateNumberID in number) return Number as
  li_BeadUnseatID  beadunseathdr.beadunseatid%TYPE;
  li_Total number;
  begin
        SELECT Count(*) into li_Total
        FROM  Certificate ce inner join beadunseathdr bs on
                   ce.certificateid = bs.certificateid and
                   ce.certificationtypeid = bs.certificationtypeid
        WHERE
              bs.CERTIFICATIONTYPEID = pi_CertificationTypeId AND
              Lower(ce.CERTIFICATENUMBER)   = lower(ps_CertificateNumber) AND
              ce.certificateid = pi_CertificateNumberID;
        if li_Total > 0 then
              SELECT NVL(BeadUnseatID,0) INTO li_BeadUnseatID
               FROM  Certificate ce inner join beadunseathdr bs on
                   ce.certificateid = bs.certificateid and
                   ce.certificationtypeid = bs.certificationtypeid
              WHERE
                    bs.CERTIFICATIONTYPEID = pi_CertificationTypeId AND
                    Lower(ce.CERTIFICATENUMBER)   = lower(ps_CertificateNumber) AND
                    ce.certificateid = pi_CertificateNumberID;
        else
            li_BeadUnseatID:=0;
        end if ;
        Return li_BeadUnseatID;
  end GetBeadUnseatID;
  function GetWetGripHDRID(ps_CertificateNumber in VARCHAR2,pi_CertificationTypeId in number,pi_SKUId in number, pi_CertificateNumberID in number) return Number as
  li_WetGripID  WetGripHDR.WetGRIPID%TYPE;
  li_Total number;
  begin
        SELECT Count(*) into li_Total
         FROM  Certificate ce inner join WetGripHDR W on
                   ce.certificateid = w.certificateid and
                   ce.certificationtypeid = w.certificationtypeid
        WHERE
              w.CERTIFICATIONTYPEID = pi_CertificationTypeId AND
              Lower(ce.CERTIFICATENUMBER)   = lower(ps_CertificateNumber) AND
              ce.certificateid = pi_CertificateNumberID;
        if li_Total > 0 then
              SELECT NVL(WetGripID,0) INTO li_WetGripID
               FROM  Certificate ce inner join WetGripHDR W on
                   ce.certificateid = w.certificateid and
                   ce.certificationtypeid = w.certificationtypeid
              WHERE
                    w.CERTIFICATIONTYPEID = pi_CertificationTypeId AND
                    Lower(ce.CERTIFICATENUMBER)   = lower(ps_CertificateNumber) AND
                    ce.certificateid = pi_CertificateNumberID;
        else
            li_WetGripID:=0;
        end if ;
        Return li_WetGripID;
  end GetWetGripHDRID;
  function GetSoundHDRID(ps_CertificateNumber in VARCHAR2,pi_CertificationTypeId in number, pi_CertificateNumberID in number) return Number as
  li_SOUNDID  SOUNDHDR.SOUNDID%TYPE;
  li_Total number;
  begin
        SELECT Count(*) into li_Total
        FROM  Certificate ce inner join SOUNDHDR s on
                 ce.certificateid = s.certificateid and
                 ce.certificationtypeid = s.certificationtypeid
        WHERE
              s.CERTIFICATIONTYPEID = pi_CertificationTypeId AND
              Lower(ce.CERTIFICATENUMBER)   = lower(ps_CertificateNumber) AND
              ce.certificateid = pi_CertificateNumberID;
        if li_Total > 0 then
              SELECT NVL(s.soundid,0) INTO li_SOUNDID
              FROM  Certificate ce inner join SOUNDHDR s on
                     ce.certificateid = s.certificateid and
                     ce.certificationtypeid = s.certificationtypeid
              WHERE
                    s.CERTIFICATIONTYPEID = pi_CertificationTypeId AND
                    Lower(ce.CERTIFICATENUMBER)   = lower(ps_CertificateNumber) AND
                    ce.certificateid = pi_CertificateNumberID;
        else
            li_SOUNDID:=0;
        end if ;
        Return li_SOUNDID;
  end GetSoundHDRID;
  
   FUNCTION CheckIfProductExists(ps_Matl_Num IN VARCHAR2,pi_SKUId in number) return Varchar2 as
  /******************************************************************************
     NAME:       CheckIfProductExists
     PURPOSE:
     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0
     1.1        10/2/2012     Harini         1.Replaced ps_SKU with ps_Matl_Num
    ******************************************************************************/
   lc_Exist char:= 'n';
   li_totalProducts integer;
   begin
        SELECT COUNT(1) INTO li_totalProducts
        FROM  PRODUCT p
        WHERE p.Matl_Num   = LPAD(ps_Matl_Num,18,0)    -- As per PRJ3617,Replaced SKU with Matl_Num
          AND p.SKUId = pi_SKUId;
        IF li_totalProducts > 0 THEN
            lc_Exist:='y';
        ELSE
            lc_Exist:='n';
        END IF;
        return lc_Exist;
  END CheckIfProductExists;
  
   Function CheckIfEnduranceExists(pi_certificateid in Number,pi_CertificationTypeID in number) return Varchar2 as
   lc_Exist char:= 'n';
   li_totalEndurance integer;
   begin
        SELECT COUNT(1) INTO li_totalEndurance
        FROM ENDURANCEHdr e
        WHERE certificateid   = pi_certificateid  and
              certificationtypeid      =  pi_CertificationTypeID ;
        if li_totalEndurance > 0 THEN
            lc_Exist:='y';
        else
            lc_Exist:='n';
        end if;
        return lc_Exist;
  end CheckIfEnduranceExists;
  Function CheckIfHighSpeedExists(pi_certificateid in Number,pi_CertificationTypeID in number) return Varchar2 as
   lc_Exist char:= 'n';
   li_totalHighSpeed integer;
   begin
         SELECT COUNT(1) INTO li_totalHighSpeed
         FROM highspeedhdr h
         WHERE h.certificateid   = pi_certificateid  and
               h.certificationtypeid       =  pi_CertificationTypeID ;
        if li_totalHighSpeed > 0 THEN
            lc_Exist:='y';
        else
            lc_Exist:='n';
        end if;
        return lc_Exist;
  end CheckIfHighSpeedExists;
  Function CheckIfMeasureExists(pi_CertificateID  in number,pi_CertificationTypeID in number) return Varchar2 as
   lc_Exist char:= 'n';
   li_totalMeasures number;
   begin
        SELECT COUNT(1) INTO li_totalMeasures
        FROM  MeasureHdr m
        WHERE m.certificationtypeid = pi_CertificationTypeID AND
              m.CertificateId = pi_CertificateID;
        if li_totalMeasures > 0 THEN
            lc_Exist:='y';
        else
            lc_Exist:='n';
        end if;
        return lc_Exist;
  end CheckIfMeasureExists;
  Function CheckIfBeadUnseatExists(pi_certificateid in Number,pi_CertificationTypeID in number)  return Varchar2 as
   lc_Exist char:= 'n';
   li_totalBeadUnseat number;
   begin
        SELECT COUNT(1) INTO li_totalBeadUnseat
        FROM   beadUnseatHdr bu
        WHERE bu.certificationtypeid = pi_CertificationTypeID AND
              bu.certificateid   = pi_certificateid;
        if li_totalBeadUnseat > 0 THEN
            lc_Exist:='y';
        else
            lc_Exist:='n';
        end if;
        return lc_Exist;
  end CheckIfBeadUnseatExists;
  Function CheckIfTreadWearExists(pi_certificateid in Number,pi_CertificationTypeID in number)  return Varchar2 as
   lc_Exist char:= 'n';
   li_totalTreadWearid number;
   begin
        SELECT COUNT(1) INTO li_totalTreadWearid
         FROM TreadWearHdr tw
        WHERE certificationtypeid = pi_CertificationTypeID AND
              certificateid   = pi_certificateid;
        if li_totalTreadWearid > 0 THEN
            lc_Exist:='y';
        else
            lc_Exist:='n';
        end if;
        return lc_Exist;
  end CheckIfTreadWearExists;
  Function CheckIfPlungerExists(pi_certificateid in Number,pi_CertificationTypeID in number)  return Varchar2 as
   lc_Exist char:= 'n';
   li_total number;
   begin
        SELECT COUNT(1) INTO li_total
         FROM  PlungerHdr p
        WHERE p.certificationtypeid = pi_CertificationTypeID AND
              p.certificateid   = pi_certificateid;
        if li_total > 0 THEN
            lc_Exist:='y';
        else
            lc_Exist:='n';
        end if;
        return lc_Exist;
    end CheckIfPlungerExists;
 Function CheckIfSoundExixts(pi_certificateid in Number,pi_CertificationTypeID in number)  return Varchar2 as
       lc_Exist char:= 'n';
       li_total number;
     begin
            SELECT COUNT(1) INTO li_total
             FROM SOUNDHDR h
            WHERE h.certificationtypeid = pi_CertificationTypeID AND
                  h.certificateid   = pi_certificateid;
            if li_total > 0 THEN
                lc_Exist:='y';
            else
                lc_Exist:='n';
            end if;
            return lc_Exist;
      end CheckIfSoundExixts;
 Function CheckIfWetGripExixts(pi_CertificateID in Number,pi_CertificationTypeID in number)  return Varchar2 as
       lc_Exist char:= 'n';
       li_total number;
     begin
            SELECT COUNT(1) INTO li_total
             FROM WetGripHdr h
            WHERE h.certificationtypeid = pi_CertificationTypeID AND
                  CERTIFICATEID = pi_CertificateID ;
            if li_total > 0 THEN
                lc_Exist:='y';
            else
                lc_Exist:='n';
            end if;
            return lc_Exist;
      end CheckIfWetGripExixts;
END TESTRESULTS_CRUD;
/
