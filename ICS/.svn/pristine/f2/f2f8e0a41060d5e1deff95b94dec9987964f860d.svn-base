Imports CooperTire.ICS.Model
Imports CooperTire.ICS.Common
Imports CooperTire.ICS.DomainEntities

''' <summary>
''' Marketing view pesenter
''' </summary>
''' <remarks>
''' <list type="table">
''' <listheader>
''' <term>Author</term>
''' <description>Description</description>
''' </listheader>
''' <item>
''' <term>N/A</term>
''' <description>
''' <para>N/A</para>
''' <para>Original Code.</para>
''' </description>
''' </item>
''' <item>
''' <term>Jhansi</term>
''' <description>
''' <para>21/10/2019</para>
''' <para>Implemented Coding Standards.</para>
''' </description>
''' </item>
''' </list>
''' </remarks>
Public Class MarketingNewPresenter
    Inherits ViewPresenterBase

    ' Changed sku to material number , added methods for populating the data to view for brand , brand lines and attributes for material numbers.
    ' as per PRJ3617 SAP Interface to International Certification System (OPQ.I.8265)Remediation. 

#Region "Members"
    ''' <summary>
    ''' interface to be implemented by marketing view.
    ''' </summary>
    ''' <remarks></remarks>
    Private m_view As IMarketingNewView

#End Region

#Region "Constructors / Destructors"
    ''' <summary>
    ''' interface to be implemented by marketing view.
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub New(ByVal p_view As IMarketingNewView)

        MyBase.New(p_view)

        Try
            m_view = p_view
            SubscribeToEvents()
        Catch exc As Exception
            EventLogger.Enter(exc)
            Throw New Exception("Error creating " + Me.ToString())
        End Try

    End Sub

#End Region

#Region "Methods"
    ''' <summary>
    ''' Attach presenter to view’s events.
    ''' </summary>
    ''' <remarks>
    ''' <list type="table">
    ''' <listheader>
    ''' <term>Author</term>
    ''' <description>Description</description>
    ''' </listheader>
    ''' <item>
    ''' <term>N/A</term>
    ''' <description>
    ''' <para>N/A</para>
    ''' <para>Original Code.</para>
    ''' </description>
    ''' </item>
    ''' <item>
    ''' <term>Jhansi</term>
    ''' <description>
    ''' <para>21/10/2019</para>
    ''' <para>Implemented Coding Standards.</para>
    ''' </description>
    ''' </item>
    ''' </list>
    ''' </remarks>
    Private Sub SubscribeToEvents()

        AddHandler m_view.LoadView, AddressOf OnLoadView
        AddHandler m_view.Save, AddressOf OnSave
        AddHandler m_view.ChangeAllMaterialsStatusByCert, AddressOf OnChangeAllSKUsStatusByCert
        AddHandler m_view.ChangeAllCertStatusByMaterial, AddressOf OnChangeAllCertStatusBySKU
        AddHandler m_view.Search, AddressOf OnSearch
        ' AddHandler m_view.RegionChanged, AddressOf OnRegionChanged
        'AddHandler m_view.AddRegionChanged, AddressOf OnAddRegionChanged
        ' AddHandler m_view.SelectChangedWithDataDirty, AddressOf OnSelectChangedWithDataDirty
        AddHandler m_view.ProductRequestStatusChanged, AddressOf OnProductRequestStatusChanged

    End Sub

    ''' <summary>
    ''' Load data for the view
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks>
    ''' <list type="table">
    ''' <listheader>
    ''' <term>Author</term>
    ''' <description>Description</description>
    ''' </listheader>
    ''' <item>
    ''' <term>N/A</term>
    ''' <description>
    ''' <para>N/A</para>
    ''' <para>Original Code.</para>
    ''' </description>
    ''' </item>
    ''' <item>
    ''' <term>Jhansi</term>
    ''' <description>
    ''' <para>21/10/2019</para>
    ''' <para>Implemented Coding Standards.</para>
    ''' </description>
    ''' </item>
    ''' </list>
    ''' </remarks>
    Private Sub OnLoadView(ByVal sender As Object, ByVal e As EventArgs)

        Try
            If (Not m_view.IsPostBackView) Then
                LoadViewData()
            Else
                RestoreView()
            End If
        Catch exc As Exception
            EventLogger.Enter(exc)
            m_view.ErrorText = "Error loading form data."
        End Try

    End Sub

    ''' <summary>
    ''' Load data from business process
    ''' </summary>
    ''' <remarks>
    ''' <list type="table">
    ''' <listheader>
    ''' <term>Author</term>
    ''' <description>Description</description>
    ''' </listheader>
    ''' <item>
    ''' <term>N/A</term>
    ''' <description>
    ''' <para>N/A</para>
    ''' <para>Original Code.</para>
    ''' </description>
    ''' </item>
    ''' <item>
    ''' <term>Jhansi</term>
    ''' <description>
    ''' <para>21/10/2019</para>
    ''' <para>Implemented Coding Standards.</para>
    ''' </description>
    ''' </item>
    ''' </list>
    ''' </remarks>
    Private Sub LoadViewData()

        m_view.DataBindView()
        m_view.DataDirtyFlag = False
        LoadBrands(String.Empty)

    End Sub

    ''' <summary>
    ''' restore the view when there's no postback
    ''' </summary>
    ''' <remarks>
    ''' <list type="table">
    ''' <listheader>
    ''' <term>Author</term>
    ''' <description>Description</description>
    ''' </listheader>
    ''' <item>
    ''' <term>N/A</term>
    ''' <description>
    ''' <para>N/A</para>
    ''' <para>Original Code.</para>
    ''' </description>
    ''' </item>
    ''' <item>
    ''' <term>Jhansi</term>
    ''' <description>
    ''' <para>21/10/2019</para>
    ''' <para>Implemented Coding Standards.</para>
    ''' </description>
    ''' </item>
    ''' </list>
    ''' </remarks>
    Private Sub RestoreView()

        If Not m_view.ProductRequestStatusData Is Nothing Then
            m_view.SetupCertificateView(m_view.ProductRequestStatusData)
        End If
        m_view.SuccessText = ""

    End Sub

    ''' <summary>
    ''' Update regional status
    ''' </summary>
    ''' <remarks>
    ''' <list type="table">
    ''' <listheader>
    ''' <term>Author</term>
    ''' <description>Description</description>
    ''' </listheader>
    ''' <item>
    ''' <term>N/A</term>
    ''' <description>
    ''' <para>N/A</para>
    ''' <para>Original Code.</para>
    ''' </description>
    ''' </item>
    ''' <item>
    ''' <term>Jhansi</term>
    ''' <description>
    ''' <para>21/10/2019</para>
    ''' <para>Implemented Coding Standards.</para>
    ''' </description>
    ''' </item>
    ''' </list>
    ''' </remarks>
    Private Sub RefreshCurrentCertView()

        Dim strBrand As String = m_view.Brand.Trim()
        Dim strBrandLine As String = m_view.BrandLine.Trim()


        Dim marketingnew As MarketingNew = New MarketingNew()

        m_view.ErrorText = ""

        'If m_view.ProductRequestStatusData Is Nothing Then

        ' jeseitz - check this!!! new procedure!
        Dim dstProductRequestStatus As DataSet = marketingnew.GetProductRequestStatusTable(strBrand, strBrandLine)
        If Not dstProductRequestStatus.Tables("ProductRequestStatus").Columns.Contains("ToolTip") Then
            dstProductRequestStatus.Tables("ProductRequestStatus").Columns.Add("ToolTip", Type.GetType("System.String"))
        End If
        For Each dr As DataRow In dstProductRequestStatus.Tables("ProductRequestStatus").Rows
            If Not (dr("MATL_NUM") Is Nothing Or IsDBNull(dr("MATL_NUM"))) Then
                dr("ToolTip") = GetMaterialAttribs(dr("MATL_NUM").ToString())
            End If
        Next
        dstProductRequestStatus.AcceptChanges()

        Dim dtbProductRequestStatusTable As DataTable = dstProductRequestStatus.Tables("ProductRequestStatus")
        Dim dtbCertificateTypesTable As DataTable = dstProductRequestStatus.Tables("CertificateTypes")

        m_view.ProductRequestStatusData = dtbProductRequestStatusTable
        m_view.CertificateTypes = dtbCertificateTypesTable



        If m_view.ProductRequestStatusData.Rows.Count = 0 Then
            m_view.ErrorText = "no certification data found."
        End If
        m_view.SetupCertificateView(m_view.ProductRequestStatusData)

        m_view.DataBindView()
        ' End If




    End Sub

    ''' <summary>
    ''' Select/DeSelect All country by SKU.
    ''' </summary>
    ''' <param name="p_strCertId">Certificate Id</param>
    ''' <param name="p_blnChecked">Checked</param>
    ''' <remarks>
    ''' <list type="table">
    ''' <listheader>
    ''' <term>Author</term>
    ''' <description>Description</description>
    ''' </listheader>
    ''' <item>
    ''' <term>N/A</term>
    ''' <description>
    ''' <para>N/A</para>
    ''' <para>Original Code.</para>
    ''' </description>
    ''' </item>
    ''' <item>
    ''' <term>Jhansi</term>
    ''' <description>
    ''' <para>21/10/2019</para>
    ''' <para>Implemented Coding Standards.</para>
    ''' </description>
    ''' </item>
    ''' </list>
    ''' </remarks>
    Private Sub OnChangeAllSKUsStatusByCert(ByVal p_strCertId As String, ByVal p_blnChecked As Boolean)

        Try
            Dim dtbProductRequestStatus As DataTable = m_view.ProductRequestStatusData
            For Each drwStatus As DataRow In dtbProductRequestStatus.Rows
                If p_blnChecked And drwStatus(p_strCertId) = "Uncertified" Then
                    drwStatus(p_strCertId) = "Requested"
                ElseIf Not p_blnChecked And drwStatus(p_strCertId) = "Requested" Then
                    drwStatus(p_strCertId) = "Uncertified"
                End If
            Next
            m_view.ProductRequestStatusData = dtbProductRequestStatus
            m_view.DataBindView()
            m_view.DataDirtyFlag = True
        Catch exc As Exception
            EventLogger.Enter(exc)
            m_view.ErrorText = "Error select/deselect all certificate for Country."
        End Try

    End Sub

    ''' <summary>
    ''' Select/DeSelect All country by SKU
    ''' </summary>
    ''' <param name="p_strMatlNum">Material number</param>
    ''' <param name="p_blnChecked">Checked</param>
    ''' <remarks>
    ''' <list type="table">
    ''' <listheader>
    ''' <term>Author</term>
    ''' <description>Description</description>
    ''' </listheader>
    ''' <item>
    ''' <term>N/A</term>
    ''' <description>
    ''' <para>N/A</para>
    ''' <para>Original Code.</para>
    ''' </description>
    ''' </item>
    ''' <item>
    ''' <term>Jhansi</term>
    ''' <description>
    ''' <para>21/10/2019</para>
    ''' <para>Implemented Coding Standards.</para>
    ''' </description>
    ''' </item>
    ''' </list>
    ''' </remarks>
    Private Sub OnChangeAllCertStatusBySKU(ByVal p_strMatlNum As String, ByVal p_blnChecked As Boolean)

        Try
            Dim dtbProductRequestStatus As DataTable = m_view.ProductRequestStatusData
            ' Changed as per PRJ3617 SAP Interface to International Certification System (OPQ.I.8265)Remediation 
            Dim position As Integer
            position = p_strMatlNum.IndexOf(" ")
            If (position > -1) Then
                p_strMatlNum = p_strMatlNum.Substring(0, position)
            End If
            Dim drwStatus As DataRow = dtbProductRequestStatus.Rows.Find(p_strMatlNum.PadLeft(18, "0"))
            For Each drwStatusCloumn As DataColumn In drwStatus.Table.Columns
                If drwStatusCloumn.ColumnName <> "SKUID" And drwStatusCloumn.ColumnName <> "MATL_NUM" And drwStatusCloumn.ColumnName <> "Size" And _
                drwStatusCloumn.ColumnName <> "SingLoadIndex" And drwStatusCloumn.ColumnName <> "DualLoadIndex" And _
                drwStatusCloumn.ColumnName <> "SpeedRating" Then
                    If p_blnChecked And drwStatus(drwStatusCloumn) = "Uncertified" Then
                        drwStatus(drwStatusCloumn) = "Requested"
                    ElseIf Not p_blnChecked And drwStatus(drwStatusCloumn) = "Requested" Then
                        drwStatus(drwStatusCloumn) = "Uncertified"
                    End If
                End If
            Next
            m_view.ProductRequestStatusData = dtbProductRequestStatus
            m_view.DataBindView()
            m_view.DataDirtyFlag = True
        Catch exc As Exception
            EventLogger.Enter(exc)
            m_view.ErrorText = "Error select/deselect all certificate for Material Number " + p_strMatlNum + "."
        End Try

    End Sub

    ''' <summary>
    ''' Certified region dropdown list index changed
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    'Private Sub OnRegionChanged(ByVal sender As Object, ByVal e As EventArgs)

    '    Try
    '        Dim strSelectRegion = CType(sender, String)
    '        If strSelectRegion <> "Select ..." Then
    '            m_view.SelectedRegionName = strSelectRegion
    '            RefreshCurrentRegionView()
    '        End If
    '    Catch exc As Exception
    '        EventLogger.Enter(exc)
    '        m_view.ErrorText = "Error loading data for selected region " + m_view.SelectedRegionName + "."
    '    End Try

    'End Sub

    ''' <summary>
    ''' Uncertified region dropdown list index changed 
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    'Private Sub OnAddRegionChanged(ByVal sender As Object, ByVal e As EventArgs)

    '    Try
    '        Dim strSelectRegion = CType(sender, String)
    '        If strSelectRegion <> "Select ..." Then
    '            m_view.SelectedRegionName = strSelectRegion
    '            RefreshCurrentRegionView()
    '        End If
    '    Catch exc As Exception
    '        EventLogger.Enter(exc)
    '        m_view.ErrorText = "Error loading data for add selected region " + m_view.SelectedRegionName + "."
    '    End Try

    'End Sub

    ''' <summary>
    ''' Store original value when dropdown list index changed with data dirty
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    'Private Sub OnSelectChangedWithDataDirty(ByVal sender As Object, ByVal e As EventArgs)

    '    Try
    '        Dim strSelectRegion = CType(sender, String)
    '        If m_view.CertifiedRegions.Contains(m_view.SelectedRegionName) Then
    '            m_view.OrignalCertRegionSelectValue = m_view.SelectedRegionName
    '            m_view.OrignalUnCertRegionSelectValue = Nothing
    '        Else
    '            m_view.OrignalCertRegionSelectValue = Nothing
    '            m_view.OrignalUnCertRegionSelectValue = m_view.SelectedRegionName
    '        End If
    '        m_view.SelectedRegionName = strSelectRegion
    '    Catch exc As Exception
    '        EventLogger.Enter(exc)
    '        m_view.ErrorText = "Error saving data for original selected region."
    '    End Try

    'End Sub

    ''' <summary>
    ''' Event handler for check box checked/unchecked per country and SKU
    ''' </summary>
    ''' <param name="p_strMatlNum">Material number</param>
    ''' <param name="p_strCountryId">country Id</param>
    ''' <param name="p_blnChecked">Checked</param>
    ''' <remarks>
    ''' <list type="table">
    ''' <listheader>
    ''' <term>Author</term>
    ''' <description>Description</description>
    ''' </listheader>
    ''' <item>
    ''' <term>N/A</term>
    ''' <description>
    ''' <para>N/A</para>
    ''' <para>Original Code.</para>
    ''' </description>
    ''' </item>
    ''' <item>
    ''' <term>Jhansi</term>
    ''' <description>
    ''' <para>21/10/2019</para>
    ''' <para>Implemented Coding Standards.</para>
    ''' </description>
    ''' </item>
    ''' </list>
    ''' </remarks>
    Private Sub OnProductRequestStatusChanged(ByVal p_strMatlNum As String, ByVal p_strCountryId As String, ByVal p_blnChecked As Boolean)

        Try
            Dim dtbProductCountryStatus = m_view.ProductRequestStatusData
            ' Changed as per PRJ3617 SAP Interface to International Certification System (OPQ.I.8265)Remediation 
            Dim position As Integer
            position = p_strMatlNum.IndexOf(" ")
            If (position > -1) Then
                p_strMatlNum = p_strMatlNum.Substring(0, position)
            End If
            Dim drwStatus As DataRow = dtbProductCountryStatus.Rows.Find(p_strMatlNum.PadLeft(18, "0"))
            If Not (drwStatus Is Nothing) Then
                If drwStatus.Table.Columns.Contains(p_strCountryId) Then
                    If p_blnChecked Then
                        drwStatus(p_strCountryId) = "Requested"
                    Else
                        drwStatus(p_strCountryId) = "Uncertified"
                    End If
                End If
            End If
            m_view.ProductRequestStatusData = dtbProductCountryStatus
            m_view.DataBindView()
            m_view.DataDirtyFlag = True
        Catch exc As Exception
            EventLogger.Enter(exc)
            m_view.ErrorText = "Error Saving data."
        End Try

    End Sub

    ''' <summary>
    ''' Search the product country status based on brand 
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks>
    ''' <list type="table">
    ''' <listheader>
    ''' <term>Author</term>
    ''' <description>Description</description>
    ''' </listheader>
    ''' <item>
    ''' <term>N/A</term>
    ''' <description>
    ''' <para>N/A</para>
    ''' <para>Original Code.</para>
    ''' </description>
    ''' </item>
    ''' <item>
    ''' <term>Jhansi</term>
    ''' <description>
    ''' <para>21/10/2019</para>
    ''' <para>Implemented Coding Standards.</para>
    ''' </description>
    ''' </item>
    ''' </list>
    ''' </remarks>
    Private Sub OnSearch(ByVal sender As Object, ByVal e As EventArgs)

        Try
   

            Dim strBrand As String = m_view.Brand.Trim()
            Dim strBrandLine As String = m_view.BrandLine.Trim()

            If (strBrand = "Select ..." Or strBrandLine = "Select ..." Or strBrandLine = String.Empty) Then
                'clear the existing data when empty input of brand 
                'm_view.SelectedRegionName = ""
                m_view.ErrorText = "Please select a brand and brand line for search."
                'If m_view.CertifiedRegions IsNot Nothing Then
                '    m_view.CertifiedRegions.Clear()
                'End If
                'If m_view.UncertifiedRegions IsNot Nothing Then
                '    m_view.UncertifiedRegions.Clear()
                'End If
                If m_view.ProductRequestStatusData IsNot Nothing Then
                    m_view.ProductRequestStatusData.Clear()
                End If
                'initial the region lists
                'Dim listCertifiedRegions As List(Of String) = New List(Of String)
                'listCertifiedRegions.Add("Select ...")
                'm_view.CertifiedRegions = listCertifiedRegions
                'Dim listUnCertifiedRegions As List(Of String) = New List(Of String)
                'listUnCertifiedRegions.Add("Select ...")
                'm_view.UncertifiedRegions = listUnCertifiedRegions
                m_view.SetupCertificateView(m_view.ProductRequestStatusData)
                m_view.DataBindView()
                Return
            End If

            'Dim marketing As MarketingNew = New MarketingNew()


            'If m_view.ProductRequestStatusData IsNot Nothing Then
            '    m_view.ProductRequestStatusData.Clear()
            'End If
            RefreshCurrentCertView()

            '' list contains certified region list and uncertified region list
            'Dim listCertifiedUncertifiedRegions As List(Of List(Of String)) = marketing.GetCertifiedAndUncertifiedRegions(strBrand, strBrandLine)
            'Dim listCertifiedRegion As List(Of String) = listCertifiedUncertifiedRegions(0)
            'Dim listUnCertifiedRegion As List(Of String) = listCertifiedUncertifiedRegions(1)
            '' empty dataset get from model
            'If listCertifiedRegion.Count() = 0 And listUnCertifiedRegion.Count() = 0 Then
            '    'm_view.SelectedRegionName = ""
            '    m_view.ErrorText = "No region data found for brand " + m_view.Brand.Trim() + " and brand line " + m_view.BrandLine + "."
            '    'If m_view.CertifiedRegions IsNot Nothing Then
            '    '    m_view.CertifiedRegions.Clear()
            '    'End If
            '    'If m_view.UncertifiedRegions IsNot Nothing Then
            '    '    m_view.UncertifiedRegions.Clear()
            '    'End If
            '    If m_view.ProductRequestStatusData IsNot Nothing Then
            '        m_view.ProductRequestStatusData.Clear()
            '    End If
            '    'initial the region lists
            '    'Dim listCertifiedRegions As List(Of String) = New List(Of String)
            '    'listCertifiedRegions.Add("Select ...")
            '    'm_view.CertifiedRegions = listCertifiedRegions
            '    'Dim listUnCertifiedRegions As List(Of String) = New List(Of String)
            '    'listUnCertifiedRegions.Add("Select ...")
            '    'm_view.UncertifiedRegions = listUnCertifiedRegions
            '    m_view.SetupRegionView(m_view.ProductRequestStatusData)
            '    m_view.DataBindView()
            'Else
            '    Dim listCertifiedRegions As List(Of String) = New List(Of String)
            '    'listCertifiedRegions.Add("Select ...")
            '    'listCertifiedRegions.InsertRange(1, listCertifiedRegion)
            '    'm_view.CertifiedRegions = listCertifiedRegions
            '    'Dim listUnCertifiedRegions As List(Of String) = New List(Of String)
            '    'listUnCertifiedRegions.Add("Select ...")
            '    'listUnCertifiedRegions.InsertRange(1, listUnCertifiedRegion)
            '    'm_view.UncertifiedRegions = listUnCertifiedRegions
            '    'm_view.DataBindView()

            '    If listCertifiedRegions.Count > 1 Then
            '        ' no selected Region Name available
            '        'If m_view.SelectedRegionName = "" Then
            '        '    m_view.SelectedRegionName = listCertifiedRegions.Item(1)
            '        '    ' Delete region situation
            '        'ElseIf Not listCertifiedRegions.Contains(m_view.SelectedRegionName) Then
            '        '    m_view.SelectedRegionName = listCertifiedRegions.Item(1)
            '        '    ' Add region situation
            '        'ElseIf bnlAddRegionFlag Then
            '        '    m_view.SelectedRegionName = listCertifiedRegions.Item(1)
            '        'Else
            '        '    ' regular save in certified region list
            '        '    ' Assign the value back to restore the index value of dropdown list
            '        '    m_view.SelectedRegionName = m_view.SelectedRegionName
            '        'End If
            '        RefreshCurrentRegionView()
            '        ' no certified region under this brand and brand line.
            '    ElseIf listCertifiedRegions.Count = 1 Then
            '        '     m_view.SelectedRegionName = ""
            '        RefreshCurrentRegionView()
            '    Else
            '        m_view.DataBindView()
            '    End If
            ' End If
        Catch exc As Exception
            EventLogger.Enter(exc)
            'm_view.SelectedRegionName = ""
            m_view.ErrorText = "Error loading data for brand " + m_view.Brand.Trim() + " and brand line " + m_view.BrandLine + "."
        End Try

    End Sub

    ''' <summary>
    ''' Save the changes and refresh
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks>
    ''' <list type="table">
    ''' <listheader>
    ''' <term>Author</term>
    ''' <description>Description</description>
    ''' </listheader>
    ''' <item>
    ''' <term>N/A</term>
    ''' <description>
    ''' <para>N/A</para>
    ''' <para>Original Code.</para>
    ''' </description>
    ''' </item>
    ''' <item>
    ''' <term>Jhansi</term>
    ''' <description>
    ''' <para>21/10/2019</para>
    ''' <para>Implemented Coding Standards.</para>
    ''' </description>
    ''' </item>
    ''' </list>
    ''' </remarks>
    Private Sub OnSave(ByVal sender As Object, ByVal e As EventArgs)

        Dim strInfoText As String = String.Empty

        Try

            Dim dtmSaveTime As DateTime = DateTime.Now
            Dim blnDone As Boolean = False
            Dim enuNotificationResult As AuditLogModel.NotificationResult

            Dim marketingnew As MarketingNew = New MarketingNew()
            blnDone = marketingnew.SaveCertificationTable(m_view.ProductRequestStatusData, m_view.CertificateTypes)

            If blnDone Then
                strInfoText = "Saved."

                enuNotificationResult = AuditLogModel.CheckForChangesAndSendNotification(AuditLogEntry.AreaOfChange.Marketing, dtmSaveTime)
                strInfoText &= " "
                If enuNotificationResult = AuditLogModel.NotificationResult.Sent Then
                    strInfoText &= "Notification sent."
                ElseIf enuNotificationResult = AuditLogModel.NotificationResult.SendError Then
                    strInfoText &= "Notification failed."
                ElseIf enuNotificationResult = AuditLogModel.NotificationResult.Disabled Then
                    strInfoText &= "Notification disabled."
                End If

                OnSearch(sender, e)
                m_view.DataDirtyFlag = False
            Else
                strInfoText = "Save Failed."
            End If

            m_view.SuccessText = strInfoText
        Catch exc As Exception
            EventLogger.Enter(exc)
            '           m_view.ErrorText = "Error saving data for region " + m_view.SelectedRegionName + "."
        End Try

    End Sub

    ' Added LoadBrands method as per PRJ3617 SAP Interface to International Certification System (OPQ.I.8265)Remediation   
    ''' <summary>
    ''' Load Data for the Brands to View.
    ''' </summary>
    ''' <param name="p_strBrand">Brand</param>
    ''' <remarks>
    ''' <list type="table">
    ''' <listheader>
    ''' <term>Author</term>
    ''' <description>Description</description>
    ''' </listheader>
    ''' <item>
    ''' <term>N/A</term>
    ''' <description>
    ''' <para>N/A</para>
    ''' <para>Original Code.</para>
    ''' </description>
    ''' </item>
    ''' <item>
    ''' <term>Jhansi</term>
    ''' <description>
    ''' <para>21/10/2019</para>
    ''' <para>Implemented Coding Standards.</para>
    ''' </description>
    ''' </item>
    ''' </list>
    ''' </remarks>
    Private Sub LoadBrands(ByVal p_strBrand As String)
        Try
            ' Set page controls to default view.
            m_view.SetupDefaultView()
            'Get the Brand names for Add Brand drop-down list
            Dim certSearch As CertificationSearch = New CertificationSearch()
            Dim listBrandNames As List(Of String) = certSearch.GetBrands(p_strBrand)
            listBrandNames.Insert(0, "Select ...")
            m_view.Brands = listBrandNames
            m_view.DataBindView()
        Catch exp As Exception
            EventLogger.Enter(exp)
            m_view.ErrorText = "Error loading Brand Types data."
        End Try
    End Sub

    ''' <summary>
    ''' Load Data for the BrandLines to View.
    ''' </summary>
    ''' <param name="p_strLine">Line</param>
    ''' <remarks>
    ''' <list type="table">
    ''' <listheader>
    ''' <term>Author</term>
    ''' <description>Description</description>
    ''' </listheader>
    ''' <item>
    ''' <term>N/A</term>
    ''' <description>
    ''' <para>N/A</para>
    ''' <para>Original Code.</para>
    ''' </description>
    ''' </item>
    ''' <item>
    ''' <term>Jhansi</term>
    ''' <description>
    ''' <para>21/10/2019</para>
    ''' <para>Implemented Coding Standards.</para>
    ''' </description>
    ''' </item>
    ''' </list>
    ''' </remarks>
    Public Sub LoadBrandLines(ByVal p_strLine As String)
        Try
            ' Set page controls to default view.
            m_view.SetupDefaultView()
            'Get the Brand Line names for Add Brand Line drop-down list
            Dim certSearch As CertificationSearch = New CertificationSearch()
            Dim listBrandLineNames As List(Of String) = certSearch.GetBrandLines(p_strLine)
            listBrandLineNames.Insert(0, "Select ...")
            m_view.BrandLines = listBrandLineNames
            m_view.DataBindView()

        Catch exp As Exception
            EventLogger.Enter(exp)
            m_view.ErrorText = "Error loading Brand data."
        End Try
    End Sub
    ''' <summary>
    ''' Load Data for the BrandLines to View.
    ''' </summary>
    ''' <param name="p_strMaterialNum">material number</param>
    ''' <remarks>
    ''' <list type="table">
    ''' <listheader>
    ''' <term>Author</term>
    ''' <description>Description</description>
    ''' </listheader>
    ''' <item>
    ''' <term>N/A</term>
    ''' <description>
    ''' <para>N/A</para>
    ''' <para>Original Code.</para>
    ''' </description>
    ''' </item>
    ''' <item>
    ''' <term>Jhansi</term>
    ''' <description>
    ''' <para>21/10/2019</para>
    ''' <para>Implemented Coding Standards.</para>
    ''' </description>
    ''' </item>
    ''' </list>
    ''' </remarks>
    Public Function GetMaterialAttribs(ByVal p_strMaterialNum As String) As String
        Dim strToolTip As String = String.Empty
        Try
            'Get the Tool tip for Material Number
            Dim certSearch As CertificationSearch = New CertificationSearch()
            Dim dtTooltip As New DataTable
            dtTooltip = certSearch.GetMaterialAttribs(p_strMaterialNum)
            strToolTip = certSearch.FormatMaterialAttribsForToolTip(dtTooltip)
        Catch exp As Exception
            EventLogger.Enter(exp)
            m_view.ErrorText = "Error loading Brand Line data."
        End Try
        Return strToolTip
    End Function


#End Region

End Class
