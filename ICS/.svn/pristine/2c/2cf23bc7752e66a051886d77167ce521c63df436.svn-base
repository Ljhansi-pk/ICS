Imports CooperTire.ICS.Model
Imports CooperTire.ICS.Common
Imports CooperTire.ICS.DomainEntities

''' <summary>
''' Detach certification presenter
''' </summary>
''' <remarks>
''' <list type="table">
''' <listheader>
''' <term>Author</term>
''' <description>Description</description>
''' </listheader>
''' <item>
''' <term>N/A</term>
''' <description>
''' <para>N/A</para>
''' <para>Original Code.</para>
''' </description>
''' </item>
''' <item>
''' <term>Jhansi</term>
''' <description>
''' <para>16/10/2019</para>
''' <para>Implemented Coding Standards.</para>
''' </description>
''' </item>
''' </list>
''' </remarks>
Public Class DetachOrMoveCertificationPresenter

#Region "Members"
    ''' <summary>
    '''  Interface to the Detach Or Move Certification User control view.
    ''' </summary>
    Private m_view As IDetachOrMoveCertificationView

#End Region

#Region "Constructors"
    ''' <summary>
    '''  Interface to the Detach Or Move Certification User control view.
    ''' </summary>
    Public Sub New(ByVal p_view As IDetachOrMoveCertificationView)

        Try
            m_view = p_view
            SubscribeToEvents()
        Catch exp As Exception
            EventLogger.Enter(exp)
            Throw New Exception("Error creating " + Me.ToString())
        End Try

    End Sub

#End Region

#Region "Methods"

    ''' <summary>
    ''' Attach presenter to view’s events.
    ''' </summary>
    ''' <remarks>
    ''' <list type="table">
    ''' <listheader>
    ''' <term>Author</term>
    ''' <description>Description</description>
    ''' </listheader>
    ''' <item>
    ''' <term>N/A</term>
    ''' <description>
    ''' <para>N/A</para>
    ''' <para>Original Code.</para>
    ''' </description>
    ''' </item>
    ''' <item>
    ''' <term>Jhansi</term>
    ''' <description>
    ''' <para>16/10/2019</para>
    ''' <para>Implemented Coding Standards.</para>
    ''' </description>
    ''' </item>
    ''' </list>
    ''' </remarks>
    Private Sub SubscribeToEvents()

        AddHandler m_view.LoadView, AddressOf OnLoadView
        AddHandler m_view.ReloadViewData, AddressOf OnReloadViewData
        AddHandler m_view.ShowCertificateMaterials, AddressOf OnShowCertificateMaterials
        AddHandler m_view.Detach, AddressOf OnDetach
        AddHandler m_view.Move, AddressOf OnMove

    End Sub

    ''' <summary>
    ''' Load data for the view
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks>
    ''' <list type="table">
    ''' <listheader>
    ''' <term>Author</term>
    ''' <description>Description</description>
    ''' </listheader>
    ''' <item>
    ''' <term>N/A</term>
    ''' <description>
    ''' <para>N/A</para>
    ''' <para>Original Code.</para>
    ''' </description>
    ''' </item>
    ''' <item>
    ''' <term>Jhansi</term>
    ''' <description>
    ''' <para>16/10/2019</para>
    ''' <para>Implemented Coding Standards.</para>
    ''' </description>
    ''' </item>
    ''' </list>
    ''' </remarks>
    Private Sub OnLoadView(ByVal sender As Object, ByVal e As EventArgs)

        Try
            LoadViewData()
        Catch exp As Exception
            EventLogger.Enter(exp)
            m_view.ErrorText = "Error loading form data."
        End Try

    End Sub

    ''' <summary>
    ''' Reload data for the view - start anew
    ''' </summary>
    ''' <remarks>
    ''' <list type="table">
    ''' <listheader>
    ''' <term>Author</term>
    ''' <description>Description</description>
    ''' </listheader>
    ''' <item>
    ''' <term>N/A</term>
    ''' <description>
    ''' <para>N/A</para>
    ''' <para>Original Code.</para>
    ''' </description>
    ''' </item>
    ''' <item>
    ''' <term>Jhansi</term>
    ''' <description>
    ''' <para>16/10/2019</para>
    ''' <para>Implemented Coding Standards.</para>
    ''' </description>
    ''' </item>
    ''' </list>
    ''' </remarks>
    Private Sub OnReloadViewData()

        Try
            ' Flush all properties:
            m_view.CertificateNumber = String.Empty
            m_view.Extension = String.Empty
            m_view.ErrorText = String.Empty
            m_view.SuccessText = String.Empty
            m_view.SkuId = 0
            m_view.CertificateId = 0
            m_view.NewCertificateNumber = String.Empty
            m_view.NewExtension = String.Empty
            m_view.CertNumErrMsgFlag = False
            m_view.ExtensionErrMsgFlag = False
            m_view.NewCertNumErrMsgFlag = False
            m_view.NewExtensionErrMsgFlag = False

            m_view.CertificateMaterials = Nothing
            m_view.DataBindView()

            LoadViewData()
        Catch exp As Exception
            EventLogger.Enter(exp)
            m_view.ErrorText = "Error re-loading form data."
        End Try

    End Sub

    ''' <summary>
    ''' Load data from business process
    ''' </summary>
    ''' <remarks>
    ''' <list type="table">
    ''' <listheader>
    ''' <term>Author</term>
    ''' <description>Description</description>
    ''' </listheader>
    ''' <item>
    ''' <term>N/A</term>
    ''' <description>
    ''' <para>N/A</para>
    ''' <para>Original Code.</para>
    ''' </description>
    ''' </item>
    ''' <item>
    ''' <term>Jhansi</term>
    ''' <description>
    ''' <para>16/10/2019</para>
    ''' <para>Implemented Coding Standards.</para>
    ''' </description>
    ''' </item>
    ''' </list>
    ''' </remarks>
    Private Sub LoadViewData()

        m_view.AddCertificationTitle = "Detach " + m_view.CertificationName + " certificate"
        m_view.SetupDetachOrMoveCertificationView()

    End Sub

    ''' <summary>
    ''' Get Certificate Materials
    ''' </summary>
    ''' <remarks>
    ''' <list type="table">
    ''' <listheader>
    ''' <term>Author</term>
    ''' <description>Description</description>
    ''' </listheader>
    ''' <item>
    ''' <term>N/A</term>
    ''' <description>
    ''' <para>N/A</para>
    ''' <para>Original Code.</para>
    ''' </description>
    ''' </item>
    ''' <item>
    ''' <term>Jhansi</term>
    ''' <description>
    ''' <para>16/10/2019</para>
    ''' <para>Implemented Coding Standards.</para>
    ''' </description>
    ''' </item>
    ''' </list>
    ''' </remarks>
    Private Sub OnShowCertificateMaterials()

        Dim dtCertificateMaterials As New DataTable
        Dim objCertificationActionModel As New CertificationActionModel
        Dim objCertModel As New CertificateModel
        Dim intCertTypeId As Integer = objCertModel.GetCertificateTypeID(m_view.CertificationName)

        Try
            dtCertificateMaterials = objCertificationActionModel.GetCertificateMaterials(intCertTypeId, _
                                                                                         m_view.CertificateNumber, _
                                                                                         m_view.Extension)
            If (dtCertificateMaterials.Rows.Count > 0) Then
                m_view.CertificateMaterials = dtCertificateMaterials
                m_view.DataBindView()
            Else
                m_view.ErrorText = "No data found."
            End If

        Catch exc As Exception
            EventLogger.Enter(exc)
            If InStr(exc.Message.ToString(), "ORA-20001") > 0 Then
                m_view.ErrorText = String.Format("Certificate number {0} not exist.", m_view.CertificateNumber)
            Else
                m_view.ErrorText = "Error getting certification materials."
            End If
        End Try

    End Sub

    ''' <summary>
    ''' Detach the certificate
    ''' </summary>
    ''' <remarks>
    ''' <list type="table">
    ''' <listheader>
    ''' <term>Author</term>
    ''' <description>Description</description>
    ''' </listheader>
    ''' <item>
    ''' <term>N/A</term>
    ''' <description>
    ''' <para>N/A</para>
    ''' <para>Original Code.</para>
    ''' </description>
    ''' </item>
    ''' <item>
    ''' <term>Jhansi</term>
    ''' <description>
    ''' <para>16/10/2019</para>
    ''' <para>Implemented Coding Standards.</para>
    ''' </description>
    ''' </item>
    ''' </list>
    ''' </remarks>    
    Private Sub OnDetach()

        Dim blnDetachSuccess As Boolean
        Dim objCertificationActionModel As New CertificationActionModel

        Try
            blnDetachSuccess = objCertificationActionModel.DetachCertificate(m_view.SkuId, _
                                                                             m_view.CertificateId)

            If blnDetachSuccess Then
                m_view.SuccessText = "Detached."
            Else
                m_view.ErrorText = "Detach failed."
            End If
        Catch exc As Exception
            EventLogger.Enter(exc)
            If InStr(exc.Message.ToString(), "ORA-20001") > 0 Then
                m_view.ErrorText = String.Format("SkuId {0}, CertificateId {1} not exist.", m_view.SkuId, m_view.CertificateId)
            Else
                m_view.ErrorText = "Error detaching certification."
            End If
        End Try

    End Sub

    ''' <summary>
    ''' Move the certificate
    ''' </summary>
    ''' <remarks>
    ''' <list type="table">
    ''' <listheader>
    ''' <term>Author</term>
    ''' <description>Description</description>
    ''' </listheader>
    ''' <item>
    ''' <term>N/A</term>
    ''' <description>
    ''' <para>N/A</para>
    ''' <para>Original Code.</para>
    ''' </description>
    ''' </item>
    ''' <item>
    ''' <term>Jhansi</term>
    ''' <description>
    ''' <para>16/10/2019</para>
    ''' <para>Implemented Coding Standards.</para>
    ''' </description>
    ''' </item>
    ''' </list>
    ''' </remarks>    
    Private Sub OnMove()

        Dim blnMoveSuccess As Boolean
        Dim objCertificationActionModel As New CertificationActionModel
        Dim objCertModel As New CertificateModel
        Dim intCertTypeId As Integer = objCertModel.GetCertificateTypeID(m_view.CertificationName)

        Try
            If String.IsNullOrEmpty(m_view.NewCertificateNumber) Then
                m_view.ErrorText = "New Certificate Number can not be empty."
                Return
            End If

            blnMoveSuccess = objCertificationActionModel.MoveCertificate(intCertTypeId, _
                                                                         m_view.NewCertificateNumber, _
                                                                         m_view.NewExtension, _
                                                                         m_view.SkuId, _
                                                                         m_view.CertificateId)

            If blnMoveSuccess Then
                m_view.SuccessText = "Moved."
            Else
                m_view.ErrorText = "Move failed."
            End If
        Catch exc As Exception
            EventLogger.Enter(exc)
            If InStr(exc.Message.ToString(), "ORA-20001") > 0 Then
                m_view.ErrorText = String.Format("New Certificate Number {0} not exist.", m_view.NewCertificateNumber)
            Else
                m_view.ErrorText = "Error moving certification."
            End If
        End Try

    End Sub

#End Region

End Class
